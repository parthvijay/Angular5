{"remainingRequest":"/Users/pavijayv/Documents/cisco-ready-qualification/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/Users/pavijayv/Documents/cisco-ready-qualification/node_modules/ag-grid-enterprise/dist/lib/toolPanel/columnsSelect/toolPanelColumnComp.js","dependencies":[{"path":"/Users/pavijayv/Documents/cisco-ready-qualification/node_modules/ag-grid-enterprise/dist/lib/toolPanel/columnsSelect/toolPanelColumnComp.js","mtime":1523957359000},{"path":"/Users/pavijayv/Documents/cisco-ready-qualification/node_modules/cache-loader/dist/cjs.js","mtime":1525383502481},{"path":"/Users/pavijayv/Documents/cisco-ready-qualification/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["// ag-grid-enterprise v17.1.1\n\"use strict\";\nvar __extends = /*@__PURE__*/ require(\"tslib\").__extends;\nvar __decorate = /*@__PURE__*/ require(\"tslib\").__decorate;\nvar __metadata = /*@__PURE__*/ require(\"tslib\").__metadata;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar main_1 = require(\"ag-grid/main\");\nvar ToolPanelColumnComp = /*@__PURE__*/ (function (_super) {\n    __extends(ToolPanelColumnComp, _super);\n    function ToolPanelColumnComp(column, columnDept, allowDragging, groupsExist) {\n        var _this = _super.call(this) || this;\n        _this.processingColumnStateChange = false;\n        _this.column = column;\n        _this.columnDept = columnDept;\n        _this.allowDragging = allowDragging;\n        _this.groupsExist = groupsExist;\n        return _this;\n    }\n    ToolPanelColumnComp.prototype.init = function () {\n        this.setTemplate(ToolPanelColumnComp.TEMPLATE);\n        this.displayName = this.columnController.getDisplayNameForColumn(this.column, 'toolPanel');\n        this.eLabel.innerHTML = this.displayName;\n        // if grouping, we add an extra level of indent, to cater for expand/contract icons we need to indent for\n        var indent = this.columnDept;\n        if (this.groupsExist) {\n            this.addCssClass('ag-toolpanel-add-group-indent');\n        }\n        this.addCssClass(\"ag-toolpanel-indent-\" + indent);\n        this.setupDragging();\n        this.addDestroyableEventListener(this.eventService, main_1.Events.EVENT_COLUMN_PIVOT_MODE_CHANGED, this.onColumnStateChanged.bind(this));\n        this.addDestroyableEventListener(this.column, main_1.Column.EVENT_VALUE_CHANGED, this.onColumnStateChanged.bind(this));\n        this.addDestroyableEventListener(this.column, main_1.Column.EVENT_PIVOT_CHANGED, this.onColumnStateChanged.bind(this));\n        this.addDestroyableEventListener(this.column, main_1.Column.EVENT_ROW_GROUP_CHANGED, this.onColumnStateChanged.bind(this));\n        this.addDestroyableEventListener(this.column, main_1.Column.EVENT_VISIBLE_CHANGED, this.onColumnStateChanged.bind(this));\n        this.addDestroyableEventListener(this.gridOptionsWrapper, 'functionsReadOnly', this.onColumnStateChanged.bind(this));\n        this.instantiate(this.context);\n        this.onColumnStateChanged();\n        main_1.CssClassApplier.addToolPanelClassesFromColDef(this.column.getColDef(), this.getGui(), this.gridOptionsWrapper, this.column, null);\n    };\n    ToolPanelColumnComp.prototype.onLabelClicked = function () {\n        var nextState = !this.cbSelect.isSelected();\n        this.onChangeCommon(nextState);\n    };\n    ToolPanelColumnComp.prototype.onCheckboxChanged = function (event) {\n        this.onChangeCommon(event.selected);\n    };\n    ToolPanelColumnComp.prototype.onChangeCommon = function (nextState) {\n        // only want to action if the user clicked the checkbox, not is we are setting the checkbox because\n        // of a change in the model\n        if (this.processingColumnStateChange) {\n            return;\n        }\n        // action in a timeout, as the action takes some time, we want to update the icons first\n        // so the user gets nice feedback when they click. otherwise there would be a lag and the\n        // user would think the checkboxes were clunky\n        if (this.columnController.isPivotMode()) {\n            if (nextState) {\n                this.actionCheckedPivotMode();\n            }\n            else {\n                this.actionUnCheckedPivotMode();\n            }\n        }\n        else {\n            this.columnController.setColumnVisible(this.column, nextState, \"columnMenu\");\n        }\n        if (this.selectionCallback) {\n            this.selectionCallback(this.isSelected());\n        }\n    };\n    ToolPanelColumnComp.prototype.actionUnCheckedPivotMode = function () {\n        var functionPassive = this.gridOptionsWrapper.isFunctionsPassive();\n        var column = this.column;\n        var columnController = this.columnController;\n        // remove pivot if column is pivoted\n        if (column.isPivotActive()) {\n            if (functionPassive) {\n                var copyOfPivotColumns = this.columnController.getPivotColumns().slice();\n                copyOfPivotColumns.push(column);\n                var event_1 = {\n                    type: main_1.Events.EVENT_COLUMN_PIVOT_CHANGE_REQUEST,\n                    columns: copyOfPivotColumns,\n                    api: this.gridApi,\n                    columnApi: this.columnApi\n                };\n                this.eventService.dispatchEvent(event_1);\n            }\n            else {\n                columnController.removePivotColumn(column, \"columnMenu\");\n            }\n        }\n        // remove value if column is value\n        if (column.isValueActive()) {\n            if (functionPassive) {\n                var copyOfValueColumns = this.columnController.getValueColumns().slice();\n                copyOfValueColumns.push(column);\n                var event_2 = {\n                    type: main_1.Events.EVENT_COLUMN_VALUE_CHANGE_REQUEST,\n                    columns: copyOfValueColumns,\n                    api: this.gridApi,\n                    columnApi: this.columnApi\n                };\n                this.eventService.dispatchEvent(event_2);\n            }\n            else {\n                columnController.removeValueColumn(column, \"columnMenu\");\n            }\n        }\n        // remove group if column is grouped\n        if (column.isRowGroupActive()) {\n            if (functionPassive) {\n                var copyOfRowGroupColumns = this.columnController.getRowGroupColumns().slice();\n                copyOfRowGroupColumns.push(column);\n                var event_3 = {\n                    type: main_1.Events.EVENT_COLUMN_ROW_GROUP_CHANGE_REQUEST,\n                    columns: copyOfRowGroupColumns,\n                    api: this.gridApi,\n                    columnApi: this.columnApi\n                };\n                this.eventService.dispatchEvent(event_3);\n            }\n            else {\n                columnController.removeRowGroupColumn(column, \"columnMenu\");\n            }\n        }\n    };\n    ToolPanelColumnComp.prototype.actionCheckedPivotMode = function () {\n        var column = this.column;\n        // function already active, so do nothing\n        if (column.isValueActive() || column.isPivotActive() || column.isRowGroupActive()) {\n            return;\n        }\n        var functionPassive = this.gridOptionsWrapper.isFunctionsPassive();\n        if (column.isAllowValue()) {\n            if (functionPassive) {\n                var copyOfValueColumns = this.columnController.getValueColumns().slice();\n                main_1.Utils.removeFromArray(copyOfValueColumns, column);\n                var event_4 = {\n                    type: main_1.Events.EVENT_COLUMN_VALUE_CHANGE_REQUEST,\n                    api: this.gridApi,\n                    columnApi: this.columnApi,\n                    columns: copyOfValueColumns\n                };\n                this.eventService.dispatchEvent(event_4);\n            }\n            else {\n                this.columnController.addValueColumn(column, \"columnMenu\");\n            }\n        }\n        else if (column.isAllowRowGroup()) {\n            if (functionPassive) {\n                var copyOfRowGroupColumns = this.columnController.getRowGroupColumns().slice();\n                main_1.Utils.removeFromArray(copyOfRowGroupColumns, column);\n                var event_5 = {\n                    type: main_1.Events.EVENT_COLUMN_ROW_GROUP_CHANGE_REQUEST,\n                    api: this.gridApi,\n                    columnApi: this.columnApi,\n                    columns: copyOfRowGroupColumns\n                };\n                this.eventService.dispatchEvent(event_5);\n            }\n            else {\n                this.columnController.addRowGroupColumn(column, \"columnMenu\");\n            }\n        }\n        else if (column.isAllowPivot()) {\n            if (functionPassive) {\n                var copyOfPivotColumns = this.columnController.getPivotColumns().slice();\n                main_1.Utils.removeFromArray(copyOfPivotColumns, column);\n                var event_6 = {\n                    type: main_1.Events.EVENT_COLUMN_PIVOT_CHANGE_REQUEST,\n                    api: this.gridApi,\n                    columnApi: this.columnApi,\n                    columns: copyOfPivotColumns\n                };\n                this.eventService.dispatchEvent(event_6);\n            }\n            else {\n                this.columnController.addPivotColumn(column, \"columnMenu\");\n            }\n        }\n    };\n    ToolPanelColumnComp.prototype.setupDragging = function () {\n        var _this = this;\n        if (!this.allowDragging) {\n            main_1._.setVisible(this.eDragHandle, false);\n            return;\n        }\n        var dragSource = {\n            type: main_1.DragSourceType.ToolPanel,\n            eElement: this.eDragHandle,\n            dragItemName: this.displayName,\n            dragItemCallback: function () { return _this.createDragItem(); }\n        };\n        this.dragAndDropService.addDragSource(dragSource, true);\n        this.addDestroyFunc(function () { return _this.dragAndDropService.removeDragSource(dragSource); });\n    };\n    ToolPanelColumnComp.prototype.createDragItem = function () {\n        var visibleState = {};\n        visibleState[this.column.getId()] = this.column.isVisible();\n        return {\n            columns: [this.column],\n            visibleState: visibleState\n        };\n    };\n    ToolPanelColumnComp.prototype.onColumnStateChanged = function () {\n        this.processingColumnStateChange = true;\n        var isPivotMode = this.columnController.isPivotMode();\n        if (isPivotMode) {\n            // if reducing, checkbox means column is one of pivot, value or group\n            var anyFunctionActive = this.column.isAnyFunctionActive();\n            this.cbSelect.setSelected(anyFunctionActive);\n            if (this.selectionCallback) {\n                this.selectionCallback(this.isSelected());\n            }\n        }\n        else {\n            // if not reducing, the checkbox tells us if column is visible or not\n            this.cbSelect.setSelected(this.column.isVisible());\n            if (this.selectionCallback) {\n                this.selectionCallback(this.isSelected());\n            }\n        }\n        var checkboxReadOnly;\n        if (isPivotMode) {\n            // when in pivot mode, the item should be read only if:\n            //  a) gui is not allowed make any changes\n            var functionsReadOnly = this.gridOptionsWrapper.isFunctionsReadOnly();\n            //  b) column is not allow any functions on it\n            var noFunctionsAllowed = !this.column.isAnyFunctionAllowed();\n            checkboxReadOnly = functionsReadOnly || noFunctionsAllowed;\n        }\n        else {\n            // when in normal mode, the checkbox is read only if visibility is locked\n            checkboxReadOnly = this.column.isLockVisible();\n        }\n        this.cbSelect.setReadOnly(checkboxReadOnly);\n        var checkboxPassive = isPivotMode && this.gridOptionsWrapper.isFunctionsPassive();\n        this.cbSelect.setPassive(checkboxPassive);\n        this.processingColumnStateChange = false;\n    };\n    ToolPanelColumnComp.prototype.getDisplayName = function () {\n        return this.displayName;\n    };\n    ToolPanelColumnComp.prototype.onSelectAllChanged = function (value) {\n        if (value !== this.cbSelect.isSelected()) {\n            if (!this.cbSelect.isReadOnly()) {\n                this.cbSelect.toggle();\n            }\n        }\n    };\n    ToolPanelColumnComp.prototype.isSelected = function () {\n        return this.cbSelect.isSelected();\n    };\n    ToolPanelColumnComp.prototype.isSelectable = function () {\n        return !this.cbSelect.isReadOnly();\n    };\n    ToolPanelColumnComp.prototype.isExpandable = function () {\n        return false;\n    };\n    ToolPanelColumnComp.prototype.setExpanded = function (value) {\n        console.warn('ag-grid: can not expand a column item that does not represent a column group header');\n    };\n    ToolPanelColumnComp.TEMPLATE = \"<div class=\\\"ag-column-select-column\\\">\\n            <ag-checkbox ref=\\\"cbSelect\\\" class=\\\"ag-column-select-checkbox\\\" (change)=\\\"onCheckboxChanged\\\"></ag-checkbox>\\n            <span class=\\\"ag-column-drag\\\" ref=\\\"eDragHandle\\\"></span>\\n            <span class=\\\"ag-column-select-label\\\" ref=\\\"eLabel\\\" (click)=\\\"onLabelClicked\\\"></span>\\n        </div>\";\n    __decorate([\n        main_1.Autowired('gridOptionsWrapper'),\n        __metadata(\"design:type\", main_1.GridOptionsWrapper)\n    ], ToolPanelColumnComp.prototype, \"gridOptionsWrapper\", void 0);\n    __decorate([\n        main_1.Autowired('columnController'),\n        __metadata(\"design:type\", main_1.ColumnController)\n    ], ToolPanelColumnComp.prototype, \"columnController\", void 0);\n    __decorate([\n        main_1.Autowired('eventService'),\n        __metadata(\"design:type\", main_1.EventService)\n    ], ToolPanelColumnComp.prototype, \"eventService\", void 0);\n    __decorate([\n        main_1.Autowired('dragAndDropService'),\n        __metadata(\"design:type\", main_1.DragAndDropService)\n    ], ToolPanelColumnComp.prototype, \"dragAndDropService\", void 0);\n    __decorate([\n        main_1.Autowired('gridPanel'),\n        __metadata(\"design:type\", main_1.GridPanel)\n    ], ToolPanelColumnComp.prototype, \"gridPanel\", void 0);\n    __decorate([\n        main_1.Autowired('context'),\n        __metadata(\"design:type\", main_1.Context)\n    ], ToolPanelColumnComp.prototype, \"context\", void 0);\n    __decorate([\n        main_1.Autowired('columnApi'),\n        __metadata(\"design:type\", main_1.ColumnApi)\n    ], ToolPanelColumnComp.prototype, \"columnApi\", void 0);\n    __decorate([\n        main_1.Autowired('gridApi'),\n        __metadata(\"design:type\", main_1.GridApi)\n    ], ToolPanelColumnComp.prototype, \"gridApi\", void 0);\n    __decorate([\n        main_1.RefSelector('eLabel'),\n        __metadata(\"design:type\", HTMLElement)\n    ], ToolPanelColumnComp.prototype, \"eLabel\", void 0);\n    __decorate([\n        main_1.RefSelector('cbSelect'),\n        __metadata(\"design:type\", main_1.AgCheckbox)\n    ], ToolPanelColumnComp.prototype, \"cbSelect\", void 0);\n    __decorate([\n        main_1.RefSelector('eDragHandle'),\n        __metadata(\"design:type\", HTMLElement)\n    ], ToolPanelColumnComp.prototype, \"eDragHandle\", void 0);\n    __decorate([\n        main_1.PostConstruct,\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", []),\n        __metadata(\"design:returntype\", void 0)\n    ], ToolPanelColumnComp.prototype, \"init\", null);\n    return ToolPanelColumnComp;\n}(main_1.Component));\nexports.ToolPanelColumnComp = ToolPanelColumnComp;\n",null]}