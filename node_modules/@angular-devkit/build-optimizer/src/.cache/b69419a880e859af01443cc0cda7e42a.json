{"remainingRequest":"/Users/pavijayv/Documents/cisco-ready-qualification/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/Users/pavijayv/Documents/cisco-ready-qualification/node_modules/ag-grid-enterprise/dist/lib/licenseManager.js","dependencies":[{"path":"/Users/pavijayv/Documents/cisco-ready-qualification/node_modules/ag-grid-enterprise/dist/lib/licenseManager.js","mtime":1523957359000},{"path":"/Users/pavijayv/Documents/cisco-ready-qualification/node_modules/cache-loader/dist/cjs.js","mtime":1525383502481},{"path":"/Users/pavijayv/Documents/cisco-ready-qualification/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["// ag-grid-enterprise v17.1.1\n\"use strict\";\nvar __decorate = /*@__PURE__*/ require(\"tslib\").__decorate;\nvar __metadata = /*@__PURE__*/ require(\"tslib\").__metadata;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar main_1 = require(\"ag-grid/main\");\nvar main_2 = require(\"ag-grid/main\");\nvar md5_1 = require(\"./license/md5\");\nvar LicenseManager = /*@__PURE__*/ (function () {\n    function LicenseManager() {\n    }\n    LicenseManager_1 = LicenseManager;\n    LicenseManager.prototype.validateLicense = function () {\n        var gridReleaseDate = LicenseManager_1.getGridReleaseDate();\n        var valid = false;\n        var current = false;\n        var expiry = null;\n        if (!main_2.Utils.missingOrEmpty(LicenseManager_1.licenseKey) && LicenseManager_1.licenseKey.length > 32) {\n            var _a = LicenseManager_1.extractLicenseComponents(LicenseManager_1.licenseKey), md5 = _a.md5, license = _a.license;\n            if (md5 === this.md5.md5(license)) {\n                expiry = LicenseManager_1.extractExpiry(license);\n                if (!isNaN(expiry.getTime())) {\n                    valid = true;\n                    current = (gridReleaseDate < expiry);\n                }\n            }\n        }\n        if (!valid) {\n            LicenseManager_1.outputMessage('********************************************* Invalid License **************************************************', '* Your license for ag-Grid Enterprise is not valid - please contact accounts@ag-grid.com to obtain a valid license. *');\n        }\n        else if (!current) {\n            var formattedExpiryDate = LicenseManager_1.formatDate(expiry);\n            var formattedReleaseDate = LicenseManager_1.formatDate(gridReleaseDate);\n            LicenseManager_1.outputMessage('********************* License not compatible with installed version of ag-Grid Enterprise. *********************', \"Your license for ag-Grid Enterprise expired on \" + formattedExpiryDate + \" but the version installed was released on \" + formattedReleaseDate + \". Please \" +\n                'contact accounts@ag-grid.com to renew your license');\n        }\n    };\n    LicenseManager.extractExpiry = function (license) {\n        var restrictionHashed = license.substring(license.lastIndexOf('_') + 1, license.length);\n        return new Date(parseInt(LicenseManager_1.decode(restrictionHashed)));\n    };\n    LicenseManager.extractLicenseComponents = function (licenseKey) {\n        var hashStart = licenseKey.length - 32;\n        var md5 = licenseKey.substring(hashStart);\n        var license = licenseKey.substring(0, hashStart);\n        return { md5: md5, license: license };\n    };\n    LicenseManager.prototype.getLicenseDetails = function (licenseKey) {\n        var _a = LicenseManager_1.extractLicenseComponents(licenseKey), md5 = _a.md5, license = _a.license;\n        var valid = (md5 === this.md5.md5(license));\n        var expiry;\n        if (valid) {\n            expiry = LicenseManager_1.extractExpiry(license);\n            valid = !isNaN(expiry.getTime());\n        }\n        return {\n            licenseKey: licenseKey,\n            valid: valid,\n            expiry: valid ? LicenseManager_1.formatDate(expiry) : null\n        };\n    };\n    LicenseManager.outputMessage = function (header, message) {\n        console.error('****************************************************************************************************************');\n        console.error('*************************************** ag-Grid Enterprise License *********************************************');\n        console.error(header);\n        console.error(message);\n        console.error('****************************************************************************************************************');\n        console.error('****************************************************************************************************************');\n    };\n    LicenseManager.formatDate = function (date) {\n        var monthNames = [\n            'January', 'February', 'March',\n            'April', 'May', 'June', 'July',\n            'August', 'September', 'October',\n            'November', 'December'\n        ];\n        var day = date.getDate();\n        var monthIndex = date.getMonth();\n        var year = date.getFullYear();\n        return day + ' ' + monthNames[monthIndex] + ' ' + year;\n    };\n    LicenseManager.getGridReleaseDate = function () {\n        return new Date(parseInt(LicenseManager_1.decode(LicenseManager_1.RELEASE_INFORMATION)));\n    };\n    ;\n    LicenseManager.decode = function (input) {\n        var keystr = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\n        var t = '';\n        var n, r, i;\n        var s, o, u, a;\n        var f = 0;\n        var e = input.replace(/[^A-Za-z0-9+/=]/g, '');\n        while (f < e.length) {\n            s = keystr.indexOf(e.charAt(f++));\n            o = keystr.indexOf(e.charAt(f++));\n            u = keystr.indexOf(e.charAt(f++));\n            a = keystr.indexOf(e.charAt(f++));\n            n = s << 2 | o >> 4;\n            r = (o & 15) << 4 | u >> 2;\n            i = (u & 3) << 6 | a;\n            t = t + String.fromCharCode(n);\n            if (u != 64) {\n                t = t + String.fromCharCode(r);\n            }\n            if (a != 64) {\n                t = t + String.fromCharCode(i);\n            }\n        }\n        t = LicenseManager_1.utf8_decode(t);\n        return t;\n    };\n    LicenseManager.utf8_decode = function (input) {\n        input = input.replace(/rn/g, 'n');\n        var t = '';\n        for (var n = 0; n < input.length; n++) {\n            var r = input.charCodeAt(n);\n            if (r < 128) {\n                t += String.fromCharCode(r);\n            }\n            else if (r > 127 && r < 2048) {\n                t += String.fromCharCode(r >> 6 | 192);\n                t += String.fromCharCode(r & 63 | 128);\n            }\n            else {\n                t += String.fromCharCode(r >> 12 | 224);\n                t += String.fromCharCode(r >> 6 & 63 | 128);\n                t += String.fromCharCode(r & 63 | 128);\n            }\n        }\n        return t;\n    };\n    LicenseManager.setLicenseKey = function (licenseKey) {\n        LicenseManager_1.licenseKey = licenseKey;\n    };\n    LicenseManager.RELEASE_INFORMATION = 'MTUyMzU0NTI1NDE5Ng==';\n    __decorate([\n        main_1.Autowired('md5'),\n        __metadata(\"design:type\", md5_1.MD5)\n    ], LicenseManager.prototype, \"md5\", void 0);\n    LicenseManager = LicenseManager_1 = __decorate([\n        main_1.Bean('licenseManager')\n    ], LicenseManager);\n    return LicenseManager;\n    var LicenseManager_1;\n}());\nexports.LicenseManager = LicenseManager;\n",null]}