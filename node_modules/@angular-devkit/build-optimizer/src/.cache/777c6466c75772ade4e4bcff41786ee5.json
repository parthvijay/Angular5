{"remainingRequest":"/Users/pavijayv/Documents/cisco-ready-qualification/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/Users/pavijayv/Documents/cisco-ready-qualification/node_modules/ag-grid-enterprise/dist/lib/setFilter/setFilter.js","dependencies":[{"path":"/Users/pavijayv/Documents/cisco-ready-qualification/node_modules/ag-grid-enterprise/dist/lib/setFilter/setFilter.js","mtime":1523957359000},{"path":"/Users/pavijayv/Documents/cisco-ready-qualification/node_modules/cache-loader/dist/cjs.js","mtime":1525383502481},{"path":"/Users/pavijayv/Documents/cisco-ready-qualification/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["// ag-grid-enterprise v17.1.1\n\"use strict\";\nvar __extends = /*@__PURE__*/ require(\"tslib\").__extends;\nvar __decorate = /*@__PURE__*/ require(\"tslib\").__decorate;\nvar __metadata = /*@__PURE__*/ require(\"tslib\").__metadata;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar main_1 = require(\"ag-grid/main\");\nvar setFilterModel_1 = require(\"./setFilterModel\");\nvar setFilterListItem_1 = require(\"./setFilterListItem\");\nvar virtualList_1 = require(\"../rendering/virtualList\");\nvar CheckboxState = /*@__PURE__*/ (function (CheckboxState) {\n    CheckboxState[CheckboxState[\"CHECKED\"] = 0] = \"CHECKED\";\n    CheckboxState[CheckboxState[\"UNCHECKED\"] = 1] = \"UNCHECKED\";\n    CheckboxState[CheckboxState[\"INTERMEDIATE\"] = 2] = \"INTERMEDIATE\";\n    return CheckboxState;\n})({});\nvar SetFilter = /*@__PURE__*/ (function (_super) {\n    __extends(SetFilter, _super);\n    function SetFilter() {\n        return _super.call(this) || this;\n    }\n    SetFilter.prototype.customInit = function () {\n        var _this = this;\n        var changeFilter = function (applyNow) {\n            if (applyNow === void 0) {\n                applyNow = false;\n            }\n            _this.onFilterChanged(applyNow);\n        };\n        var debounceMs = this.filterParams && this.filterParams.debounceMs != null ? this.filterParams.debounceMs : 0;\n        this.debounceFilterChanged = main_1._.debounce(changeFilter, debounceMs);\n        this.eCheckedIcon = main_1._.createIconNoSpan('checkboxChecked', this.gridOptionsWrapper, this.filterParams.column);\n        this.eUncheckedIcon = main_1._.createIconNoSpan('checkboxUnchecked', this.gridOptionsWrapper, this.filterParams.column);\n        this.eIndeterminateCheckedIcon = main_1._.createIconNoSpan('checkboxIndeterminate', this.gridOptionsWrapper, this.filterParams.column);\n    };\n    SetFilter.prototype.updateCheckboxIcon = function () {\n        main_1._.removeAllChildren(this.eSelectAll);\n        var icon;\n        switch (this.selectAllState) {\n            case CheckboxState.INTERMEDIATE:\n                icon = this.eIndeterminateCheckedIcon;\n                break;\n            case CheckboxState.CHECKED:\n                icon = this.eCheckedIcon;\n                break;\n            case CheckboxState.UNCHECKED:\n                icon = this.eUncheckedIcon;\n                break;\n            default:// default happens when initialising for first time\n                icon = this.eCheckedIcon;\n                break;\n        }\n        this.eSelectAll.appendChild(icon);\n    };\n    SetFilter.prototype.setLoading = function (loading) {\n        main_1._.setVisible(this.eFilterLoading, loading);\n    };\n    SetFilter.prototype.initialiseFilterBodyUi = function () {\n        var _this = this;\n        this.virtualList = new virtualList_1.VirtualList();\n        this.context.wireBean(this.virtualList);\n        this.getGui().querySelector('#richList').appendChild(this.virtualList.getGui());\n        if (main_1.Utils.exists(this.filterParams.cellHeight)) {\n            this.virtualList.setRowHeight(this.filterParams.cellHeight);\n        }\n        this.virtualList.setComponentCreator(this.createSetListItem.bind(this));\n        this.model = new setFilterModel_1.SetFilterModel(this.filterParams.colDef, this.filterParams.rowModel, this.filterParams.valueGetter, this.filterParams.doesRowPassOtherFilter, this.filterParams.suppressSorting, function (values, toSelect) { return _this.setFilterValues(values, toSelect ? false : true, toSelect ? true : false, toSelect); }, this.setLoading.bind(this), this.valueFormatterService, this.filterParams.column);\n        this.virtualList.setModel(new ModelWrapper(this.model));\n        main_1._.setVisible(this.getGui().querySelector('#ag-mini-filter'), !this.filterParams.suppressMiniFilter);\n        this.eMiniFilter.value = this.model.getMiniFilter();\n        this.addDestroyableEventListener(this.eMiniFilter, 'input', function () { return _this.onMiniFilterChanged(); });\n        this.updateCheckboxIcon();\n        this.addDestroyableEventListener(this.eSelectAllContainer, 'click', this.onSelectAll.bind(this));\n        this.updateSelectAll();\n        this.virtualList.refresh();\n    };\n    SetFilter.prototype.modelFromFloatingFilter = function (from) {\n        if (this.gridOptionsWrapper.isEnableOldSetFilterModel()) {\n            return [from];\n        }\n        else {\n            return {\n                values: [from],\n                filterType: 'set'\n            };\n        }\n    };\n    SetFilter.prototype.refreshFilterBodyUi = function () {\n    };\n    SetFilter.prototype.createSetListItem = function (value) {\n        var _this = this;\n        var listItem = new setFilterListItem_1.SetFilterListItem(value, this.filterParams.column);\n        this.context.wireBean(listItem);\n        listItem.setSelected(this.model.isValueSelected(value));\n        listItem.addEventListener(setFilterListItem_1.SetFilterListItem.EVENT_SELECTED, function () {\n            _this.onItemSelected(value, listItem.isSelected());\n        });\n        return listItem;\n    };\n    // we need to have the gui attached before we can draw the virtual rows, as the\n    // virtual row logic needs info about the gui state\n    SetFilter.prototype.afterGuiAttached = function (params) {\n        this.virtualList.refresh();\n        this.eMiniFilter.focus();\n    };\n    SetFilter.prototype.isFilterActive = function () {\n        return this.model.isFilterActive();\n    };\n    SetFilter.prototype.doesFilterPass = function (params) {\n        // if no filter, always pass\n        if (this.model.isEverythingSelected() && !this.filterParams.selectAllOnMiniFilter) {\n            return true;\n        }\n        // if nothing selected in filter, always fail\n        if (this.model.isNothingSelected() && !this.filterParams.selectAllOnMiniFilter) {\n            return false;\n        }\n        var value = this.filterParams.valueGetter(params.node);\n        if (this.filterParams.colDef.keyCreator) {\n            value = this.filterParams.colDef.keyCreator({ value: value });\n        }\n        if (this.filterParams.colDef.refData) {\n            value = this.filterParams.colDef.refData[value];\n        }\n        value = main_1.Utils.makeNull(value);\n        if (Array.isArray(value)) {\n            for (var i = 0; i < value.length; i++) {\n                if (this.model.isValueSelected(value[i])) {\n                    return true;\n                }\n            }\n            return false;\n        }\n        else {\n            return this.model.isValueSelected(value);\n        }\n    };\n    SetFilter.prototype.onNewRowsLoaded = function () {\n        var keepSelection = this.filterParams && this.filterParams.newRowsAction === 'keep';\n        var isSelectAll = this.selectAllState === CheckboxState.CHECKED;\n        // default is reset\n        this.model.refreshAfterNewRowsLoaded(keepSelection, isSelectAll);\n        this.updateSelectAll();\n        this.virtualList.refresh();\n    };\n    //noinspection JSUnusedGlobalSymbols\n    /**\n     * Public method provided so the user can change the value of the filter once\n     * the filter has been already started\n     * @param options The options to use.\n     * @param selectAll If by default all the values should be selected.\n     * @param notify If we should let know the model that the values of the filter have changed\n     * @param toSelect The subset of options to subselect\n     */\n    SetFilter.prototype.setFilterValues = function (options, selectAll, notify, toSelect) {\n        var _this = this;\n        if (selectAll === void 0) {\n            selectAll = false;\n        }\n        if (notify === void 0) {\n            notify = true;\n        }\n        this.model.onFilterValuesReady(function () {\n            var keepSelection = _this.filterParams && _this.filterParams.newRowsAction === 'keep';\n            _this.model.setValuesType(setFilterModel_1.SetFilterModelValuesType.PROVIDED_LIST);\n            _this.model.refreshValues(options, keepSelection, selectAll);\n            _this.updateSelectAll();\n            var actualToSelect = toSelect ? toSelect : options;\n            actualToSelect.forEach(function (option) { return _this.model.selectValue(option); });\n            _this.virtualList.refresh();\n            if (notify) {\n                _this.debounceFilterChanged(true);\n            }\n        });\n    };\n    //noinspection JSUnusedGlobalSymbols\n    /**\n     * Public method provided so the user can reset the values of the filter once that it has started\n     * @param options The options to use.\n     */\n    SetFilter.prototype.resetFilterValues = function () {\n        this.model.setValuesType(setFilterModel_1.SetFilterModelValuesType.NOT_PROVIDED);\n        this.onNewRowsLoaded();\n    };\n    SetFilter.prototype.onAnyFilterChanged = function () {\n        this.model.refreshAfterAnyFilterChanged();\n        this.virtualList.refresh();\n    };\n    SetFilter.prototype.bodyTemplate = function () {\n        var translate = this.translate.bind(this);\n        return \"<div ref=\\\"ag-filter-loading\\\" class=\\\"loading-filter ag-hidden\\\">\" + translate('loadingOoo') + \"</div>\\n                <div>\\n                    <div class=\\\"ag-filter-header-container\\\" id=\\\"ag-mini-filter\\\">\\n                        <input class=\\\"ag-filter-filter\\\" type=\\\"text\\\" placeholder=\\\"\" + translate('searchOoo') + \"\\\"/>\\n                    </div>\\n                    <div class=\\\"ag-filter-header-container\\\">\\n                        <label id=\\\"selectAllContainer\\\">\\n                            <div id=\\\"selectAll\\\" class=\\\"ag-filter-checkbox\\\"></div><span class=\\\"ag-filter-value\\\">(\" + translate('selectAll') + \")</span>\\n                        </label>\\n                    </div>\\n                    <div id=\\\"richList\\\" class=\\\"ag-set-filter-list\\\"></div>                    \\n                </div>\";\n    };\n    SetFilter.prototype.updateSelectAll = function () {\n        if (this.model.isEverythingSelected()) {\n            this.selectAllState = CheckboxState.CHECKED;\n        }\n        else if (this.model.isNothingSelected()) {\n            this.selectAllState = CheckboxState.UNCHECKED;\n        }\n        else {\n            this.selectAllState = CheckboxState.INTERMEDIATE;\n        }\n        this.updateCheckboxIcon();\n    };\n    SetFilter.prototype.onMiniFilterChanged = function () {\n        var miniFilterChanged = this.model.setMiniFilter(this.eMiniFilter.value);\n        if (miniFilterChanged) {\n            this.virtualList.refresh();\n        }\n        this.updateSelectAll();\n    };\n    SetFilter.prototype.onSelectAll = function (event) {\n        main_1._.addAgGridEventPath(event);\n        if (this.selectAllState === CheckboxState.CHECKED) {\n            this.selectAllState = CheckboxState.UNCHECKED;\n        }\n        else {\n            this.selectAllState = CheckboxState.CHECKED;\n        }\n        this.doSelectAll();\n    };\n    SetFilter.prototype.doSelectAll = function () {\n        var checked = this.selectAllState === CheckboxState.CHECKED;\n        if (checked) {\n            this.model.selectEverything();\n        }\n        else {\n            this.model.selectNothing();\n        }\n        this.virtualList.refresh();\n        this.debounceFilterChanged();\n        this.updateSelectAll();\n    };\n    SetFilter.prototype.onItemSelected = function (value, selected) {\n        if (selected) {\n            this.model.selectValue(value);\n        }\n        else {\n            this.model.unselectValue(value);\n        }\n        this.updateSelectAll();\n        this.debounceFilterChanged();\n    };\n    SetFilter.prototype.setMiniFilter = function (newMiniFilter) {\n        this.model.setMiniFilter(newMiniFilter);\n        this.eMiniFilter.value = this.model.getMiniFilter();\n    };\n    SetFilter.prototype.getMiniFilter = function () {\n        return this.model.getMiniFilter();\n    };\n    SetFilter.prototype.selectEverything = function () {\n        this.model.selectEverything();\n        this.updateSelectAll();\n        this.virtualList.refresh();\n    };\n    SetFilter.prototype.selectNothing = function () {\n        this.model.selectNothing();\n        this.updateSelectAll();\n        this.virtualList.refresh();\n    };\n    SetFilter.prototype.unselectValue = function (value) {\n        this.model.unselectValue(value);\n        this.updateSelectAll();\n        this.virtualList.refresh();\n    };\n    SetFilter.prototype.selectValue = function (value) {\n        this.model.selectValue(value);\n        this.updateSelectAll();\n        this.virtualList.refresh();\n    };\n    SetFilter.prototype.isValueSelected = function (value) {\n        return this.model.isValueSelected(value);\n    };\n    SetFilter.prototype.isEverythingSelected = function () {\n        return this.model.isEverythingSelected();\n    };\n    SetFilter.prototype.isNothingSelected = function () {\n        return this.model.isNothingSelected();\n    };\n    SetFilter.prototype.getUniqueValueCount = function () {\n        return this.model.getUniqueValueCount();\n    };\n    SetFilter.prototype.getUniqueValue = function (index) {\n        return this.model.getUniqueValue(index);\n    };\n    SetFilter.prototype.serialize = function () {\n        if (this.gridOptionsWrapper.isEnableOldSetFilterModel()) {\n            return this.model.getModel();\n        }\n        else {\n            return {\n                values: this.model.getModel(),\n                filterType: 'set'\n            };\n        }\n    };\n    SetFilter.prototype.parse = function (dataModel) {\n        // also supporting old filter model for backwards compatibility\n        var newValues = (dataModel instanceof Array) ? dataModel : dataModel.values;\n        this.model.setModel(newValues);\n        this.updateSelectAll();\n        this.virtualList.refresh();\n    };\n    SetFilter.prototype.resetState = function () {\n        this.setMiniFilter(null);\n        this.model.setModel(null, true);\n        this.selectEverything();\n    };\n    __decorate([\n        main_1.QuerySelector('#selectAll'),\n        __metadata(\"design:type\", HTMLInputElement)\n    ], SetFilter.prototype, \"eSelectAll\", void 0);\n    __decorate([\n        main_1.QuerySelector('#selectAllContainer'),\n        __metadata(\"design:type\", HTMLElement)\n    ], SetFilter.prototype, \"eSelectAllContainer\", void 0);\n    __decorate([\n        main_1.QuerySelector('.ag-filter-filter'),\n        __metadata(\"design:type\", HTMLInputElement)\n    ], SetFilter.prototype, \"eMiniFilter\", void 0);\n    __decorate([\n        main_1.RefSelector('ag-filter-loading'),\n        __metadata(\"design:type\", HTMLInputElement)\n    ], SetFilter.prototype, \"eFilterLoading\", void 0);\n    __decorate([\n        main_1.Autowired('valueFormatterService'),\n        __metadata(\"design:type\", main_1.ValueFormatterService)\n    ], SetFilter.prototype, \"valueFormatterService\", void 0);\n    return SetFilter;\n}(main_1.BaseFilter));\nexports.SetFilter = SetFilter;\nvar ModelWrapper = /*@__PURE__*/ (function () {\n    function ModelWrapper(model) {\n        this.model = model;\n    }\n    ModelWrapper.prototype.getRowCount = function () {\n        return this.model.getDisplayedValueCount();\n    };\n    ModelWrapper.prototype.getRow = function (index) {\n        return this.model.getDisplayedValue(index);\n    };\n    return ModelWrapper;\n}());\n",null]}