{"remainingRequest":"/Users/pavijayv/Documents/cisco-ready-qualification/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/Users/pavijayv/Documents/cisco-ready-qualification/node_modules/ag-grid-enterprise/dist/lib/rangeController.js","dependencies":[{"path":"/Users/pavijayv/Documents/cisco-ready-qualification/node_modules/ag-grid-enterprise/dist/lib/rangeController.js","mtime":1523957359000},{"path":"/Users/pavijayv/Documents/cisco-ready-qualification/node_modules/cache-loader/dist/cjs.js","mtime":1525383502481},{"path":"/Users/pavijayv/Documents/cisco-ready-qualification/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["// ag-grid-enterprise v17.1.1\n\"use strict\";\nvar __decorate = /*@__PURE__*/ require(\"tslib\").__decorate;\nvar __metadata = /*@__PURE__*/ require(\"tslib\").__metadata;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar main_1 = require(\"ag-grid/main\");\nvar RangeController = /*@__PURE__*/ (function () {\n    function RangeController() {\n        this.bodyScrollListener = this.onBodyScroll.bind(this);\n        this.dragging = false;\n    }\n    RangeController.prototype.init = function () {\n        this.logger = this.loggerFactory.create('RangeController');\n        this.eventService.addEventListener(main_1.Events.EVENT_COLUMN_EVERYTHING_CHANGED, this.clearSelection.bind(this));\n        this.eventService.addEventListener(main_1.Events.EVENT_COLUMN_GROUP_OPENED, this.clearSelection.bind(this));\n        this.eventService.addEventListener(main_1.Events.EVENT_COLUMN_MOVED, this.clearSelection.bind(this));\n        this.eventService.addEventListener(main_1.Events.EVENT_COLUMN_PINNED, this.clearSelection.bind(this));\n        this.eventService.addEventListener(main_1.Events.EVENT_COLUMN_ROW_GROUP_CHANGED, this.clearSelection.bind(this));\n        this.eventService.addEventListener(main_1.Events.EVENT_COLUMN_VISIBLE, this.clearSelection.bind(this));\n        this.autoScrollService = new AutoScrollService(this.gridPanel, this.gridOptionsWrapper);\n    };\n    RangeController.prototype.setRangeToCell = function (cell) {\n        if (!this.gridOptionsWrapper.isEnableRangeSelection()) {\n            return;\n        }\n        var columns = this.updateSelectedColumns(cell.column, cell.column);\n        if (!columns) {\n            return;\n        }\n        var gridCellDef = { rowIndex: cell.rowIndex, floating: cell.floating, column: cell.column };\n        var newRange = {\n            start: new main_1.GridCell(gridCellDef),\n            end: new main_1.GridCell(gridCellDef),\n            columns: columns\n        };\n        this.cellRanges = [];\n        this.cellRanges.push(newRange);\n        this.activeRange = null;\n        this.dispatchChangedEvent(true, false);\n    };\n    RangeController.prototype.extendRangeToCell = function (toCell) {\n        var lastRange = main_1._.existsAndNotEmpty(this.cellRanges) ? this.cellRanges[this.cellRanges.length - 1] : null;\n        var startCell = lastRange ? lastRange.start : toCell;\n        this.setRange({\n            rowStart: startCell.rowIndex,\n            floatingStart: startCell.floating,\n            rowEnd: toCell.rowIndex,\n            floatingEnd: toCell.floating,\n            columnStart: startCell.column,\n            columnEnd: toCell.column\n        });\n    };\n    // returns true if successful, false if not sucessful\n    RangeController.prototype.extendRangeInDirection = function (startCell, key) {\n        var oneRangeExists = main_1._.exists(this.cellRanges) || this.cellRanges.length === 1;\n        var previousSelectionStart = oneRangeExists ? this.cellRanges[0].start : null;\n        var takeEndFromPreviousSelection = startCell.equals(previousSelectionStart);\n        var previousEndCell = takeEndFromPreviousSelection ? this.cellRanges[0].end : startCell;\n        var newEndCell = this.cellNavigationService.getNextCellToFocus(key, previousEndCell);\n        // if user is at end of grid, so no cell to extend to, we return false\n        if (!newEndCell) {\n            return false;\n        }\n        this.setRange({\n            rowStart: startCell.rowIndex,\n            floatingStart: startCell.floating,\n            rowEnd: newEndCell.rowIndex,\n            floatingEnd: newEndCell.floating,\n            columnStart: startCell.column,\n            columnEnd: newEndCell.column\n        });\n        return true;\n    };\n    RangeController.prototype.setRange = function (rangeSelection) {\n        if (!this.gridOptionsWrapper.isEnableRangeSelection()) {\n            return;\n        }\n        this.cellRanges = [];\n        this.addRange(rangeSelection);\n    };\n    RangeController.prototype.addRange = function (rangeSelection) {\n        if (!this.gridOptionsWrapper.isEnableRangeSelection()) {\n            return;\n        }\n        var columnStart = this.columnController.getColumnWithValidation(rangeSelection.columnStart);\n        var columnEnd = this.columnController.getPrimaryColumn(rangeSelection.columnEnd);\n        if (!columnStart || !columnEnd) {\n            return;\n        }\n        var columns = this.updateSelectedColumns(columnStart, columnEnd);\n        if (!columns) {\n            return;\n        }\n        var startGridCellDef = { column: columnStart, rowIndex: rangeSelection.rowStart, floating: rangeSelection.floatingStart };\n        var endGridCellDef = { column: columnEnd, rowIndex: rangeSelection.rowEnd, floating: rangeSelection.floatingEnd };\n        var newRange = {\n            start: new main_1.GridCell(startGridCellDef),\n            end: new main_1.GridCell(endGridCellDef),\n            columns: columns\n        };\n        if (!this.cellRanges) {\n            this.cellRanges = [];\n        }\n        this.cellRanges.push(newRange);\n        this.dispatchChangedEvent(true, false);\n    };\n    RangeController.prototype.getCellRanges = function () {\n        return this.cellRanges;\n    };\n    RangeController.prototype.isEmpty = function () {\n        return main_1.Utils.missingOrEmpty(this.cellRanges);\n    };\n    RangeController.prototype.isMoreThanOneCell = function () {\n        if (main_1.Utils.missingOrEmpty(this.cellRanges)) {\n            return false;\n        }\n        else {\n            if (this.cellRanges.length > 1) {\n                return true;\n            }\n            else {\n                var onlyRange = this.cellRanges[0];\n                var onlyOneCellInRange = onlyRange.start.column === onlyRange.end.column &&\n                    onlyRange.start.rowIndex === onlyRange.end.rowIndex;\n                return !onlyOneCellInRange;\n            }\n        }\n    };\n    RangeController.prototype.clearSelection = function () {\n        if (main_1.Utils.missing(this.cellRanges)) {\n            return;\n        }\n        this.activeRange = null;\n        this.cellRanges = null;\n        this.dispatchChangedEvent(true, false);\n    };\n    // as the user is dragging outside of the panel, the div starts to scroll, which in turn\n    // means we are selection more (or less) cells, but the mouse isn't moving, so we recalculate\n    // the selection my mimicking a new mouse event\n    RangeController.prototype.onBodyScroll = function () {\n        this.onDragging(this.lastMouseEvent);\n    };\n    RangeController.prototype.isCellInAnyRange = function (cell) {\n        return this.getCellRangeCount(cell) > 0;\n    };\n    RangeController.prototype.isCellInSpecificRange = function (cell, range) {\n        var columnInRange = range.columns.indexOf(cell.column) >= 0;\n        var rowInRange = this.isRowInRange(cell.rowIndex, cell.floating, range);\n        return columnInRange && rowInRange;\n    };\n    // returns the number of ranges this cell is in\n    RangeController.prototype.getCellRangeCount = function (cell) {\n        var _this = this;\n        if (main_1.Utils.missingOrEmpty(this.cellRanges)) {\n            return 0;\n        }\n        var matchingCount = 0;\n        this.cellRanges.forEach(function (cellRange) {\n            if (_this.isCellInSpecificRange(cell, cellRange)) {\n                matchingCount++;\n            }\n        });\n        return matchingCount;\n    };\n    RangeController.prototype.isRowInRange = function (rowIndex, floating, cellRange) {\n        var row1 = new main_1.GridRow(cellRange.start.rowIndex, cellRange.start.floating);\n        var row2 = new main_1.GridRow(cellRange.end.rowIndex, cellRange.end.floating);\n        var firstRow = row1.before(row2) ? row1 : row2;\n        var lastRow = row1.before(row2) ? row2 : row1;\n        var thisRow = new main_1.GridRow(rowIndex, floating);\n        if (thisRow.equals(firstRow) || thisRow.equals(lastRow)) {\n            return true;\n        }\n        else {\n            var afterFirstRow = !thisRow.before(firstRow);\n            var beforeLastRow = thisRow.before(lastRow);\n            return afterFirstRow && beforeLastRow;\n        }\n    };\n    RangeController.prototype.onDragStart = function (mouseEvent) {\n        if (!this.gridOptionsWrapper.isEnableRangeSelection()) {\n            return;\n        }\n        // ctrlKey for windows, metaKey for Apple\n        var multiKeyPressed = mouseEvent.ctrlKey || mouseEvent.metaKey;\n        var allowMulti = !this.gridOptionsWrapper.isSuppressMultiRangeSelection();\n        var multiSelectKeyPressed = allowMulti ? multiKeyPressed : false;\n        if (main_1.Utils.missing(this.cellRanges) || !multiSelectKeyPressed) {\n            this.cellRanges = [];\n        }\n        var cell = this.mouseEventService.getGridCellForEvent(mouseEvent);\n        if (main_1.Utils.missing(cell)) {\n            // if drag wasn't on cell, then do nothing, including do not set dragging=true,\n            // (which them means onDragging and onDragStop do nothing)\n            return;\n        }\n        this.createNewActiveRange(cell);\n        this.gridPanel.addScrollEventListener(this.bodyScrollListener);\n        this.dragging = true;\n        this.lastMouseEvent = mouseEvent;\n        this.selectionChanged(false, true);\n    };\n    RangeController.prototype.createNewActiveRange = function (cell) {\n        var gridCellDef = { column: cell.column, rowIndex: cell.rowIndex, floating: cell.floating };\n        this.activeRange = {\n            start: new main_1.GridCell(gridCellDef),\n            end: new main_1.GridCell(gridCellDef),\n            columns: [cell.column]\n        };\n        this.cellRanges.push(this.activeRange);\n    };\n    RangeController.prototype.selectionChanged = function (finished, started) {\n        this.activeRange.columns = this.updateSelectedColumns(this.activeRange.start.column, this.activeRange.end.column);\n        this.dispatchChangedEvent(finished, started);\n    };\n    RangeController.prototype.dispatchChangedEvent = function (finished, started) {\n        var event = {\n            type: main_1.Events.EVENT_RANGE_SELECTION_CHANGED,\n            api: this.gridApi,\n            columnApi: this.columnApi,\n            finished: finished,\n            started: started\n        };\n        this.eventService.dispatchEvent(event);\n    };\n    RangeController.prototype.onDragStop = function () {\n        if (!this.dragging) {\n            return;\n        }\n        this.autoScrollService.ensureCleared();\n        this.gridPanel.removeScrollEventListener(this.bodyScrollListener);\n        this.lastMouseEvent = null;\n        this.dragging = false;\n        this.dispatchChangedEvent(true, false);\n    };\n    RangeController.prototype.onDragging = function (mouseEvent) {\n        if (!this.dragging || !this.activeRange) {\n            return;\n        }\n        this.lastMouseEvent = mouseEvent;\n        this.autoScrollService.check(mouseEvent);\n        var cell = this.mouseEventService.getGridCellForEvent(mouseEvent);\n        if (main_1.Utils.missing(cell)) {\n            return;\n        }\n        var columnChanged = false;\n        if (cell.column !== this.activeRange.end.column) {\n            this.activeRange.end.column = cell.column;\n            columnChanged = true;\n        }\n        var rowChanged = false;\n        if (cell.rowIndex !== this.activeRange.end.rowIndex || cell.floating !== this.activeRange.end.floating) {\n            this.activeRange.end.rowIndex = cell.rowIndex;\n            this.activeRange.end.floating = cell.floating;\n            rowChanged = true;\n        }\n        if (columnChanged || rowChanged) {\n            this.selectionChanged(false, false);\n        }\n    };\n    RangeController.prototype.updateSelectedColumns = function (columnFrom, columnTo) {\n        var allColumns = this.columnController.getAllDisplayedColumns();\n        var fromIndex = allColumns.indexOf(columnFrom);\n        var toIndex = allColumns.indexOf(columnTo);\n        if (fromIndex < 0) {\n            console.log('ag-Grid: column ' + columnFrom.getId() + ' is not visible');\n            return null;\n        }\n        if (toIndex < 0) {\n            console.log('ag-Grid: column ' + columnTo.getId() + ' is not visible');\n            return null;\n        }\n        var firstIndex = Math.min(fromIndex, toIndex);\n        var lastIndex = Math.max(fromIndex, toIndex);\n        var columns = [];\n        for (var i = firstIndex; i <= lastIndex; i++) {\n            columns.push(allColumns[i]);\n        }\n        return columns;\n    };\n    __decorate([\n        main_1.Autowired('loggerFactory'),\n        __metadata(\"design:type\", main_1.LoggerFactory)\n    ], RangeController.prototype, \"loggerFactory\", void 0);\n    __decorate([\n        main_1.Autowired('gridPanel'),\n        __metadata(\"design:type\", main_1.GridPanel)\n    ], RangeController.prototype, \"gridPanel\", void 0);\n    __decorate([\n        main_1.Autowired('rowModel'),\n        __metadata(\"design:type\", Object)\n    ], RangeController.prototype, \"rowModel\", void 0);\n    __decorate([\n        main_1.Autowired('eventService'),\n        __metadata(\"design:type\", main_1.EventService)\n    ], RangeController.prototype, \"eventService\", void 0);\n    __decorate([\n        main_1.Autowired('columnController'),\n        __metadata(\"design:type\", main_1.ColumnController)\n    ], RangeController.prototype, \"columnController\", void 0);\n    __decorate([\n        main_1.Autowired('rowRenderer'),\n        __metadata(\"design:type\", main_1.RowRenderer)\n    ], RangeController.prototype, \"rowRenderer\", void 0);\n    __decorate([\n        main_1.Autowired('focusedCellController'),\n        __metadata(\"design:type\", main_1.FocusedCellController)\n    ], RangeController.prototype, \"focusedCellController\", void 0);\n    __decorate([\n        main_1.Autowired('mouseEventService'),\n        __metadata(\"design:type\", main_1.MouseEventService)\n    ], RangeController.prototype, \"mouseEventService\", void 0);\n    __decorate([\n        main_1.Autowired('gridOptionsWrapper'),\n        __metadata(\"design:type\", main_1.GridOptionsWrapper)\n    ], RangeController.prototype, \"gridOptionsWrapper\", void 0);\n    __decorate([\n        main_1.Autowired('columnApi'),\n        __metadata(\"design:type\", main_1.ColumnApi)\n    ], RangeController.prototype, \"columnApi\", void 0);\n    __decorate([\n        main_1.Autowired('gridApi'),\n        __metadata(\"design:type\", main_1.GridApi)\n    ], RangeController.prototype, \"gridApi\", void 0);\n    __decorate([\n        main_1.Autowired('cellNavigationService'),\n        __metadata(\"design:type\", main_1.CellNavigationService)\n    ], RangeController.prototype, \"cellNavigationService\", void 0);\n    __decorate([\n        main_1.PostConstruct,\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", []),\n        __metadata(\"design:returntype\", void 0)\n    ], RangeController.prototype, \"init\", null);\n    RangeController = __decorate([\n        main_1.Bean('rangeController')\n    ], RangeController);\n    return RangeController;\n}());\nexports.RangeController = RangeController;\nvar AutoScrollService = /*@__PURE__*/ (function () {\n    function AutoScrollService(gridPanel, gridOptionsWrapper) {\n        this.tickingInterval = null;\n        this.gridPanel = gridPanel;\n        this.gridOptionsWrapper = gridOptionsWrapper;\n    }\n    AutoScrollService.prototype.check = function (mouseEvent) {\n        // we don't do ticking if doing forPrint or autoHeight\n        if (!this.gridOptionsWrapper.isNormalDomLayout()) {\n            return;\n        }\n        var rect = this.gridPanel.getBodyClientRect();\n        this.tickLeft = mouseEvent.clientX < (rect.left + 20);\n        this.tickRight = mouseEvent.clientX > (rect.right - 20);\n        this.tickUp = mouseEvent.clientY < (rect.top + 20);\n        this.tickDown = mouseEvent.clientY > (rect.bottom - 20);\n        if (this.tickLeft || this.tickRight || this.tickUp || this.tickDown) {\n            this.ensureTickingStarted();\n        }\n        else {\n            this.ensureCleared();\n        }\n    };\n    AutoScrollService.prototype.ensureTickingStarted = function () {\n        if (this.tickingInterval === null) {\n            this.tickingInterval = setInterval(this.doTick.bind(this), 100);\n            this.tickCount = 0;\n        }\n    };\n    AutoScrollService.prototype.doTick = function () {\n        this.tickCount++;\n        var vScrollPosition = this.gridPanel.getVScrollPosition();\n        var hScrollPosition = this.gridPanel.getHScrollPosition();\n        var tickAmount;\n        if (this.tickCount > 20) {\n            tickAmount = 200;\n        }\n        else if (this.tickCount > 10) {\n            tickAmount = 80;\n        }\n        else {\n            tickAmount = 40;\n        }\n        if (this.tickUp) {\n            this.gridPanel.setVerticalScrollPosition(vScrollPosition.top - tickAmount);\n        }\n        if (this.tickDown) {\n            this.gridPanel.setVerticalScrollPosition(vScrollPosition.top + tickAmount);\n        }\n        if (this.tickLeft) {\n            this.gridPanel.setHorizontalScrollPosition(hScrollPosition.left - tickAmount);\n        }\n        if (this.tickRight) {\n            this.gridPanel.setHorizontalScrollPosition(hScrollPosition.left + tickAmount);\n        }\n    };\n    AutoScrollService.prototype.ensureCleared = function () {\n        if (this.tickingInterval) {\n            clearInterval(this.tickingInterval);\n            this.tickingInterval = null;\n        }\n    };\n    return AutoScrollService;\n}());\n",null]}