{"remainingRequest":"/Users/pavijayv/Documents/cisco-ready-qualification/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/Users/pavijayv/Documents/cisco-ready-qualification/node_modules/ag-grid-enterprise/dist/lib/aggregation/aggFuncService.js","dependencies":[{"path":"/Users/pavijayv/Documents/cisco-ready-qualification/node_modules/ag-grid-enterprise/dist/lib/aggregation/aggFuncService.js","mtime":1523957359000},{"path":"/Users/pavijayv/Documents/cisco-ready-qualification/node_modules/cache-loader/dist/cjs.js","mtime":1525383502481},{"path":"/Users/pavijayv/Documents/cisco-ready-qualification/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["// ag-grid-enterprise v17.1.1\n\"use strict\";\nvar __decorate = /*@__PURE__*/ require(\"tslib\").__decorate;\nvar __metadata = /*@__PURE__*/ require(\"tslib\").__metadata;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar main_1 = require(\"ag-grid/main\");\nvar AggFuncService = /*@__PURE__*/ (function () {\n    function AggFuncService() {\n        this.aggFuncsMap = {};\n        this.initialised = false;\n    }\n    AggFuncService_1 = AggFuncService;\n    AggFuncService.prototype.init = function () {\n        if (this.initialised) {\n            return;\n        }\n        this.initialised = true;\n        this.initialiseWithDefaultAggregations();\n        this.addAggFuncs(this.gridOptionsWrapper.getAggFuncs());\n    };\n    AggFuncService.prototype.initialiseWithDefaultAggregations = function () {\n        this.aggFuncsMap[AggFuncService_1.AGG_SUM] = aggSum;\n        this.aggFuncsMap[AggFuncService_1.AGG_FIRST] = aggFirst;\n        this.aggFuncsMap[AggFuncService_1.AGG_LAST] = aggLast;\n        this.aggFuncsMap[AggFuncService_1.AGG_MIN] = aggMin;\n        this.aggFuncsMap[AggFuncService_1.AGG_MAX] = aggMax;\n        this.aggFuncsMap[AggFuncService_1.AGG_COUNT] = aggCount;\n        this.aggFuncsMap[AggFuncService_1.AGG_AVG] = aggAvg;\n    };\n    AggFuncService.prototype.getDefaultAggFunc = function (column) {\n        var allKeys = this.getFuncNames(column);\n        // use 'sum' if it's a) allowed for the column and b) still registered\n        // (ie not removed by user)\n        var sumInKeysList = allKeys.indexOf(AggFuncService_1.AGG_SUM) >= 0;\n        var sumInFuncs = main_1._.exists(this.aggFuncsMap[AggFuncService_1.AGG_SUM]);\n        var useSum = sumInKeysList && sumInFuncs;\n        if (useSum) {\n            return AggFuncService_1.AGG_SUM;\n        }\n        else {\n            if (main_1.Utils.existsAndNotEmpty(allKeys)) {\n                return allKeys[0];\n            }\n            else {\n                return null;\n            }\n        }\n    };\n    AggFuncService.prototype.addAggFuncs = function (aggFuncs) {\n        main_1.Utils.iterateObject(aggFuncs, this.addAggFunc.bind(this));\n    };\n    AggFuncService.prototype.addAggFunc = function (key, aggFunc) {\n        this.init();\n        this.aggFuncsMap[key] = aggFunc;\n    };\n    AggFuncService.prototype.getAggFunc = function (name) {\n        this.init();\n        return this.aggFuncsMap[name];\n    };\n    AggFuncService.prototype.getFuncNames = function (column) {\n        var userAllowedFuncs = column.getColDef().allowedAggFuncs;\n        if (main_1._.exists(userAllowedFuncs)) {\n            return userAllowedFuncs;\n        }\n        else {\n            return Object.keys(this.aggFuncsMap).sort();\n        }\n    };\n    AggFuncService.prototype.clear = function () {\n        this.aggFuncsMap = {};\n    };\n    AggFuncService.AGG_SUM = 'sum';\n    AggFuncService.AGG_FIRST = 'first';\n    AggFuncService.AGG_LAST = 'last';\n    AggFuncService.AGG_MIN = 'min';\n    AggFuncService.AGG_MAX = 'max';\n    AggFuncService.AGG_COUNT = 'count';\n    AggFuncService.AGG_AVG = 'avg';\n    __decorate([\n        main_1.Autowired('gridOptionsWrapper'),\n        __metadata(\"design:type\", main_1.GridOptionsWrapper)\n    ], AggFuncService.prototype, \"gridOptionsWrapper\", void 0);\n    __decorate([\n        main_1.PostConstruct,\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", []),\n        __metadata(\"design:returntype\", void 0)\n    ], AggFuncService.prototype, \"init\", null);\n    AggFuncService = AggFuncService_1 = __decorate([\n        main_1.Bean('aggFuncService')\n    ], AggFuncService);\n    return AggFuncService;\n    var AggFuncService_1;\n}());\nexports.AggFuncService = AggFuncService;\nfunction aggSum(input) {\n    var result = null;\n    var length = input.length;\n    for (var i = 0; i < length; i++) {\n        if (typeof input[i] === 'number') {\n            if (result === null) {\n                result = input[i];\n            }\n            else {\n                result += input[i];\n            }\n        }\n    }\n    return result;\n}\nfunction aggFirst(input) {\n    if (input.length >= 0) {\n        return input[0];\n    }\n    else {\n        return null;\n    }\n}\nfunction aggLast(input) {\n    if (input.length >= 0) {\n        return input[input.length - 1];\n    }\n    else {\n        return null;\n    }\n}\nfunction aggMin(input) {\n    var result = null;\n    var length = input.length;\n    for (var i = 0; i < length; i++) {\n        if (typeof input[i] === 'number') {\n            if (result === null) {\n                result = input[i];\n            }\n            else if (result > input[i]) {\n                result = input[i];\n            }\n        }\n    }\n    return result;\n}\nfunction aggMax(input) {\n    var result = null;\n    var length = input.length;\n    for (var i = 0; i < length; i++) {\n        if (typeof input[i] === 'number') {\n            if (result === null) {\n                result = input[i];\n            }\n            else if (result < input[i]) {\n                result = input[i];\n            }\n        }\n    }\n    return result;\n}\nfunction aggCount(input) {\n    var result = {\n        value: 0,\n        toString: function () {\n            return this.value.toString();\n        },\n        // used for sorting\n        toNumber: function () {\n            return this.value;\n        }\n    };\n    var length = input.length;\n    for (var i = 0; i < length; i++) {\n        var isGroupAgg = main_1.Utils.exists(input[i]) && typeof input[i].value === 'number';\n        if (isGroupAgg) {\n            result.value += input[i].value;\n        }\n        else {\n            result.value++;\n        }\n    }\n    return result;\n}\n// the average function is tricky as the multiple levels require weighted averages\n// for the non-leaf node aggregations.\nfunction aggAvg(input) {\n    // the average will be the sum / count\n    var sum = 0;\n    var count = 0;\n    var length = input.length;\n    for (var i = 0; i < length; i++) {\n        var currentItem = input[i];\n        var itemIsGroupResult = main_1.Utils.exists(currentItem) && typeof currentItem.value === 'number' && typeof currentItem.count === 'number';\n        // skip values that are not numbers (ie skip empty values)\n        if (typeof currentItem === 'number') {\n            sum += currentItem;\n            count++;\n            // check if it's a group (ie value is a wrapper object)\n        }\n        else if (itemIsGroupResult) {\n            // we are aggregating groups, so we take the\n            // aggregated values to calculated a weighted average\n            sum += currentItem.value * currentItem.count;\n            count += currentItem.count;\n        }\n    }\n    // avoid divide by zero error\n    var value = null;\n    if (count !== 0) {\n        value = sum / count;\n    }\n    // the result will be an object. when this cell is rendered, only the avg is shown.\n    // however when this cell is part of another aggregation, the count is also needed\n    // to create a weighted average for the next level.\n    var result = {\n        count: count,\n        value: value,\n        // the grid by default uses toString to render values for an object, so this\n        // is a trick to get the default cellRenderer to display the avg value\n        toString: function () {\n            if (typeof this.value === 'number') {\n                return this.value.toString();\n            }\n            else {\n                return '';\n            }\n        },\n        // used for sorting\n        toNumber: function () {\n            return this.value;\n        }\n    };\n    return result;\n}\n",null]}