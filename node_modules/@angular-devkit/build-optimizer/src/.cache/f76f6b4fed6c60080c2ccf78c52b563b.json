{"remainingRequest":"/Users/pavijayv/Documents/cisco-ready-qualification/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/Users/pavijayv/Documents/cisco-ready-qualification/node_modules/ng4-click-outside/lib/click-outside.directive.js","dependencies":[{"path":"/Users/pavijayv/Documents/cisco-ready-qualification/node_modules/ng4-click-outside/lib/click-outside.directive.js","mtime":1509034203000},{"path":"/Users/pavijayv/Documents/cisco-ready-qualification/node_modules/cache-loader/dist/cjs.js","mtime":1525383502481},{"path":"/Users/pavijayv/Documents/cisco-ready-qualification/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar core_1 = require(\"@angular/core\");\nvar common_1 = require(\"@angular/common\");\nvar ClickOutsideDirective = /*@__PURE__*/ (function () {\n    function ClickOutsideDirective(_el, platformId) {\n        this._el = _el;\n        this.platformId = platformId;\n        this.attachOutsideOnClick = false;\n        this.delayClickOutsideInit = false;\n        this.exclude = '';\n        this.excludeBeforeClick = false;\n        this.clickOutsideEvents = '';\n        this.clickOutside = new core_1.EventEmitter();\n        this._nodesExcluded = [];\n        this._events = ['click'];\n        this._initOnClickBody = this._initOnClickBody.bind(this);\n        this._onClickBody = this._onClickBody.bind(this);\n    }\n    ClickOutsideDirective.prototype.ngOnInit = function () {\n        if (common_1.isPlatformBrowser(this.platformId)) {\n            this._init();\n        }\n    };\n    ClickOutsideDirective.prototype.ngOnDestroy = function () {\n        var _this = this;\n        if (common_1.isPlatformBrowser(this.platformId)) {\n            if (this.attachOutsideOnClick) {\n                this._events.forEach(function (e) { return _this._el.nativeElement.removeEventListener(e, _this._initOnClickBody); });\n            }\n            this._events.forEach(function (e) { return document.body.removeEventListener(e, _this._onClickBody); });\n        }\n    };\n    ClickOutsideDirective.prototype.ngOnChanges = function (changes) {\n        if (common_1.isPlatformBrowser(this.platformId)) {\n            if (changes['attachOutsideOnClick'] || changes['exclude']) {\n                this._init();\n            }\n        }\n    };\n    ClickOutsideDirective.prototype._init = function () {\n        var _this = this;\n        if (this.clickOutsideEvents !== '') {\n            this._events = this.clickOutsideEvents.split(' ');\n        }\n        this._excludeCheck();\n        if (this.attachOutsideOnClick) {\n            this._events.forEach(function (e) { return _this._el.nativeElement.addEventListener(e, _this._initOnClickBody); });\n        }\n        else {\n            this._initOnClickBody();\n        }\n    };\n    ClickOutsideDirective.prototype._initOnClickBody = function () {\n        if (this.delayClickOutsideInit) {\n            setTimeout(this._initClickListeners.bind(this));\n        }\n        else {\n            this._initClickListeners();\n        }\n    };\n    ClickOutsideDirective.prototype._initClickListeners = function () {\n        var _this = this;\n        this._events.forEach(function (e) { return document.body.addEventListener(e, _this._onClickBody); });\n    };\n    ClickOutsideDirective.prototype._excludeCheck = function () {\n        if (this.exclude) {\n            try {\n                var nodes = Array.from(document.querySelectorAll(this.exclude));\n                if (nodes) {\n                    this._nodesExcluded = nodes;\n                }\n            }\n            catch (err) {\n                console.error('[ng-click-outside] Check your exclude selector syntax.', err);\n            }\n        }\n    };\n    ClickOutsideDirective.prototype._onClickBody = function (ev) {\n        var _this = this;\n        if (this.excludeBeforeClick) {\n            this._excludeCheck();\n        }\n        if (!this._el.nativeElement.contains(ev.target) && !this._shouldExclude(ev.target)) {\n            this.clickOutside.emit(ev);\n            if (this.attachOutsideOnClick) {\n                this._events.forEach(function (e) { return document.body.removeEventListener(e, _this._onClickBody); });\n            }\n        }\n    };\n    ClickOutsideDirective.prototype._shouldExclude = function (target) {\n        for (var _i = 0, _a = this._nodesExcluded; _i < _a.length; _i++) {\n            var excludedNode = _a[_i];\n            if (excludedNode.contains(target)) {\n                return true;\n            }\n        }\n        return false;\n    };\n    ClickOutsideDirective.decorators = [\n        { type: core_1.Injectable },\n        { type: core_1.Directive, args: [{ selector: '[clickOutside]' },] },\n    ];\n    ClickOutsideDirective.propDecorators = {\n        'attachOutsideOnClick': [{ type: core_1.Input },],\n        'delayClickOutsideInit': [{ type: core_1.Input },],\n        'exclude': [{ type: core_1.Input },],\n        'excludeBeforeClick': [{ type: core_1.Input },],\n        'clickOutsideEvents': [{ type: core_1.Input },],\n        'clickOutside': [{ type: core_1.Output },],\n    };\n    return ClickOutsideDirective;\n}());\nexports.ClickOutsideDirective = ClickOutsideDirective;\n",null]}