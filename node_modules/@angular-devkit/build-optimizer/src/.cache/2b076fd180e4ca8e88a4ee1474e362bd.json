{"remainingRequest":"/Users/pavijayv/Documents/cisco-ready-qualification/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/Users/pavijayv/Documents/cisco-ready-qualification/node_modules/ag-grid-enterprise/dist/lib/rowModels/enterprise/enterpriseBlock.js","dependencies":[{"path":"/Users/pavijayv/Documents/cisco-ready-qualification/node_modules/ag-grid-enterprise/dist/lib/rowModels/enterprise/enterpriseBlock.js","mtime":1523957359000},{"path":"/Users/pavijayv/Documents/cisco-ready-qualification/node_modules/cache-loader/dist/cjs.js","mtime":1525383502481},{"path":"/Users/pavijayv/Documents/cisco-ready-qualification/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["// ag-grid-enterprise v17.1.1\n\"use strict\";\nvar __extends = /*@__PURE__*/ require(\"tslib\").__extends;\nvar __decorate = /*@__PURE__*/ require(\"tslib\").__decorate;\nvar __metadata = /*@__PURE__*/ require(\"tslib\").__metadata;\nvar __param = /*@__PURE__*/ require(\"tslib\").__param;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar ag_grid_1 = require(\"ag-grid\");\nvar EnterpriseBlock = /*@__PURE__*/ (function (_super) {\n    __extends(EnterpriseBlock, _super);\n    function EnterpriseBlock(pageNumber, parentRowNode, params, parentCache) {\n        var _this = _super.call(this, pageNumber, params) || this;\n        _this.params = params;\n        _this.parentRowNode = parentRowNode;\n        _this.parentCache = parentCache;\n        _this.level = parentRowNode.level + 1;\n        _this.groupLevel = _this.level < params.rowGroupCols.length;\n        _this.leafGroup = _this.level === (params.rowGroupCols.length - 1);\n        return _this;\n    }\n    EnterpriseBlock.prototype.createNodeIdPrefix = function () {\n        var parts = [];\n        var rowNode = this.parentRowNode;\n        // pull keys from all parent nodes, but do not include the root node\n        while (rowNode.level >= 0) {\n            parts.push(rowNode.key);\n            rowNode = rowNode.parent;\n        }\n        if (parts.length > 0) {\n            this.nodeIdPrefix = parts.reverse().join('-') + '-';\n        }\n    };\n    EnterpriseBlock.prototype.createIdForIndex = function (index) {\n        if (ag_grid_1._.exists(this.nodeIdPrefix)) {\n            return this.nodeIdPrefix + index.toString();\n        }\n        else {\n            return index.toString();\n        }\n    };\n    EnterpriseBlock.prototype.getNodeIdPrefix = function () {\n        return this.nodeIdPrefix;\n    };\n    EnterpriseBlock.prototype.getRow = function (displayRowIndex) {\n        // do binary search of tree\n        // http://oli.me.uk/2013/06/08/searching-javascript-arrays-with-a-binary-search/\n        var bottomPointer = this.getStartRow();\n        // the end row depends on whether all this block is used or not. if the virtual row count\n        // is before the end, then not all the row is used\n        var virtualRowCount = this.parentCache.getVirtualRowCount();\n        var endRow = this.getEndRow();\n        var actualEnd = (virtualRowCount < endRow) ? virtualRowCount : endRow;\n        var topPointer = actualEnd - 1;\n        if (ag_grid_1._.missing(topPointer) || ag_grid_1._.missing(bottomPointer)) {\n            console.warn(\"ag-grid: error: topPointer = \" + topPointer + \", bottomPointer = \" + bottomPointer);\n            return null;\n        }\n        while (true) {\n            var midPointer = Math.floor((bottomPointer + topPointer) / 2);\n            var currentRowNode = _super.prototype.getRowUsingLocalIndex.call(this, midPointer);\n            if (currentRowNode.rowIndex === displayRowIndex) {\n                return currentRowNode;\n            }\n            var childrenCache = currentRowNode.childrenCache;\n            if (currentRowNode.rowIndex === displayRowIndex) {\n                return currentRowNode;\n            }\n            else if (currentRowNode.expanded && childrenCache && childrenCache.isDisplayIndexInCache(displayRowIndex)) {\n                return childrenCache.getRow(displayRowIndex);\n            }\n            else if (currentRowNode.rowIndex < displayRowIndex) {\n                bottomPointer = midPointer + 1;\n            }\n            else if (currentRowNode.rowIndex > displayRowIndex) {\n                topPointer = midPointer - 1;\n            }\n        }\n    };\n    EnterpriseBlock.prototype.setBeans = function (loggerFactory) {\n        this.logger = loggerFactory.create('EnterpriseBlock');\n    };\n    EnterpriseBlock.prototype.init = function () {\n        if (this.groupLevel) {\n            var groupColVo = this.params.rowGroupCols[this.level];\n            this.groupField = groupColVo.field;\n            this.rowGroupColumn = this.columnController.getRowGroupColumns()[this.level];\n        }\n        this.createNodeIdPrefix();\n        _super.prototype.init.call(this, {\n            context: this.context,\n            rowRenderer: this.rowRenderer\n        });\n    };\n    EnterpriseBlock.prototype.setDataAndId = function (rowNode, data, index) {\n        var _this = this;\n        rowNode.stub = false;\n        if (ag_grid_1._.exists(data)) {\n            // if the user is not providing id's, then we build an id based on the index.\n            // for infinite scrolling, the index is used on it's own. for enterprise,\n            // we combine the index with the level and group key, so that the id is\n            // unique across the set.\n            //\n            // unique id is needed for selection (so selection can be maintained when\n            // doing server side sorting / filtering) - if user is not providing id's\n            // (and we use the indexes) then selection will not work between sorting &\n            // filtering.\n            //\n            // id's are also used by the row renderer for updating the dom as it identifies\n            // rowNodes by id\n            var idToUse = this.createIdForIndex(index);\n            rowNode.setDataAndId(data, idToUse);\n            rowNode.setRowHeight(this.gridOptionsWrapper.getRowHeightForNode(rowNode));\n            if (rowNode.group) {\n                rowNode.key = this.valueService.getValue(this.rowGroupColumn, rowNode);\n                if (rowNode.key === null || rowNode.key === undefined) {\n                    ag_grid_1._.doOnce(function () {\n                        console.warn(\"null and undefined values are not allowed for enterprise row model keys\");\n                        if (_this.rowGroupColumn) {\n                            console.warn(\"column = \" + _this.rowGroupColumn.getId());\n                        }\n                        console.warn(\"data is \", rowNode.data);\n                    }, 'EnterpriseBlock-CannotHaveNullOrUndefinedForKey');\n                }\n            }\n        }\n        else {\n            rowNode.setDataAndId(undefined, undefined);\n            rowNode.key = null;\n        }\n        if (this.groupLevel) {\n            this.setGroupDataIntoRowNode(rowNode);\n            this.setChildCountIntoRowNode(rowNode);\n        }\n    };\n    EnterpriseBlock.prototype.setChildCountIntoRowNode = function (rowNode) {\n        var getChildCount = this.gridOptionsWrapper.getChildCountFunc();\n        if (getChildCount) {\n            rowNode.allChildrenCount = getChildCount(rowNode.data);\n        }\n    };\n    EnterpriseBlock.prototype.setGroupDataIntoRowNode = function (rowNode) {\n        var _this = this;\n        var groupDisplayCols = this.columnController.getGroupDisplayColumns();\n        groupDisplayCols.forEach(function (col) {\n            if (col.isRowGroupDisplayed(_this.rowGroupColumn.getId())) {\n                var groupValue = _this.valueService.getValue(_this.rowGroupColumn, rowNode);\n                if (ag_grid_1._.missing(rowNode.groupData)) {\n                    rowNode.groupData = {};\n                }\n                rowNode.groupData[col.getColId()] = groupValue;\n            }\n        });\n    };\n    EnterpriseBlock.prototype.loadFromDatasource = function () {\n        var _this = this;\n        var params = this.createLoadParams();\n        setTimeout(function () {\n            _this.params.datasource.getRows(params);\n        }, 0);\n    };\n    EnterpriseBlock.prototype.createBlankRowNode = function (rowIndex) {\n        var rowNode = _super.prototype.createBlankRowNode.call(this, rowIndex);\n        rowNode.group = this.groupLevel;\n        rowNode.leafGroup = this.leafGroup;\n        rowNode.level = this.level;\n        rowNode.uiLevel = this.level;\n        rowNode.parent = this.parentRowNode;\n        // stub gets set to true here, and then false when this rowNode gets it's data\n        rowNode.stub = true;\n        if (rowNode.group) {\n            rowNode.expanded = false;\n            rowNode.field = this.groupField;\n            rowNode.rowGroupColumn = this.rowGroupColumn;\n        }\n        return rowNode;\n    };\n    EnterpriseBlock.prototype.createGroupKeys = function (groupNode) {\n        var keys = [];\n        var pointer = groupNode;\n        while (pointer.level >= 0) {\n            keys.push(pointer.key);\n            pointer = pointer.parent;\n        }\n        keys.reverse();\n        return keys;\n    };\n    EnterpriseBlock.prototype.isPixelInRange = function (pixel) {\n        return pixel >= this.blockTop && pixel < (this.blockTop + this.blockHeight);\n    };\n    EnterpriseBlock.prototype.getRowBounds = function (index, virtualRowCount) {\n        var start = this.getStartRow();\n        var end = this.getEndRow();\n        for (var i = start; i <= end; i++) {\n            // the blocks can have extra rows in them, if they are the last block\n            // in the cache and the virtual row count doesn't divide evenly by the\n            if (i >= virtualRowCount) {\n                continue;\n            }\n            var rowNode = this.getRowUsingLocalIndex(i);\n            if (rowNode) {\n                if (rowNode.rowIndex === index) {\n                    return {\n                        rowHeight: rowNode.rowHeight,\n                        rowTop: rowNode.rowTop\n                    };\n                }\n                if (rowNode.group && rowNode.expanded && ag_grid_1._.exists(rowNode.childrenCache)) {\n                    var enterpriseCache = rowNode.childrenCache;\n                    if (enterpriseCache.isDisplayIndexInCache(index)) {\n                        return enterpriseCache.getRowBounds(index);\n                    }\n                }\n            }\n        }\n        console.error(\"ag-Grid: looking for invalid row index in Enterprise Row Model, index=\" + index);\n        return null;\n    };\n    EnterpriseBlock.prototype.getRowIndexAtPixel = function (pixel, virtualRowCount) {\n        var start = this.getStartRow();\n        var end = this.getEndRow();\n        for (var i = start; i <= end; i++) {\n            // the blocks can have extra rows in them, if they are the last block\n            // in the cache and the virtual row count doesn't divide evenly by the\n            if (i >= virtualRowCount) {\n                continue;\n            }\n            var rowNode = this.getRowUsingLocalIndex(i);\n            if (rowNode) {\n                if (rowNode.isPixelInRange(pixel)) {\n                    return rowNode.rowIndex;\n                }\n                if (rowNode.group && rowNode.expanded && ag_grid_1._.exists(rowNode.childrenCache)) {\n                    var enterpriseCache = rowNode.childrenCache;\n                    if (enterpriseCache.isPixelInRange(pixel)) {\n                        return enterpriseCache.getRowIndexAtPixel(pixel);\n                    }\n                }\n            }\n        }\n        console.warn(\"ag-Grid: invalid pixel range for enterprise block \" + pixel);\n        return 0;\n    };\n    EnterpriseBlock.prototype.clearRowTops = function (virtualRowCount) {\n        this.forEachRowNode(virtualRowCount, function (rowNode) {\n            rowNode.clearRowTop();\n            var hasChildCache = rowNode.group && ag_grid_1._.exists(rowNode.childrenCache);\n            if (hasChildCache) {\n                var enterpriseCache = rowNode.childrenCache;\n                enterpriseCache.clearRowTops();\n            }\n        });\n    };\n    EnterpriseBlock.prototype.setDisplayIndexes = function (displayIndexSeq, virtualRowCount, nextRowTop) {\n        this.displayIndexStart = displayIndexSeq.peek();\n        this.blockTop = nextRowTop.value;\n        this.forEachRowNode(virtualRowCount, function (rowNode) {\n            var rowIndex = displayIndexSeq.next();\n            rowNode.setRowIndex(rowIndex);\n            rowNode.setRowTop(nextRowTop.value);\n            nextRowTop.value += rowNode.rowHeight;\n            var hasChildCache = rowNode.group && ag_grid_1._.exists(rowNode.childrenCache);\n            if (hasChildCache) {\n                var enterpriseCache = rowNode.childrenCache;\n                if (rowNode.expanded) {\n                    enterpriseCache.setDisplayIndexes(displayIndexSeq, nextRowTop);\n                }\n                else {\n                    // we need to clear the row tops, as the row renderer depends on\n                    // this to know if the row should be faded out\n                    enterpriseCache.clearRowTops();\n                }\n            }\n        });\n        this.displayIndexEnd = displayIndexSeq.peek();\n        this.blockHeight = nextRowTop.value - this.blockTop;\n    };\n    EnterpriseBlock.prototype.forEachRowNode = function (virtualRowCount, callback) {\n        var start = this.getStartRow();\n        var end = this.getEndRow();\n        for (var i = start; i <= end; i++) {\n            // the blocks can have extra rows in them, if they are the last block\n            // in the cache and the virtual row count doesn't divide evenly by the\n            if (i >= virtualRowCount) {\n                continue;\n            }\n            var rowNode = this.getRowUsingLocalIndex(i);\n            if (rowNode) {\n                callback(rowNode);\n            }\n        }\n    };\n    EnterpriseBlock.prototype.createLoadParams = function () {\n        var groupKeys = this.createGroupKeys(this.parentRowNode);\n        var request = {\n            startRow: this.getStartRow(),\n            endRow: this.getEndRow(),\n            rowGroupCols: this.params.rowGroupCols,\n            valueCols: this.params.valueCols,\n            pivotCols: this.params.pivotCols,\n            pivotMode: this.params.pivotMode,\n            groupKeys: groupKeys,\n            filterModel: this.params.filterModel,\n            sortModel: this.params.sortModel\n        };\n        var params = {\n            successCallback: this.pageLoaded.bind(this, this.getVersion()),\n            failCallback: this.pageLoadFailed.bind(this),\n            request: request,\n            parentNode: this.parentRowNode\n        };\n        return params;\n    };\n    EnterpriseBlock.prototype.isDisplayIndexInBlock = function (displayIndex) {\n        return displayIndex >= this.displayIndexStart && displayIndex < this.displayIndexEnd;\n    };\n    EnterpriseBlock.prototype.isBlockBefore = function (displayIndex) {\n        return displayIndex >= this.displayIndexEnd;\n    };\n    EnterpriseBlock.prototype.getDisplayIndexStart = function () {\n        return this.displayIndexStart;\n    };\n    EnterpriseBlock.prototype.getDisplayIndexEnd = function () {\n        return this.displayIndexEnd;\n    };\n    EnterpriseBlock.prototype.getBlockHeight = function () {\n        return this.blockHeight;\n    };\n    EnterpriseBlock.prototype.getBlockTop = function () {\n        return this.blockTop;\n    };\n    __decorate([\n        ag_grid_1.Autowired('context'),\n        __metadata(\"design:type\", ag_grid_1.Context)\n    ], EnterpriseBlock.prototype, \"context\", void 0);\n    __decorate([\n        ag_grid_1.Autowired('rowRenderer'),\n        __metadata(\"design:type\", ag_grid_1.RowRenderer)\n    ], EnterpriseBlock.prototype, \"rowRenderer\", void 0);\n    __decorate([\n        ag_grid_1.Autowired('columnController'),\n        __metadata(\"design:type\", ag_grid_1.ColumnController)\n    ], EnterpriseBlock.prototype, \"columnController\", void 0);\n    __decorate([\n        ag_grid_1.Autowired('valueService'),\n        __metadata(\"design:type\", ag_grid_1.ValueService)\n    ], EnterpriseBlock.prototype, \"valueService\", void 0);\n    __decorate([\n        ag_grid_1.Autowired('gridOptionsWrapper'),\n        __metadata(\"design:type\", ag_grid_1.GridOptionsWrapper)\n    ], EnterpriseBlock.prototype, \"gridOptionsWrapper\", void 0);\n    __decorate([\n        __param(0, ag_grid_1.Qualifier('loggerFactory')),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", [ag_grid_1.LoggerFactory]),\n        __metadata(\"design:returntype\", void 0)\n    ], EnterpriseBlock.prototype, \"setBeans\", null);\n    __decorate([\n        ag_grid_1.PostConstruct,\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", []),\n        __metadata(\"design:returntype\", void 0)\n    ], EnterpriseBlock.prototype, \"init\", null);\n    return EnterpriseBlock;\n}(ag_grid_1.RowNodeBlock));\nexports.EnterpriseBlock = EnterpriseBlock;\n",null]}