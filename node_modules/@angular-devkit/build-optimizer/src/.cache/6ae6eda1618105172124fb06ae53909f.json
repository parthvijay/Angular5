{"remainingRequest":"/Users/pavijayv/Documents/cisco-ready-qualification/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/Users/pavijayv/Documents/cisco-ready-qualification/node_modules/ag-grid-enterprise/dist/lib/menu/menuItemComponent.js","dependencies":[{"path":"/Users/pavijayv/Documents/cisco-ready-qualification/node_modules/ag-grid-enterprise/dist/lib/menu/menuItemComponent.js","mtime":1523957359000},{"path":"/Users/pavijayv/Documents/cisco-ready-qualification/node_modules/cache-loader/dist/cjs.js","mtime":1525383502481},{"path":"/Users/pavijayv/Documents/cisco-ready-qualification/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["// ag-grid-enterprise v17.1.1\n\"use strict\";\nvar __extends = /*@__PURE__*/ require(\"tslib\").__extends;\nvar __decorate = /*@__PURE__*/ require(\"tslib\").__decorate;\nvar __metadata = /*@__PURE__*/ require(\"tslib\").__metadata;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar ag_grid_1 = require(\"ag-grid\");\nvar MenuItemComponent = /*@__PURE__*/ (function (_super) {\n    __extends(MenuItemComponent, _super);\n    function MenuItemComponent(params) {\n        var _this = _super.call(this, MenuItemComponent.TEMPLATE) || this;\n        _this.params = params;\n        return _this;\n    }\n    MenuItemComponent.prototype.init = function () {\n        var _this = this;\n        if (this.params.checked) {\n            this.queryForHtmlElement('#eIcon').innerHTML = '<span class=\"ag-icon ag-icon-tick\"></span>';\n        }\n        else if (this.params.icon) {\n            if (ag_grid_1.Utils.isNodeOrElement(this.params.icon)) {\n                this.queryForHtmlElement('#eIcon').appendChild(this.params.icon);\n            }\n            else if (typeof this.params.icon === 'string') {\n                this.queryForHtmlElement('#eIcon').innerHTML = this.params.icon;\n            }\n            else {\n                console.log('ag-Grid: menu item icon must be DOM node or string');\n            }\n        }\n        else {\n            // if i didn't put space here, the alignment was messed up, probably\n            // fixable with CSS but i was spending to much time trying to figure\n            // it out.\n            this.queryForHtmlElement('#eIcon').innerHTML = '&nbsp;';\n        }\n        if (this.params.tooltip) {\n            this.getGui().setAttribute('title', this.params.tooltip);\n        }\n        if (this.params.shortcut) {\n            this.queryForHtmlElement('#eShortcut').innerHTML = this.params.shortcut;\n        }\n        if (this.params.subMenu) {\n            if (this.gridOptionsWrapper.isEnableRtl()) {\n                // for RTL, we show arrow going left\n                this.queryForHtmlElement('#ePopupPointer').classList.add('ag-icon-small-left');\n            }\n            else {\n                // for normal, we show arrow going right\n                this.queryForHtmlElement('#ePopupPointer').classList.add('ag-icon-small-right');\n            }\n        }\n        else {\n            this.queryForHtmlElement('#ePopupPointer').innerHTML = '&nbsp;';\n        }\n        this.queryForHtmlElement('#eName').innerHTML = this.params.name;\n        if (this.params.disabled) {\n            ag_grid_1.Utils.addCssClass(this.getGui(), 'ag-menu-option-disabled');\n        }\n        else {\n            this.addGuiEventListener('click', this.onOptionSelected.bind(this));\n        }\n        if (this.params.cssClasses) {\n            this.params.cssClasses.forEach(function (it) { return ag_grid_1.Utils.addCssClass(_this.getGui(), it); });\n        }\n    };\n    MenuItemComponent.prototype.onOptionSelected = function (mouseEvent) {\n        var event = {\n            type: MenuItemComponent.EVENT_ITEM_SELECTED,\n            action: this.params.action,\n            checked: this.params.checked,\n            cssClasses: this.params.cssClasses,\n            disabled: this.params.disabled,\n            icon: this.params.icon,\n            name: this.params.name,\n            shortcut: this.params.shortcut,\n            subMenu: this.params.subMenu,\n            tooltip: this.params.tooltip,\n            mouseEvent: mouseEvent\n        };\n        this.dispatchEvent(event);\n        if (this.params.action) {\n            this.params.action();\n        }\n    };\n    MenuItemComponent.prototype.destroy = function () {\n        // console.log('MenuItemComponent->destroy() ' + this.instance);\n        _super.prototype.destroy.call(this);\n    };\n    // private instance = Math.random();\n    MenuItemComponent.TEMPLATE = '<div class=\"ag-menu-option\">' +\n        '  <span id=\"eIcon\" class=\"ag-menu-option-icon\"></span>' +\n        '  <span id=\"eName\" class=\"ag-menu-option-text\"></span>' +\n        '  <span id=\"eShortcut\" class=\"ag-menu-option-shortcut\"></span>' +\n        '  <span id=\"ePopupPointer\" class=\"ag-menu-option-popup-pointer\"></span>' +\n        '</div>';\n    MenuItemComponent.EVENT_ITEM_SELECTED = 'itemSelected';\n    __decorate([\n        ag_grid_1.Autowired('gridOptionsWrapper'),\n        __metadata(\"design:type\", ag_grid_1.GridOptionsWrapper)\n    ], MenuItemComponent.prototype, \"gridOptionsWrapper\", void 0);\n    __decorate([\n        ag_grid_1.PostConstruct,\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", []),\n        __metadata(\"design:returntype\", void 0)\n    ], MenuItemComponent.prototype, \"init\", null);\n    return MenuItemComponent;\n}(ag_grid_1.Component));\nexports.MenuItemComponent = MenuItemComponent;\n",null]}