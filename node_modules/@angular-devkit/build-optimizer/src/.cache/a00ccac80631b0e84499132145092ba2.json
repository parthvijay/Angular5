{"remainingRequest":"/Users/pavijayv/Documents/cisco-ready-qualification/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/Users/pavijayv/Documents/cisco-ready-qualification/node_modules/ag-grid-enterprise/dist/lib/toolPanel/columnDrop/rowGroupColumnsPanel.js","dependencies":[{"path":"/Users/pavijayv/Documents/cisco-ready-qualification/node_modules/ag-grid-enterprise/dist/lib/toolPanel/columnDrop/rowGroupColumnsPanel.js","mtime":1523957359000},{"path":"/Users/pavijayv/Documents/cisco-ready-qualification/node_modules/cache-loader/dist/cjs.js","mtime":1525383502481},{"path":"/Users/pavijayv/Documents/cisco-ready-qualification/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["// ag-grid-enterprise v17.1.1\n\"use strict\";\nvar __extends = /*@__PURE__*/ require(\"tslib\").__extends;\nvar __decorate = /*@__PURE__*/ require(\"tslib\").__decorate;\nvar __metadata = /*@__PURE__*/ require(\"tslib\").__metadata;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar main_1 = require(\"ag-grid/main\");\nvar abstractColumnDropPanel_1 = require(\"./abstractColumnDropPanel\");\nvar RowGroupColumnsPanel = /*@__PURE__*/ (function (_super) {\n    __extends(RowGroupColumnsPanel, _super);\n    function RowGroupColumnsPanel(horizontal) {\n        return _super.call(this, horizontal, false, 'row-group') || this;\n    }\n    RowGroupColumnsPanel.prototype.passBeansUp = function () {\n        _super.prototype.setBeans.call(this, {\n            gridOptionsWrapper: this.gridOptionsWrapper,\n            eventService: this.eventService,\n            context: this.context,\n            loggerFactory: this.loggerFactory,\n            dragAndDropService: this.dragAndDropService\n        });\n        var localeTextFunc = this.gridOptionsWrapper.getLocaleTextFunc();\n        var emptyMessage = localeTextFunc('rowGroupColumnsEmptyMessage', 'Drag here to set row groups');\n        var title = localeTextFunc('groups', 'Row Groups');\n        _super.prototype.init.call(this, {\n            dragAndDropIcon: main_1.DragAndDropService.ICON_GROUP,\n            icon: main_1.Utils.createIconNoSpan('rowGroupPanel', this.gridOptionsWrapper, null),\n            emptyMessage: emptyMessage,\n            title: title\n        });\n        this.addDestroyableEventListener(this.eventService, main_1.Events.EVENT_COLUMN_ROW_GROUP_CHANGED, this.refreshGui.bind(this));\n    };\n    RowGroupColumnsPanel.prototype.isColumnDroppable = function (column) {\n        if (this.gridOptionsWrapper.isFunctionsReadOnly()) {\n            return false;\n        }\n        // we never allow grouping of secondary columns\n        if (!column.isPrimary()) {\n            return false;\n        }\n        var columnGroupable = column.isAllowRowGroup();\n        var columnNotAlreadyGrouped = !column.isRowGroupActive();\n        return columnGroupable && columnNotAlreadyGrouped;\n    };\n    RowGroupColumnsPanel.prototype.updateColumns = function (columns) {\n        if (this.gridOptionsWrapper.isFunctionsPassive()) {\n            var event_1 = {\n                type: main_1.Events.EVENT_COLUMN_ROW_GROUP_CHANGE_REQUEST,\n                columns: columns,\n                api: this.gridApi,\n                columnApi: this.columnApi\n            };\n            this.eventService.dispatchEvent(event_1);\n        }\n        else {\n            this.columnController.setRowGroupColumns(columns, \"toolPanelUi\");\n        }\n    };\n    RowGroupColumnsPanel.prototype.getIconName = function () {\n        return this.isPotentialDndColumns() ? main_1.DragAndDropService.ICON_GROUP : main_1.DragAndDropService.ICON_NOT_ALLOWED;\n    };\n    RowGroupColumnsPanel.prototype.getExistingColumns = function () {\n        return this.columnController.getRowGroupColumns();\n    };\n    __decorate([\n        main_1.Autowired('columnController'),\n        __metadata(\"design:type\", main_1.ColumnController)\n    ], RowGroupColumnsPanel.prototype, \"columnController\", void 0);\n    __decorate([\n        main_1.Autowired('eventService'),\n        __metadata(\"design:type\", main_1.EventService)\n    ], RowGroupColumnsPanel.prototype, \"eventService\", void 0);\n    __decorate([\n        main_1.Autowired('gridOptionsWrapper'),\n        __metadata(\"design:type\", main_1.GridOptionsWrapper)\n    ], RowGroupColumnsPanel.prototype, \"gridOptionsWrapper\", void 0);\n    __decorate([\n        main_1.Autowired('context'),\n        __metadata(\"design:type\", main_1.Context)\n    ], RowGroupColumnsPanel.prototype, \"context\", void 0);\n    __decorate([\n        main_1.Autowired('loggerFactory'),\n        __metadata(\"design:type\", main_1.LoggerFactory)\n    ], RowGroupColumnsPanel.prototype, \"loggerFactory\", void 0);\n    __decorate([\n        main_1.Autowired('dragAndDropService'),\n        __metadata(\"design:type\", main_1.DragAndDropService)\n    ], RowGroupColumnsPanel.prototype, \"dragAndDropService\", void 0);\n    __decorate([\n        main_1.Autowired('columnApi'),\n        __metadata(\"design:type\", main_1.ColumnApi)\n    ], RowGroupColumnsPanel.prototype, \"columnApi\", void 0);\n    __decorate([\n        main_1.Autowired('gridApi'),\n        __metadata(\"design:type\", main_1.GridApi)\n    ], RowGroupColumnsPanel.prototype, \"gridApi\", void 0);\n    __decorate([\n        main_1.PostConstruct,\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", []),\n        __metadata(\"design:returntype\", void 0)\n    ], RowGroupColumnsPanel.prototype, \"passBeansUp\", null);\n    return RowGroupColumnsPanel;\n}(abstractColumnDropPanel_1.AbstractColumnDropPanel));\nexports.RowGroupColumnsPanel = RowGroupColumnsPanel;\n",null]}