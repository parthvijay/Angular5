{"remainingRequest":"/Users/pavijayv/Documents/cisco-ready-qualification/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/Users/pavijayv/Documents/cisco-ready-qualification/node_modules/ag-grid-enterprise/dist/lib/toolPanel/columnDrop/abstractColumnDropPanel.js","dependencies":[{"path":"/Users/pavijayv/Documents/cisco-ready-qualification/node_modules/ag-grid-enterprise/dist/lib/toolPanel/columnDrop/abstractColumnDropPanel.js","mtime":1523957359000},{"path":"/Users/pavijayv/Documents/cisco-ready-qualification/node_modules/cache-loader/dist/cjs.js","mtime":1525383502481},{"path":"/Users/pavijayv/Documents/cisco-ready-qualification/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["// ag-grid-enterprise v17.1.1\n\"use strict\";\nvar __extends = /*@__PURE__*/ require(\"tslib\").__extends;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar main_1 = require(\"ag-grid/main\");\nvar columnComponent_1 = require(\"./columnComponent\");\nvar AbstractColumnDropPanel = /*@__PURE__*/ (function (_super) {\n    __extends(AbstractColumnDropPanel, _super);\n    function AbstractColumnDropPanel(horizontal, valueColumn, name) {\n        var _this = _super.call(this, \"<div class=\\\"ag-column-drop ag-font-style ag-column-drop-\" + (horizontal ? 'horizontal' : 'vertical') + \" ag-column-drop-\" + name + \"\\\"></div>\") || this;\n        _this.state = AbstractColumnDropPanel.STATE_NOT_DRAGGING;\n        _this.guiDestroyFunctions = [];\n        _this.childColumnComponents = [];\n        _this.horizontal = horizontal;\n        _this.valueColumn = valueColumn;\n        return _this;\n    }\n    AbstractColumnDropPanel.prototype.isHorizontal = function () {\n        return this.horizontal;\n    };\n    AbstractColumnDropPanel.prototype.setBeans = function (beans) {\n        this.beans = beans;\n    };\n    AbstractColumnDropPanel.prototype.destroy = function () {\n        this.destroyGui();\n        _super.prototype.destroy.call(this);\n    };\n    AbstractColumnDropPanel.prototype.destroyGui = function () {\n        this.guiDestroyFunctions.forEach(function (func) { return func(); });\n        this.guiDestroyFunctions.length = 0;\n        this.childColumnComponents.length = 0;\n        main_1.Utils.removeAllChildren(this.getGui());\n    };\n    AbstractColumnDropPanel.prototype.init = function (params) {\n        this.params = params;\n        this.logger = this.beans.loggerFactory.create('AbstractColumnDropPanel');\n        this.beans.eventService.addEventListener(main_1.Events.EVENT_COLUMN_EVERYTHING_CHANGED, this.refreshGui.bind(this));\n        this.addDestroyableEventListener(this.beans.gridOptionsWrapper, 'functionsReadOnly', this.refreshGui.bind(this));\n        this.setupDropTarget();\n        // we don't know if this bean will be initialised before columnController.\n        // if columnController first, then below will work\n        // if columnController second, then below will put blank in, and then above event gets first when columnController is set up\n        this.refreshGui();\n    };\n    AbstractColumnDropPanel.prototype.setupDropTarget = function () {\n        this.dropTarget = {\n            getContainer: this.getGui.bind(this),\n            getIconName: this.getIconName.bind(this),\n            onDragging: this.onDragging.bind(this),\n            onDragEnter: this.onDragEnter.bind(this),\n            onDragLeave: this.onDragLeave.bind(this),\n            onDragStop: this.onDragStop.bind(this),\n            isInterestedIn: this.isInterestedIn.bind(this)\n        };\n        this.beans.dragAndDropService.addDropTarget(this.dropTarget);\n    };\n    AbstractColumnDropPanel.prototype.isInterestedIn = function (type) {\n        // not interested in row drags\n        return type === main_1.DragSourceType.HeaderCell || type === main_1.DragSourceType.ToolPanel;\n    };\n    AbstractColumnDropPanel.prototype.checkInsertIndex = function (draggingEvent) {\n        var newIndex;\n        if (this.horizontal) {\n            newIndex = this.getNewHorizontalInsertIndex(draggingEvent);\n        }\n        else {\n            newIndex = this.getNewVerticalInsertIndex(draggingEvent);\n        }\n        // <0 happens when drag is no a direction we are interested in, eg drag is up/down but in horizontal panel\n        if (newIndex < 0) {\n            return false;\n        }\n        var changed = newIndex !== this.insertIndex;\n        if (changed) {\n            this.insertIndex = newIndex;\n        }\n        return changed;\n    };\n    AbstractColumnDropPanel.prototype.getNewHorizontalInsertIndex = function (draggingEvent) {\n        if (main_1.Utils.missing(draggingEvent.hDirection)) {\n            return -1;\n        }\n        var newIndex = 0;\n        var mouseEvent = draggingEvent.event;\n        var enableRtl = this.beans.gridOptionsWrapper.isEnableRtl();\n        var goingLeft = draggingEvent.hDirection === main_1.HDirection.Left;\n        var mouseX = mouseEvent.clientX;\n        this.childColumnComponents.forEach(function (childColumn) {\n            var rect = childColumn.getGui().getBoundingClientRect();\n            var rectX = goingLeft ? rect.right : rect.left;\n            var horizontalFit = enableRtl ? (mouseX <= rectX) : (mouseX >= rectX);\n            if (horizontalFit) {\n                newIndex++;\n            }\n        });\n        return newIndex;\n    };\n    AbstractColumnDropPanel.prototype.getNewVerticalInsertIndex = function (draggingEvent) {\n        if (main_1.Utils.missing(draggingEvent.vDirection)) {\n            return -1;\n        }\n        var newIndex = 0;\n        var mouseEvent = draggingEvent.event;\n        this.childColumnComponents.forEach(function (childColumn) {\n            var rect = childColumn.getGui().getBoundingClientRect();\n            if (draggingEvent.vDirection === main_1.VDirection.Down) {\n                var verticalFit = mouseEvent.clientY >= rect.top;\n                if (verticalFit) {\n                    newIndex++;\n                }\n            }\n            else {\n                var verticalFit = mouseEvent.clientY >= rect.bottom;\n                if (verticalFit) {\n                    newIndex++;\n                }\n            }\n        });\n        return newIndex;\n    };\n    AbstractColumnDropPanel.prototype.checkDragStartedBySelf = function (draggingEvent) {\n        if (this.state !== AbstractColumnDropPanel.STATE_NOT_DRAGGING) {\n            return;\n        }\n        this.state = AbstractColumnDropPanel.STATE_REARRANGE_COLUMNS;\n        this.potentialDndColumns = draggingEvent.dragSource.dragItemCallback().columns;\n        this.refreshGui();\n        this.checkInsertIndex(draggingEvent);\n        this.refreshGui();\n    };\n    AbstractColumnDropPanel.prototype.onDragging = function (draggingEvent) {\n        this.checkDragStartedBySelf(draggingEvent);\n        var positionChanged = this.checkInsertIndex(draggingEvent);\n        if (positionChanged) {\n            this.refreshGui();\n        }\n    };\n    AbstractColumnDropPanel.prototype.onDragEnter = function (draggingEvent) {\n        // this will contain all columns that are potential drops\n        var dragColumns = draggingEvent.dragSource.dragItemCallback().columns;\n        this.state = AbstractColumnDropPanel.STATE_NEW_COLUMNS_IN;\n        // take out columns that are not groupable\n        var goodDragColumns = main_1.Utils.filter(dragColumns, this.isColumnDroppable.bind(this));\n        var weHaveColumnsToDrag = goodDragColumns.length > 0;\n        if (weHaveColumnsToDrag) {\n            this.potentialDndColumns = goodDragColumns;\n            this.checkInsertIndex(draggingEvent);\n            this.refreshGui();\n        }\n    };\n    AbstractColumnDropPanel.prototype.isPotentialDndColumns = function () {\n        return main_1.Utils.existsAndNotEmpty(this.potentialDndColumns);\n    };\n    AbstractColumnDropPanel.prototype.onDragLeave = function (draggingEvent) {\n        // if the dragging started from us, we remove the group, however if it started\n        // someplace else, then we don't, as it was only 'asking'\n        if (this.state === AbstractColumnDropPanel.STATE_REARRANGE_COLUMNS) {\n            var columns = draggingEvent.dragSource.dragItemCallback().columns;\n            this.removeColumns(columns);\n        }\n        if (this.potentialDndColumns) {\n            this.potentialDndColumns = null;\n            this.refreshGui();\n        }\n        this.state = AbstractColumnDropPanel.STATE_NOT_DRAGGING;\n    };\n    AbstractColumnDropPanel.prototype.onDragStop = function () {\n        if (this.potentialDndColumns) {\n            var success = void 0;\n            if (this.state === AbstractColumnDropPanel.STATE_NEW_COLUMNS_IN) {\n                this.addColumns(this.potentialDndColumns);\n                success = true;\n            }\n            else {\n                success = this.rearrangeColumns(this.potentialDndColumns);\n            }\n            this.potentialDndColumns = null;\n            // if the function is passive, then we don't refresh, as we assume the client application\n            // is going to call setRowGroups / setPivots / setValues at a later point which will then\n            // cause a refresh. this gives a nice gui where the ghost stays until the app has caught\n            // up with the changes.\n            if (this.beans.gridOptionsWrapper.isFunctionsPassive()) {\n                // when functions are passive, we don't refresh,\n                // unless there was no change in the order, then we\n                // do need to refresh to reset the columns\n                if (!success) {\n                    this.refreshGui();\n                }\n            }\n            else {\n                this.refreshGui();\n            }\n        }\n        this.state = AbstractColumnDropPanel.STATE_NOT_DRAGGING;\n    };\n    AbstractColumnDropPanel.prototype.removeColumns = function (columnsToRemove) {\n        var newColumnList = this.getExistingColumns().slice();\n        columnsToRemove.forEach(function (column) { return main_1.Utils.removeFromArray(newColumnList, column); });\n        this.updateColumns(newColumnList);\n    };\n    AbstractColumnDropPanel.prototype.addColumns = function (columnsToAdd) {\n        var newColumnList = this.getExistingColumns().slice();\n        main_1.Utils.insertArrayIntoArray(newColumnList, columnsToAdd, this.insertIndex);\n        this.updateColumns(newColumnList);\n    };\n    AbstractColumnDropPanel.prototype.rearrangeColumns = function (columnsToAdd) {\n        var newColumnList = this.getNonGhostColumns().slice();\n        main_1.Utils.insertArrayIntoArray(newColumnList, columnsToAdd, this.insertIndex);\n        var noChangeDetected = main_1.Utils.shallowCompare(newColumnList, this.getExistingColumns());\n        if (noChangeDetected) {\n            return false;\n        }\n        else {\n            this.updateColumns(newColumnList);\n            return true;\n        }\n    };\n    AbstractColumnDropPanel.prototype.refreshGui = function () {\n        this.destroyGui();\n        this.addIconAndTitleToGui();\n        this.addEmptyMessageToGui();\n        this.addColumnsToGui();\n    };\n    AbstractColumnDropPanel.prototype.getNonGhostColumns = function () {\n        var _this = this;\n        var existingColumns = this.getExistingColumns();\n        var nonGhostColumns;\n        if (main_1.Utils.exists(this.potentialDndColumns)) {\n            nonGhostColumns = main_1.Utils.filter(existingColumns, function (column) { return _this.potentialDndColumns.indexOf(column) < 0; });\n        }\n        else {\n            nonGhostColumns = existingColumns;\n        }\n        return nonGhostColumns;\n    };\n    AbstractColumnDropPanel.prototype.addColumnsToGui = function () {\n        var _this = this;\n        var nonGhostColumns = this.getNonGhostColumns();\n        var itemsToAddToGui = [];\n        var addingGhosts = main_1.Utils.exists(this.potentialDndColumns);\n        nonGhostColumns.forEach(function (column, index) {\n            if (addingGhosts && index >= _this.insertIndex) {\n                return;\n            }\n            var columnComponent = _this.createColumnComponent(column, false);\n            itemsToAddToGui.push(columnComponent);\n        });\n        if (this.potentialDndColumns) {\n            this.potentialDndColumns.forEach(function (column) {\n                var columnComponent = _this.createColumnComponent(column, true);\n                itemsToAddToGui.push(columnComponent);\n            });\n            nonGhostColumns.forEach(function (column, index) {\n                if (index < _this.insertIndex) {\n                    return;\n                }\n                var columnComponent = _this.createColumnComponent(column, false);\n                itemsToAddToGui.push(columnComponent);\n            });\n        }\n        var eContainer = document.createElement('div');\n        main_1._.addCssClass(eContainer, 'ag-column-drop-list');\n        this.getGui().appendChild(eContainer);\n        itemsToAddToGui.forEach(function (columnComponent, index) {\n            var needSeparator = index !== 0;\n            if (needSeparator) {\n                _this.addArrow(eContainer);\n            }\n            eContainer.appendChild(columnComponent.getGui());\n        });\n    };\n    AbstractColumnDropPanel.prototype.createColumnComponent = function (column, ghost) {\n        var columnComponent = new columnComponent_1.ColumnComponent(column, this.dropTarget, ghost, this.valueColumn);\n        columnComponent.addEventListener(columnComponent_1.ColumnComponent.EVENT_COLUMN_REMOVE, this.removeColumns.bind(this, [column]));\n        this.beans.context.wireBean(columnComponent);\n        this.guiDestroyFunctions.push(function () { return columnComponent.destroy(); });\n        if (!ghost) {\n            this.childColumnComponents.push(columnComponent);\n        }\n        return columnComponent;\n    };\n    AbstractColumnDropPanel.prototype.addIconAndTitleToGui = function () {\n        var iconFaded = this.horizontal && this.isExistingColumnsEmpty();\n        var eGroupIcon = this.params.icon;\n        var eContainer = document.createElement('div');\n        main_1.Utils.addCssClass(eGroupIcon, 'ag-column-drop-icon');\n        main_1.Utils.addOrRemoveCssClass(eGroupIcon, 'ag-faded', iconFaded);\n        eContainer.appendChild(eGroupIcon);\n        if (!this.horizontal) {\n            var eTitle = document.createElement('span');\n            eTitle.innerHTML = this.params.title;\n            main_1.Utils.addCssClass(eTitle, 'ag-column-drop-title');\n            main_1.Utils.addOrRemoveCssClass(eTitle, 'ag-faded', iconFaded);\n            eContainer.appendChild(eTitle);\n        }\n        this.getGui().appendChild(eContainer);\n    };\n    AbstractColumnDropPanel.prototype.isExistingColumnsEmpty = function () {\n        return this.getExistingColumns().length === 0;\n    };\n    AbstractColumnDropPanel.prototype.addEmptyMessageToGui = function () {\n        var showEmptyMessage = this.isExistingColumnsEmpty() && !this.potentialDndColumns;\n        if (!showEmptyMessage) {\n            return;\n        }\n        var eMessage = document.createElement('span');\n        eMessage.innerHTML = this.params.emptyMessage;\n        main_1.Utils.addCssClass(eMessage, 'ag-column-drop-empty-message');\n        this.getGui().appendChild(eMessage);\n    };\n    AbstractColumnDropPanel.prototype.addArrow = function (eParent) {\n        // only add the arrows if the layout is horizontal\n        if (this.horizontal) {\n            // for RTL it's a left arrow, otherwise it's a right arrow\n            var enableRtl = this.beans.gridOptionsWrapper.isEnableRtl();\n            var charCode = enableRtl ?\n                AbstractColumnDropPanel.CHAR_LEFT_ARROW : AbstractColumnDropPanel.CHAR_RIGHT_ARROW;\n            var spanClass = enableRtl ? 'ag-left-arrow' : 'ag-right-arrow';\n            var eArrow = document.createElement('span');\n            eArrow.className = spanClass;\n            eArrow.innerHTML = charCode;\n            eParent.appendChild(eArrow);\n        }\n    };\n    AbstractColumnDropPanel.STATE_NOT_DRAGGING = 'notDragging';\n    AbstractColumnDropPanel.STATE_NEW_COLUMNS_IN = 'newColumnsIn';\n    AbstractColumnDropPanel.STATE_REARRANGE_COLUMNS = 'rearrangeColumns';\n    AbstractColumnDropPanel.CHAR_LEFT_ARROW = '&#8592;';\n    AbstractColumnDropPanel.CHAR_RIGHT_ARROW = '&#8594;';\n    return AbstractColumnDropPanel;\n}(main_1.Component));\nexports.AbstractColumnDropPanel = AbstractColumnDropPanel;\n",null]}