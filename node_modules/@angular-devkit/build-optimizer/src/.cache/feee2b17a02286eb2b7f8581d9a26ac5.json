{"remainingRequest":"/Users/pavijayv/Documents/cisco-ready-qualification/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/Users/pavijayv/Documents/cisco-ready-qualification/node_modules/ag-grid-enterprise/dist/lib/rendering/richSelect/richSelectRow.js","dependencies":[{"path":"/Users/pavijayv/Documents/cisco-ready-qualification/node_modules/ag-grid-enterprise/dist/lib/rendering/richSelect/richSelectRow.js","mtime":1523957359000},{"path":"/Users/pavijayv/Documents/cisco-ready-qualification/node_modules/cache-loader/dist/cjs.js","mtime":1525383502481},{"path":"/Users/pavijayv/Documents/cisco-ready-qualification/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["// ag-grid-enterprise v17.1.1\n\"use strict\";\nvar __extends = /*@__PURE__*/ require(\"tslib\").__extends;\nvar __decorate = /*@__PURE__*/ require(\"tslib\").__decorate;\nvar __metadata = /*@__PURE__*/ require(\"tslib\").__metadata;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar main_1 = require(\"ag-grid/main\");\nvar RichSelectRow = /*@__PURE__*/ (function (_super) {\n    __extends(RichSelectRow, _super);\n    function RichSelectRow(columnDef) {\n        var _this = _super.call(this, '<div class=\"ag-rich-select-row\"></div>') || this;\n        _this.columnDef = columnDef;\n        return _this;\n    }\n    RichSelectRow.prototype.setState = function (value, valueFormatted, selected) {\n        var rendererSuccessful = this.populateWithRenderer(value, valueFormatted);\n        if (!rendererSuccessful) {\n            this.populateWithoutRenderer(value, valueFormatted);\n        }\n        main_1.Utils.addOrRemoveCssClass(this.getGui(), 'ag-rich-select-row-selected', selected);\n    };\n    RichSelectRow.prototype.populateWithoutRenderer = function (value, valueFormatted) {\n        var valueFormattedExits = valueFormatted !== null && valueFormatted !== undefined;\n        var valueToRender = valueFormattedExits ? valueFormatted : value;\n        if (main_1.Utils.exists(valueToRender) && valueToRender !== '') {\n            // not using innerHTML to prevent injection of HTML\n            // https://developer.mozilla.org/en-US/docs/Web/API/Element/innerHTML#Security_considerations\n            this.getGui().textContent = valueToRender.toString();\n        }\n        else {\n            // putting in blank, so if missing, at least the user can click on it\n            this.getGui().innerHTML = '&nbsp;';\n        }\n    };\n    RichSelectRow.prototype.populateWithRenderer = function (value, valueFormatted) {\n        var _this = this;\n        var promise = this.cellRendererService.useRichSelectCellRenderer(this.columnDef, this.getGui(), { value: value, valueFormatted: valueFormatted });\n        var foundRenderer = main_1._.exists(promise);\n        if (foundRenderer) {\n            promise.then(function (childComponent) {\n                if (childComponent && childComponent.destroy) {\n                    _this.addDestroyFunc(childComponent.destroy.bind(childComponent));\n                }\n            });\n            return true;\n        }\n        else {\n            return false;\n        }\n    };\n    __decorate([\n        main_1.Autowired('cellRendererService'),\n        __metadata(\"design:type\", main_1.CellRendererService)\n    ], RichSelectRow.prototype, \"cellRendererService\", void 0);\n    return RichSelectRow;\n}(main_1.Component));\nexports.RichSelectRow = RichSelectRow;\n",null]}