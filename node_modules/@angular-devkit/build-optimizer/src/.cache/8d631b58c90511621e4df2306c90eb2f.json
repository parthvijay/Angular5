{"remainingRequest":"/Users/pavijayv/Documents/cisco-ready-qualification/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/Users/pavijayv/Documents/cisco-ready-qualification/node_modules/ag-grid-enterprise/dist/lib/rendering/richSelect/richSelectCellEditor.js","dependencies":[{"path":"/Users/pavijayv/Documents/cisco-ready-qualification/node_modules/ag-grid-enterprise/dist/lib/rendering/richSelect/richSelectCellEditor.js","mtime":1523957359000},{"path":"/Users/pavijayv/Documents/cisco-ready-qualification/node_modules/cache-loader/dist/cjs.js","mtime":1525383502481},{"path":"/Users/pavijayv/Documents/cisco-ready-qualification/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["// ag-grid-enterprise v17.1.1\n\"use strict\";\nvar __extends = /*@__PURE__*/ require(\"tslib\").__extends;\nvar __decorate = /*@__PURE__*/ require(\"tslib\").__decorate;\nvar __metadata = /*@__PURE__*/ require(\"tslib\").__metadata;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar main_1 = require(\"ag-grid/main\");\nvar richSelectRow_1 = require(\"./richSelectRow\");\nvar virtualList_1 = require(\"../virtualList\");\nvar ag_grid_1 = require(\"ag-grid\");\nvar RichSelectCellEditor = /*@__PURE__*/ (function (_super) {\n    __extends(RichSelectCellEditor, _super);\n    function RichSelectCellEditor() {\n        var _this = _super.call(this, RichSelectCellEditor.TEMPLATE) || this;\n        _this.selectionConfirmed = false;\n        return _this;\n    }\n    RichSelectCellEditor.prototype.init = function (params) {\n        this.params = params;\n        this.selectedValue = params.value;\n        this.originalSelectedValue = params.value;\n        this.focusAfterAttached = params.cellStartedEdit;\n        this.virtualList = new virtualList_1.VirtualList();\n        this.context.wireBean(this.virtualList);\n        this.virtualList.setComponentCreator(this.createRowComponent.bind(this));\n        this.getRefElement('eList').appendChild(this.virtualList.getGui());\n        if (main_1.Utils.exists(this.params.cellHeight)) {\n            this.virtualList.setRowHeight(this.params.cellHeight);\n        }\n        this.renderSelectedValue();\n        if (main_1.Utils.missing(params.values)) {\n            console.log('ag-Grid: richSelectCellEditor requires values for it to work');\n            return;\n        }\n        var values = params.values;\n        this.virtualList.setModel({\n            getRowCount: function () { return values.length; },\n            getRow: function (index) { return values[index]; }\n        });\n        this.addGuiEventListener('keydown', this.onKeyDown.bind(this));\n        this.addDestroyableEventListener(this.virtualList.getGui(), 'click', this.onClick.bind(this));\n        this.addDestroyableEventListener(this.virtualList.getGui(), 'mousemove', this.onMouseMove.bind(this));\n    };\n    RichSelectCellEditor.prototype.onKeyDown = function (event) {\n        var key = event.which || event.keyCode;\n        switch (key) {\n            case main_1.Constants.KEY_ENTER:\n                this.onEnterKeyDown();\n                break;\n            case main_1.Constants.KEY_DOWN:\n            case main_1.Constants.KEY_UP:\n                this.onNavigationKeyPressed(event, key);\n                break;\n        }\n    };\n    RichSelectCellEditor.prototype.onEnterKeyDown = function () {\n        this.selectionConfirmed = true;\n        this.params.stopEditing();\n    };\n    RichSelectCellEditor.prototype.onNavigationKeyPressed = function (event, key) {\n        // if we don't stop propagation, then the grids navigation kicks in\n        event.stopPropagation();\n        var oldIndex = this.params.values.indexOf(this.selectedValue);\n        var newIndex = key === main_1.Constants.KEY_UP ? oldIndex - 1 : oldIndex + 1;\n        if (newIndex >= 0 && newIndex < this.params.values.length) {\n            var valueToSelect = this.params.values[newIndex];\n            this.setSelectedValue(valueToSelect);\n        }\n    };\n    RichSelectCellEditor.prototype.renderSelectedValue = function () {\n        var _this = this;\n        var valueFormatted = this.params.formatValue(this.selectedValue);\n        var eValue = this.getRefElement('eValue');\n        var promise = this.cellRendererService.useRichSelectCellRenderer(this.params.column.getColDef(), eValue, { value: this.selectedValue, valueFormatted: valueFormatted });\n        var foundRenderer = ag_grid_1._.exists(promise);\n        if (foundRenderer) {\n            promise.then(function (renderer) {\n                if (renderer && renderer.destroy) {\n                    _this.addDestroyFunc(function () { return renderer.destroy(); });\n                }\n            });\n        }\n        else {\n            if (main_1.Utils.exists(this.selectedValue)) {\n                eValue.innerHTML = valueFormatted;\n            }\n            else {\n                eValue.innerHTML = '';\n            }\n        }\n    };\n    RichSelectCellEditor.prototype.setSelectedValue = function (value) {\n        if (this.selectedValue === value) {\n            return;\n        }\n        var index = this.params.values.indexOf(value);\n        if (index >= 0) {\n            this.selectedValue = value;\n            this.virtualList.ensureIndexVisible(index);\n            this.virtualList.refresh();\n        }\n    };\n    RichSelectCellEditor.prototype.createRowComponent = function (value) {\n        var valueFormatted = this.params.formatValue(value);\n        var row = new richSelectRow_1.RichSelectRow(this.params.column.getColDef());\n        this.context.wireBean(row);\n        row.setState(value, valueFormatted, value === this.selectedValue);\n        return row;\n    };\n    RichSelectCellEditor.prototype.onMouseMove = function (mouseEvent) {\n        var rect = this.virtualList.getGui().getBoundingClientRect();\n        var scrollTop = this.virtualList.getScrollTop();\n        var mouseY = mouseEvent.clientY - rect.top + scrollTop;\n        var row = Math.floor(mouseY / this.virtualList.getRowHeight());\n        var value = this.params.values[row];\n        // not using utils.exist() as want empty string test to pass\n        if (value !== undefined) {\n            this.setSelectedValue(value);\n        }\n    };\n    RichSelectCellEditor.prototype.onClick = function () {\n        this.selectionConfirmed = true;\n        this.params.stopEditing();\n    };\n    // we need to have the gui attached before we can draw the virtual rows, as the\n    // virtual row logic needs info about the gui state\n    RichSelectCellEditor.prototype.afterGuiAttached = function () {\n        var selectedIndex = this.params.values.indexOf(this.selectedValue);\n        // we have to call this here to get the list to have the right height, ie\n        // otherwise it would not have scrolls yet and ensureIndeVisible would do nothing\n        this.virtualList.refresh();\n        if (selectedIndex >= 0) {\n            this.virtualList.ensureIndexVisible(selectedIndex);\n        }\n        // we call refresh again, as the list could of moved, and we need to render the new rows\n        this.virtualList.refresh();\n        if (this.focusAfterAttached) {\n            this.getGui().focus();\n        }\n    };\n    RichSelectCellEditor.prototype.getValue = function () {\n        if (this.selectionConfirmed) {\n            return this.selectedValue;\n        }\n        else {\n            return this.originalSelectedValue;\n        }\n    };\n    RichSelectCellEditor.prototype.isPopup = function () {\n        return true;\n    };\n    RichSelectCellEditor.TEMPLATE =\n        // tab index is needed so we can focus, which is needed for keyboard events\n        '<div class=\"ag-rich-select\" tabindex=\"0\">' +\n            '<div ref=\"eValue\" class=\"ag-rich-select-value\"></div>' +\n            '<div ref=\"eList\" class=\"ag-rich-select-list\"></div>' +\n            '</div>';\n    __decorate([\n        main_1.Autowired('context'),\n        __metadata(\"design:type\", main_1.Context)\n    ], RichSelectCellEditor.prototype, \"context\", void 0);\n    __decorate([\n        main_1.Autowired('cellRendererService'),\n        __metadata(\"design:type\", main_1.CellRendererService)\n    ], RichSelectCellEditor.prototype, \"cellRendererService\", void 0);\n    return RichSelectCellEditor;\n}(main_1.Component));\nexports.RichSelectCellEditor = RichSelectCellEditor;\n",null]}