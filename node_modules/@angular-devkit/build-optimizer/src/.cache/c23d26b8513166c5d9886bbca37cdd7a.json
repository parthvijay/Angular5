{"remainingRequest":"/Users/pavijayv/Documents/cisco-ready-qualification/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/Users/pavijayv/Documents/cisco-ready-qualification/node_modules/ag-grid-enterprise/dist/lib/excelCreator.js","dependencies":[{"path":"/Users/pavijayv/Documents/cisco-ready-qualification/node_modules/ag-grid-enterprise/dist/lib/excelCreator.js","mtime":1523957359000},{"path":"/Users/pavijayv/Documents/cisco-ready-qualification/node_modules/cache-loader/dist/cjs.js","mtime":1525383502481},{"path":"/Users/pavijayv/Documents/cisco-ready-qualification/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["// ag-grid-enterprise v17.1.1\n\"use strict\";\nvar __extends = /*@__PURE__*/ require(\"tslib\").__extends;\nvar __decorate = /*@__PURE__*/ require(\"tslib\").__decorate;\nvar __metadata = /*@__PURE__*/ require(\"tslib\").__metadata;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar main_1 = require(\"ag-grid/main\");\nvar excelXmlFactory_1 = require(\"./excelXmlFactory\");\nvar ExcelGridSerializingSession = /*@__PURE__*/ (function (_super) {\n    __extends(ExcelGridSerializingSession, _super);\n    function ExcelGridSerializingSession(columnController, valueService, gridOptionsWrapper, processCellCallback, processHeaderCallback, sheetName, excelXmlFactory, baseExcelStyles, styleLinker, suppressTextAsCDATA) {\n        var _this = _super.call(this, columnController, valueService, gridOptionsWrapper, processCellCallback, processHeaderCallback, function (raw) { return raw; }) || this;\n        _this.excelXmlFactory = excelXmlFactory;\n        _this.styleLinker = styleLinker;\n        _this.mixedStyles = {};\n        _this.mixedStyleCounter = 0;\n        _this.rows = [];\n        _this.stylesByIds = {};\n        if (!baseExcelStyles) {\n            _this.excelStyles = [];\n        }\n        else {\n            baseExcelStyles.forEach(function (it) {\n                _this.stylesByIds[it.id] = it;\n            });\n            _this.excelStyles = baseExcelStyles.slice();\n        }\n        _this.sheetName = sheetName;\n        _this.suppressTextAsCDATA = suppressTextAsCDATA;\n        return _this;\n    }\n    ExcelGridSerializingSession.prototype.addCustomHeader = function (customHeader) {\n        this.customHeader = customHeader;\n    };\n    ExcelGridSerializingSession.prototype.addCustomFooter = function (customFooter) {\n        this.customFooter = customFooter;\n    };\n    ExcelGridSerializingSession.prototype.prepare = function (columnsToExport) {\n        this.cols = main_1.Utils.map(columnsToExport, function (it) {\n            it.getColDef().cellStyle;\n            return {\n                width: it.getActualWidth()\n            };\n        });\n    };\n    ExcelGridSerializingSession.prototype.onNewHeaderGroupingRow = function () {\n        var currentCells = [];\n        var that = this;\n        this.rows.push({\n            cells: currentCells\n        });\n        return {\n            onColumn: function (header, index, span) {\n                var styleIds = that.styleLinker(main_1.RowType.HEADER_GROUPING, 1, index, \"grouping-\" + header, null, null);\n                currentCells.push(that.createMergedCell(styleIds.length > 0 ? styleIds[0] : null, \"String\", header, span));\n            }\n        };\n    };\n    ExcelGridSerializingSession.prototype.onNewHeaderRow = function () {\n        return this.onNewRow(this.onNewHeaderColumn);\n    };\n    ExcelGridSerializingSession.prototype.onNewBodyRow = function () {\n        return this.onNewRow(this.onNewBodyColumn);\n    };\n    ExcelGridSerializingSession.prototype.onNewRow = function (onNewColumnAccumulator) {\n        var currentCells = [];\n        this.rows.push({\n            cells: currentCells\n        });\n        return {\n            onColumn: onNewColumnAccumulator.bind(this, this.rows.length, currentCells)()\n        };\n    };\n    ExcelGridSerializingSession.prototype.onNewHeaderColumn = function (rowIndex, currentCells) {\n        var _this = this;\n        var that = this;\n        return function (column, index, node) {\n            var nameForCol = _this.extractHeaderValue(column);\n            var styleIds = that.styleLinker(main_1.RowType.HEADER, rowIndex, index, nameForCol, column, null);\n            currentCells.push(_this.createCell(styleIds.length > 0 ? styleIds[0] : null, 'String', nameForCol));\n        };\n    };\n    ExcelGridSerializingSession.prototype.parse = function () {\n        function join(header, body, footer) {\n            var all = [];\n            if (header) {\n                header.forEach(function (rowArray) { return all.push({ cells: rowArray }); });\n            }\n            body.forEach(function (it) { return all.push(it); });\n            if (footer) {\n                footer.forEach(function (rowArray) { return all.push({ cells: rowArray }); });\n            }\n            return all;\n        }\n        var data = [{\n                name: this.sheetName,\n                table: {\n                    columns: this.cols,\n                    rows: join(this.customHeader, this.rows, this.customFooter)\n                }\n            }];\n        return this.excelXmlFactory.createExcelXml(this.excelStyles, data);\n    };\n    ExcelGridSerializingSession.prototype.onNewBodyColumn = function (rowIndex, currentCells) {\n        var _this = this;\n        var that = this;\n        return function (column, index, node) {\n            var valueForCell = _this.extractRowCellValue(column, index, main_1.Constants.EXPORT_TYPE_EXCEL, node);\n            var styleIds = that.styleLinker(main_1.RowType.BODY, rowIndex, index, valueForCell, column, node);\n            var excelStyleId = null;\n            if (styleIds && styleIds.length == 1) {\n                excelStyleId = styleIds[0];\n            }\n            else if (styleIds && styleIds.length > 1) {\n                var key = styleIds.join(\"-\");\n                if (!_this.mixedStyles[key]) {\n                    _this.addNewMixedStyle(styleIds);\n                }\n                excelStyleId = _this.mixedStyles[key].excelID;\n            }\n            var type = main_1.Utils.isNumeric(valueForCell) ? 'Number' : 'String';\n            currentCells.push(that.createCell(excelStyleId, type, valueForCell));\n        };\n    };\n    ExcelGridSerializingSession.prototype.addNewMixedStyle = function (styleIds) {\n        var _this = this;\n        this.mixedStyleCounter += 1;\n        var excelId = 'mixedStyle' + this.mixedStyleCounter;\n        var resultantStyle = {};\n        styleIds.forEach(function (styleId) {\n            _this.excelStyles.forEach(function (excelStyle) {\n                if (excelStyle.id === styleId) {\n                    main_1.Utils.mergeDeep(resultantStyle, excelStyle);\n                }\n            });\n        });\n        resultantStyle['id'] = excelId;\n        resultantStyle['name'] = excelId;\n        var key = styleIds.join(\"-\");\n        this.mixedStyles[key] = {\n            excelID: excelId,\n            key: key,\n            result: resultantStyle\n        };\n        this.excelStyles.push(resultantStyle);\n        this.stylesByIds[excelId] = resultantStyle;\n    };\n    ExcelGridSerializingSession.prototype.styleExists = function (styleId) {\n        if (styleId == null)\n            return false;\n        return this.stylesByIds[styleId];\n    };\n    ExcelGridSerializingSession.prototype.createCell = function (styleId, type, value) {\n        var _this = this;\n        var actualStyle = this.stylesByIds[styleId];\n        var styleExists = actualStyle != null;\n        function getType() {\n            if (styleExists &&\n                actualStyle.dataType)\n                switch (actualStyle.dataType) {\n                    case 'string':\n                        return 'String';\n                    case 'number':\n                        return 'Number';\n                    case 'dateTime':\n                        return 'DateTime';\n                    case 'error':\n                        return 'Error';\n                    case 'boolean':\n                        return 'Boolean';\n                    default:\n                        console.warn(\"ag-grid: Unrecognized data type for excel export [\" + actualStyle.id + \".dataType=\" + actualStyle.dataType + \"]\");\n                }\n            return type;\n        }\n        var typeTransformed = getType();\n        var massageText = function (value) {\n            return _this.suppressTextAsCDATA ?\n                main_1._.escape(value) :\n                \"<![CDATA[\" + value + \"]]>\";\n        };\n        return {\n            styleId: styleExists ? styleId : null,\n            data: {\n                type: typeTransformed,\n                value: typeTransformed === 'String' ? massageText(value) :\n                    typeTransformed === 'Number' ? Number(value).valueOf() + '' :\n                        value\n            }\n        };\n    };\n    ExcelGridSerializingSession.prototype.createMergedCell = function (styleId, type, value, numOfCells) {\n        return {\n            styleId: this.styleExists(styleId) ? styleId : null,\n            data: {\n                type: type,\n                value: value\n            },\n            mergeAcross: numOfCells\n        };\n    };\n    return ExcelGridSerializingSession;\n}(main_1.BaseGridSerializingSession));\nexports.ExcelGridSerializingSession = ExcelGridSerializingSession;\nvar ExcelCreator = /*@__PURE__*/ (function (_super) {\n    __extends(ExcelCreator, _super);\n    function ExcelCreator() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    ExcelCreator.prototype.postConstruct = function () {\n        this.setBeans({\n            downloader: this.downloader,\n            gridSerializer: this.gridSerializer,\n            gridOptionsWrapper: this.gridOptionsWrapper\n        });\n    };\n    ExcelCreator.prototype.exportDataAsExcel = function (params) {\n        return this.export(params);\n    };\n    ExcelCreator.prototype.getDataAsExcelXml = function (params) {\n        return this.getData(params);\n    };\n    ExcelCreator.prototype.getMimeType = function () {\n        return \"application/vnd.ms-excel\";\n    };\n    ExcelCreator.prototype.getDefaultFileName = function () {\n        return 'export.xls';\n    };\n    ExcelCreator.prototype.getDefaultFileExtension = function () {\n        return 'xls';\n    };\n    ExcelCreator.prototype.createSerializingSession = function (params) {\n        return new ExcelGridSerializingSession(this.columnController, this.valueService, this.gridOptionsWrapper, params ? params.processCellCallback : null, params ? params.processHeaderCallback : null, params && params.sheetName != null && params.sheetName != \"\" ? params.sheetName : 'ag-grid', this.excelXmlFactory, this.gridOptions.excelStyles, this.styleLinker.bind(this), params && params.suppressTextAsCDATA ? params.suppressTextAsCDATA : false);\n    };\n    ExcelCreator.prototype.styleLinker = function (rowType, rowIndex, colIndex, value, column, node) {\n        if ((rowType === main_1.RowType.HEADER) || (rowType === main_1.RowType.HEADER_GROUPING))\n            return [\"header\"];\n        if (!this.gridOptions.excelStyles || this.gridOptions.excelStyles.length === 0)\n            return null;\n        var styleIds = this.gridOptions.excelStyles.map(function (it) {\n            return it.id;\n        });\n        var applicableStyles = [];\n        this.stylingService.processAllCellClasses(column.getColDef(), {\n            value: value,\n            data: node.data,\n            node: node,\n            colDef: column.getColDef(),\n            rowIndex: rowIndex,\n            api: this.gridOptionsWrapper.getApi(),\n            context: this.gridOptionsWrapper.getContext()\n        }, function (className) {\n            if (styleIds.indexOf(className) > -1) {\n                applicableStyles.push(className);\n            }\n        });\n        return applicableStyles.sort(function (left, right) {\n            return (styleIds.indexOf(left) < styleIds.indexOf(right)) ? -1 : 1;\n        });\n    };\n    ExcelCreator.prototype.isExportSuppressed = function () {\n        return this.gridOptionsWrapper.isSuppressExcelExport();\n    };\n    __decorate([\n        main_1.Autowired('excelXmlFactory'),\n        __metadata(\"design:type\", excelXmlFactory_1.ExcelXmlFactory)\n    ], ExcelCreator.prototype, \"excelXmlFactory\", void 0);\n    __decorate([\n        main_1.Autowired('columnController'),\n        __metadata(\"design:type\", main_1.ColumnController)\n    ], ExcelCreator.prototype, \"columnController\", void 0);\n    __decorate([\n        main_1.Autowired('valueService'),\n        __metadata(\"design:type\", main_1.ValueService)\n    ], ExcelCreator.prototype, \"valueService\", void 0);\n    __decorate([\n        main_1.Autowired('gridOptions'),\n        __metadata(\"design:type\", Object)\n    ], ExcelCreator.prototype, \"gridOptions\", void 0);\n    __decorate([\n        main_1.Autowired('stylingService'),\n        __metadata(\"design:type\", main_1.StylingService)\n    ], ExcelCreator.prototype, \"stylingService\", void 0);\n    __decorate([\n        main_1.Autowired('downloader'),\n        __metadata(\"design:type\", main_1.Downloader)\n    ], ExcelCreator.prototype, \"downloader\", void 0);\n    __decorate([\n        main_1.Autowired('gridSerializer'),\n        __metadata(\"design:type\", main_1.GridSerializer)\n    ], ExcelCreator.prototype, \"gridSerializer\", void 0);\n    __decorate([\n        main_1.Autowired('gridOptionsWrapper'),\n        __metadata(\"design:type\", main_1.GridOptionsWrapper)\n    ], ExcelCreator.prototype, \"gridOptionsWrapper\", void 0);\n    __decorate([\n        main_1.PostConstruct,\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", []),\n        __metadata(\"design:returntype\", void 0)\n    ], ExcelCreator.prototype, \"postConstruct\", null);\n    ExcelCreator = __decorate([\n        main_1.Bean('excelCreator')\n    ], ExcelCreator);\n    return ExcelCreator;\n}(main_1.BaseCreator));\nexports.ExcelCreator = ExcelCreator;\n",null]}