{"remainingRequest":"/Users/pavijayv/Documents/cisco-ready-qualification/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/Users/pavijayv/Documents/cisco-ready-qualification/node_modules/ag-grid-enterprise/dist/lib/toolPanel/columnDrop/pivotColumnsPanel.js","dependencies":[{"path":"/Users/pavijayv/Documents/cisco-ready-qualification/node_modules/ag-grid-enterprise/dist/lib/toolPanel/columnDrop/pivotColumnsPanel.js","mtime":1523957359000},{"path":"/Users/pavijayv/Documents/cisco-ready-qualification/node_modules/cache-loader/dist/cjs.js","mtime":1525383502481},{"path":"/Users/pavijayv/Documents/cisco-ready-qualification/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["// ag-grid-enterprise v17.1.1\n\"use strict\";\nvar __extends = /*@__PURE__*/ require(\"tslib\").__extends;\nvar __decorate = /*@__PURE__*/ require(\"tslib\").__decorate;\nvar __metadata = /*@__PURE__*/ require(\"tslib\").__metadata;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar main_1 = require(\"ag-grid/main\");\nvar abstractColumnDropPanel_1 = require(\"./abstractColumnDropPanel\");\nvar PivotColumnsPanel = /*@__PURE__*/ (function (_super) {\n    __extends(PivotColumnsPanel, _super);\n    function PivotColumnsPanel(horizontal) {\n        return _super.call(this, horizontal, false, 'pivot') || this;\n    }\n    PivotColumnsPanel.prototype.passBeansUp = function () {\n        _super.prototype.setBeans.call(this, {\n            gridOptionsWrapper: this.gridOptionsWrapper,\n            eventService: this.eventService,\n            context: this.context,\n            loggerFactory: this.loggerFactory,\n            dragAndDropService: this.dragAndDropService\n        });\n        var localeTextFunc = this.gridOptionsWrapper.getLocaleTextFunc();\n        var emptyMessage = localeTextFunc('pivotColumnsEmptyMessage', 'Drag here to set column labels');\n        var title = localeTextFunc('pivots', 'Column Labels');\n        _super.prototype.init.call(this, {\n            dragAndDropIcon: main_1.DragAndDropService.ICON_GROUP,\n            icon: main_1.Utils.createIconNoSpan('pivotPanel', this.gridOptionsWrapper, null),\n            emptyMessage: emptyMessage,\n            title: title\n        });\n        this.addDestroyableEventListener(this.eventService, main_1.Events.EVENT_COLUMN_EVERYTHING_CHANGED, this.refresh.bind(this));\n        this.addDestroyableEventListener(this.eventService, main_1.Events.EVENT_COLUMN_PIVOT_CHANGED, this.refresh.bind(this));\n        this.addDestroyableEventListener(this.eventService, main_1.Events.EVENT_COLUMN_PIVOT_MODE_CHANGED, this.checkVisibility.bind(this));\n        this.refresh();\n    };\n    PivotColumnsPanel.prototype.refresh = function () {\n        this.checkVisibility();\n        this.refreshGui();\n    };\n    PivotColumnsPanel.prototype.checkVisibility = function () {\n        var pivotMode = this.columnController.isPivotMode();\n        if (this.isHorizontal()) {\n            // what we do for horizontal (ie the pivot panel at the top) depends\n            // on the user property as well as pivotMode.\n            switch (this.gridOptionsWrapper.getPivotPanelShow()) {\n                case 'always':\n                    this.setVisible(pivotMode);\n                    break;\n                case 'onlyWhenPivoting':\n                    var pivotActive = this.columnController.isPivotActive();\n                    this.setVisible(pivotMode && pivotActive);\n                    break;\n                default:\n                    // never show it\n                    this.setVisible(false);\n                    break;\n            }\n        }\n        else {\n            // in toolPanel, the pivot panel is always shown when pivot mode is on\n            this.setVisible(pivotMode);\n        }\n    };\n    PivotColumnsPanel.prototype.isColumnDroppable = function (column) {\n        if (this.gridOptionsWrapper.isFunctionsReadOnly()) {\n            return false;\n        }\n        // we never allow grouping of secondary columns\n        if (!column.isPrimary()) {\n            return false;\n        }\n        var allowPivot = column.isAllowPivot();\n        var columnNotAlreadyPivoted = !column.isPivotActive();\n        return allowPivot && columnNotAlreadyPivoted;\n    };\n    PivotColumnsPanel.prototype.updateColumns = function (columns) {\n        if (this.gridOptionsWrapper.isFunctionsPassive()) {\n            var event_1 = {\n                type: main_1.Events.EVENT_COLUMN_PIVOT_CHANGE_REQUEST,\n                columns: columns,\n                api: this.gridApi,\n                columnApi: this.columnApi\n            };\n            this.eventService.dispatchEvent(event_1);\n        }\n        else {\n            this.columnController.setPivotColumns(columns, \"toolPanelUi\");\n        }\n    };\n    PivotColumnsPanel.prototype.getIconName = function () {\n        return this.isPotentialDndColumns() ? main_1.DragAndDropService.ICON_PIVOT : main_1.DragAndDropService.ICON_NOT_ALLOWED;\n    };\n    PivotColumnsPanel.prototype.getExistingColumns = function () {\n        return this.columnController.getPivotColumns();\n    };\n    __decorate([\n        main_1.Autowired('columnController'),\n        __metadata(\"design:type\", main_1.ColumnController)\n    ], PivotColumnsPanel.prototype, \"columnController\", void 0);\n    __decorate([\n        main_1.Autowired('eventService'),\n        __metadata(\"design:type\", main_1.EventService)\n    ], PivotColumnsPanel.prototype, \"eventService\", void 0);\n    __decorate([\n        main_1.Autowired('gridOptionsWrapper'),\n        __metadata(\"design:type\", main_1.GridOptionsWrapper)\n    ], PivotColumnsPanel.prototype, \"gridOptionsWrapper\", void 0);\n    __decorate([\n        main_1.Autowired('context'),\n        __metadata(\"design:type\", main_1.Context)\n    ], PivotColumnsPanel.prototype, \"context\", void 0);\n    __decorate([\n        main_1.Autowired('loggerFactory'),\n        __metadata(\"design:type\", main_1.LoggerFactory)\n    ], PivotColumnsPanel.prototype, \"loggerFactory\", void 0);\n    __decorate([\n        main_1.Autowired('dragAndDropService'),\n        __metadata(\"design:type\", main_1.DragAndDropService)\n    ], PivotColumnsPanel.prototype, \"dragAndDropService\", void 0);\n    __decorate([\n        main_1.Autowired('columnApi'),\n        __metadata(\"design:type\", main_1.ColumnApi)\n    ], PivotColumnsPanel.prototype, \"columnApi\", void 0);\n    __decorate([\n        main_1.Autowired('gridApi'),\n        __metadata(\"design:type\", main_1.GridApi)\n    ], PivotColumnsPanel.prototype, \"gridApi\", void 0);\n    __decorate([\n        main_1.PostConstruct,\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", []),\n        __metadata(\"design:returntype\", void 0)\n    ], PivotColumnsPanel.prototype, \"passBeansUp\", null);\n    PivotColumnsPanel = __decorate([\n        main_1.Bean(\"pivotColumnsPanel\")\n    ], PivotColumnsPanel);\n    return PivotColumnsPanel;\n}(abstractColumnDropPanel_1.AbstractColumnDropPanel));\nexports.PivotColumnsPanel = PivotColumnsPanel;\n",null]}