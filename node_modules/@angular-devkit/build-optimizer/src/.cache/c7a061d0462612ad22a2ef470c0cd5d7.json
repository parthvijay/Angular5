{"remainingRequest":"/Users/pavijayv/Documents/cisco-ready-qualification/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/Users/pavijayv/Documents/cisco-ready-qualification/node_modules/ag-grid-enterprise/dist/lib/statusBar/statusBar.js","dependencies":[{"path":"/Users/pavijayv/Documents/cisco-ready-qualification/node_modules/ag-grid-enterprise/dist/lib/statusBar/statusBar.js","mtime":1523957359000},{"path":"/Users/pavijayv/Documents/cisco-ready-qualification/node_modules/cache-loader/dist/cjs.js","mtime":1525383502481},{"path":"/Users/pavijayv/Documents/cisco-ready-qualification/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["// ag-grid-enterprise v17.1.1\n\"use strict\";\nvar __extends = /*@__PURE__*/ require(\"tslib\").__extends;\nvar __decorate = /*@__PURE__*/ require(\"tslib\").__decorate;\nvar __metadata = /*@__PURE__*/ require(\"tslib\").__metadata;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar main_1 = require(\"ag-grid/main\");\nvar statusItem_1 = require(\"./statusItem\");\nvar rangeController_1 = require(\"../rangeController\");\nvar StatusBar = /*@__PURE__*/ (function (_super) {\n    __extends(StatusBar, _super);\n    function StatusBar() {\n        var _this = _super.call(this, StatusBar_1.TEMPLATE) || this;\n        _this.aggregationsComponent = new main_1.Component('<div class=\"ag-status-bar-aggregations\"></div>');\n        _this.infoLabel = new main_1.Component(\"<div class=\\\"ag-status-bar-info-label\\\"></div>\");\n        return _this;\n    }\n    StatusBar_1 = StatusBar;\n    StatusBar.prototype.init = function () {\n        // we want to hide until the first aggregation comes in\n        this.setVisible(false);\n        this.createStatusItems();\n        this.eventService.addEventListener(main_1.Events.EVENT_RANGE_SELECTION_CHANGED, this.onRangeSelectionChanged.bind(this));\n        this.eventService.addEventListener(main_1.Events.EVENT_MODEL_UPDATED, this.onRangeSelectionChanged.bind(this));\n    };\n    StatusBar.prototype.createStatusItems = function () {\n        var _this = this;\n        var localeTextFunc = this.gridOptionsWrapper.getLocaleTextFunc();\n        this.statusItemSum = new statusItem_1.StatusItem(localeTextFunc('sum', 'Sum'));\n        this.statusItemCount = new statusItem_1.StatusItem(localeTextFunc('count', 'Count'));\n        this.statusItemMin = new statusItem_1.StatusItem(localeTextFunc('min', 'Min'));\n        this.statusItemMax = new statusItem_1.StatusItem(localeTextFunc('max', 'Max'));\n        this.statusItemAvg = new statusItem_1.StatusItem(localeTextFunc('average', 'Average'));\n        this.forEachStatusItem(function (statusItem) {\n            _this.context.wireBean(statusItem);\n            _this.aggregationsComponent.appendChild(statusItem);\n            statusItem.setVisible(false);\n        });\n        this.appendChild(this.infoLabel);\n        this.appendChild(this.aggregationsComponent);\n    };\n    StatusBar.prototype.forEachStatusItem = function (callback) {\n        [this.statusItemAvg, this.statusItemCount, this.statusItemMin, this.statusItemMax, this.statusItemSum].forEach(callback);\n    };\n    StatusBar.prototype.onRangeSelectionChanged = function () {\n        var _this = this;\n        var cellRanges = this.rangeController.getCellRanges();\n        var sum = 0;\n        var count = 0;\n        var numberCount = 0;\n        var min = null;\n        var max = null;\n        var cellsSoFar = {};\n        if (!main_1._.missingOrEmpty(cellRanges)) {\n            cellRanges.forEach(function (cellRange) {\n                // get starting and ending row, remember rowEnd could be before rowStart\n                var startRow = cellRange.start.getGridRow();\n                var endRow = cellRange.end.getGridRow();\n                var startRowIsFirst = startRow.before(endRow);\n                var currentRow = startRowIsFirst ? startRow : endRow;\n                var lastRow = startRowIsFirst ? endRow : startRow;\n                while (true) {\n                    var finishedAllRows = main_1._.missing(currentRow) || lastRow.before(currentRow);\n                    if (finishedAllRows) {\n                        break;\n                    }\n                    cellRange.columns.forEach(function (column) {\n                        // we only want to include each cell once, in case a cell is in multiple ranges\n                        var cellId = currentRow.getGridCell(column).createId();\n                        if (cellsSoFar[cellId]) {\n                            return;\n                        }\n                        cellsSoFar[cellId] = true;\n                        var rowNode = _this.getRowNode(currentRow);\n                        if (main_1._.missing(rowNode)) {\n                            return;\n                        }\n                        var value = _this.valueService.getValue(column, rowNode);\n                        // if empty cell, skip it, doesn't impact count or anything\n                        if (main_1._.missing(value) || value === '') {\n                            return;\n                        }\n                        // see if value is wrapped, can happen when doing count() or avg() functions\n                        if (value.value) {\n                            value = value.value;\n                        }\n                        if (typeof value === 'string') {\n                            value = Number(value);\n                        }\n                        if (typeof value === 'number' && !isNaN(value)) {\n                            sum += value;\n                            if (max === null || value > max) {\n                                max = value;\n                            }\n                            if (min === null || value < min) {\n                                min = value;\n                            }\n                            numberCount++;\n                        }\n                        count++;\n                    });\n                    currentRow = _this.cellNavigationService.getRowBelow(currentRow);\n                }\n            });\n        }\n        var gotResult = this.gridOptionsWrapper.isAlwaysShowStatusBar() || count > 1;\n        var gotNumberResult = numberCount > 1;\n        // we should count even if no numbers\n        if (gotResult) {\n            this.statusItemCount.setValue(count);\n        }\n        this.statusItemCount.setVisible(gotResult);\n        // if numbers, then show the number items\n        if (gotNumberResult) {\n            this.statusItemSum.setValue(sum);\n            this.statusItemMin.setValue(min);\n            this.statusItemMax.setValue(max);\n            this.statusItemAvg.setValue(sum / numberCount);\n        }\n        this.statusItemSum.setVisible(gotNumberResult);\n        this.statusItemMin.setVisible(gotNumberResult);\n        this.statusItemMax.setVisible(gotNumberResult);\n        this.statusItemAvg.setVisible(gotNumberResult);\n        if (this.isVisible() !== gotResult) {\n            this.setVisible(gotResult);\n            this.gridCore.doLayout();\n        }\n    };\n    StatusBar.prototype.getRowNode = function (gridRow) {\n        switch (gridRow.floating) {\n            case main_1.Constants.PINNED_TOP:\n                return this.pinnedRowModel.getPinnedTopRowData()[gridRow.rowIndex];\n            case main_1.Constants.PINNED_BOTTOM:\n                return this.pinnedRowModel.getPinnedBottomRowData()[gridRow.rowIndex];\n            default:\n                return this.rowModel.getRow(gridRow.rowIndex);\n        }\n    };\n    StatusBar.TEMPLATE = '<div class=\"ag-status-bar\">' +\n        '</div>';\n    __decorate([\n        main_1.Autowired('eventService'),\n        __metadata(\"design:type\", main_1.EventService)\n    ], StatusBar.prototype, \"eventService\", void 0);\n    __decorate([\n        main_1.Autowired('rangeController'),\n        __metadata(\"design:type\", rangeController_1.RangeController)\n    ], StatusBar.prototype, \"rangeController\", void 0);\n    __decorate([\n        main_1.Autowired('valueService'),\n        __metadata(\"design:type\", main_1.ValueService)\n    ], StatusBar.prototype, \"valueService\", void 0);\n    __decorate([\n        main_1.Autowired('cellNavigationService'),\n        __metadata(\"design:type\", main_1.CellNavigationService)\n    ], StatusBar.prototype, \"cellNavigationService\", void 0);\n    __decorate([\n        main_1.Autowired('pinnedRowModel'),\n        __metadata(\"design:type\", main_1.PinnedRowModel)\n    ], StatusBar.prototype, \"pinnedRowModel\", void 0);\n    __decorate([\n        main_1.Autowired('rowModel'),\n        __metadata(\"design:type\", Object)\n    ], StatusBar.prototype, \"rowModel\", void 0);\n    __decorate([\n        main_1.Autowired('context'),\n        __metadata(\"design:type\", main_1.Context)\n    ], StatusBar.prototype, \"context\", void 0);\n    __decorate([\n        main_1.Autowired('gridOptionsWrapper'),\n        __metadata(\"design:type\", main_1.GridOptionsWrapper)\n    ], StatusBar.prototype, \"gridOptionsWrapper\", void 0);\n    __decorate([\n        main_1.Autowired('gridCore'),\n        __metadata(\"design:type\", main_1.GridCore)\n    ], StatusBar.prototype, \"gridCore\", void 0);\n    __decorate([\n        main_1.PostConstruct,\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", []),\n        __metadata(\"design:returntype\", void 0)\n    ], StatusBar.prototype, \"init\", null);\n    StatusBar = StatusBar_1 = __decorate([\n        main_1.Bean('statusBar')\n    ], StatusBar);\n    return StatusBar;\n    var StatusBar_1;\n}(main_1.Component));\nexports.StatusBar = StatusBar;\n",null]}