{"remainingRequest":"/Users/pavijayv/Documents/cisco-ready-qualification/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/Users/pavijayv/Documents/cisco-ready-qualification/node_modules/ag-grid-enterprise/dist/lib/toolPanel/columnsSelect/toolPanelGroupComp.js","dependencies":[{"path":"/Users/pavijayv/Documents/cisco-ready-qualification/node_modules/ag-grid-enterprise/dist/lib/toolPanel/columnsSelect/toolPanelGroupComp.js","mtime":1523957359000},{"path":"/Users/pavijayv/Documents/cisco-ready-qualification/node_modules/cache-loader/dist/cjs.js","mtime":1525383502481},{"path":"/Users/pavijayv/Documents/cisco-ready-qualification/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["// ag-grid-enterprise v17.1.1\n\"use strict\";\nvar __extends = /*@__PURE__*/ require(\"tslib\").__extends;\nvar __decorate = /*@__PURE__*/ require(\"tslib\").__decorate;\nvar __metadata = /*@__PURE__*/ require(\"tslib\").__metadata;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar main_1 = require(\"ag-grid/main\");\nvar ToolPanelGroupComp = /*@__PURE__*/ (function (_super) {\n    __extends(ToolPanelGroupComp, _super);\n    function ToolPanelGroupComp(columnGroup, columnDept, expandedCallback, allowDragging, expandByDefault) {\n        var _this = _super.call(this) || this;\n        _this.processingColumnStateChange = false;\n        _this.columnGroup = columnGroup;\n        _this.columnDept = columnDept;\n        _this.expandedCallback = expandedCallback;\n        _this.allowDragging = allowDragging;\n        _this.expanded = expandByDefault;\n        return _this;\n    }\n    ToolPanelGroupComp.prototype.init = function () {\n        this.setTemplate(ToolPanelGroupComp.TEMPLATE);\n        this.instantiate(this.context);\n        var eText = this.queryForHtmlElement('#eText');\n        this.displayName = this.columnGroup.getColGroupDef() ? this.columnGroup.getColGroupDef().headerName : null;\n        if (main_1.Utils.missing(this.displayName)) {\n            this.displayName = '>>';\n        }\n        eText.innerHTML = this.displayName;\n        this.setupExpandContract();\n        this.addCssClass('ag-toolpanel-indent-' + this.columnDept);\n        this.addDestroyableEventListener(this.eventService, main_1.Events.EVENT_COLUMN_PIVOT_MODE_CHANGED, this.onColumnStateChanged.bind(this));\n        this.setOpenClosedIcons();\n        this.setupDragging();\n        this.onColumnStateChanged();\n        this.addVisibilityListenersToAllChildren();\n        main_1.CssClassApplier.addToolPanelClassesFromColDef(this.columnGroup.getColGroupDef(), this.getGui(), this.gridOptionsWrapper, null, this.columnGroup);\n    };\n    ToolPanelGroupComp.prototype.addVisibilityListenersToAllChildren = function () {\n        var _this = this;\n        this.columnGroup.getLeafColumns().forEach(function (column) {\n            _this.addDestroyableEventListener(column, main_1.Column.EVENT_VISIBLE_CHANGED, _this.onColumnStateChanged.bind(_this));\n            _this.addDestroyableEventListener(column, main_1.Column.EVENT_VALUE_CHANGED, _this.onColumnStateChanged.bind(_this));\n            _this.addDestroyableEventListener(column, main_1.Column.EVENT_PIVOT_CHANGED, _this.onColumnStateChanged.bind(_this));\n            _this.addDestroyableEventListener(column, main_1.Column.EVENT_ROW_GROUP_CHANGED, _this.onColumnStateChanged.bind(_this));\n        });\n    };\n    ToolPanelGroupComp.prototype.setupDragging = function () {\n        var _this = this;\n        if (!this.allowDragging) {\n            main_1._.setVisible(this.eDragHandle, false);\n            return;\n        }\n        var dragSource = {\n            type: main_1.DragSourceType.ToolPanel,\n            eElement: this.eDragHandle,\n            dragItemName: this.displayName,\n            dragItemCallback: function () { return _this.createDragItem(); }\n        };\n        this.dragAndDropService.addDragSource(dragSource, true);\n        this.addDestroyFunc(function () { return _this.dragAndDropService.removeDragSource(dragSource); });\n    };\n    ToolPanelGroupComp.prototype.createDragItem = function () {\n        var visibleState = {};\n        this.columnGroup.getLeafColumns().forEach(function (col) {\n            visibleState[col.getId()] = col.isVisible();\n        });\n        return {\n            columns: this.columnGroup.getLeafColumns(),\n            visibleState: visibleState\n        };\n    };\n    ToolPanelGroupComp.prototype.setupExpandContract = function () {\n        this.eGroupClosedIcon = this.queryForHtmlElement('#eGroupClosedIcon');\n        this.eGroupOpenedIcon = this.queryForHtmlElement('#eGroupOpenedIcon');\n        this.eGroupClosedIcon.appendChild(main_1.Utils.createIcon('columnSelectClosed', this.gridOptionsWrapper, null));\n        this.eGroupOpenedIcon.appendChild(main_1.Utils.createIcon('columnSelectOpen', this.gridOptionsWrapper, null));\n        this.addDestroyableEventListener(this.eGroupClosedIcon, 'click', this.onExpandOrContractClicked.bind(this));\n        this.addDestroyableEventListener(this.eGroupOpenedIcon, 'click', this.onExpandOrContractClicked.bind(this));\n        var eColumnGroupIcons = this.queryForHtmlElement('#eColumnGroupIcons');\n        var touchListener = new main_1.TouchListener(eColumnGroupIcons, true);\n        this.addDestroyableEventListener(touchListener, main_1.TouchListener.EVENT_TAP, this.onExpandOrContractClicked.bind(this));\n        this.addDestroyFunc(touchListener.destroy.bind(touchListener));\n    };\n    ToolPanelGroupComp.prototype.onLabelClicked = function () {\n        var nextState = !this.cbSelect.isSelected();\n        this.onChangeCommon(nextState);\n    };\n    ToolPanelGroupComp.prototype.onCheckboxChanged = function (event) {\n        this.onChangeCommon(event.selected);\n    };\n    ToolPanelGroupComp.prototype.onChangeCommon = function (nextState) {\n        if (this.processingColumnStateChange) {\n            return;\n        }\n        var childColumns = this.columnGroup.getLeafColumns();\n        if (this.columnController.isPivotMode()) {\n            if (nextState) {\n                this.actionCheckedReduce(childColumns);\n            }\n            else {\n                this.actionUnCheckedReduce(childColumns);\n            }\n        }\n        else {\n            var allowedColumns = childColumns.filter(function (c) { return !c.isLockVisible(); });\n            this.columnController.setColumnsVisible(allowedColumns, nextState, \"toolPanelUi\");\n        }\n        if (this.selectionCallback) {\n            this.selectionCallback(this.isSelected());\n        }\n    };\n    ToolPanelGroupComp.prototype.actionUnCheckedReduce = function (columns) {\n        var columnsToUnPivot = [];\n        var columnsToUnValue = [];\n        var columnsToUnGroup = [];\n        columns.forEach(function (column) {\n            if (column.isPivotActive()) {\n                columnsToUnPivot.push(column);\n            }\n            if (column.isRowGroupActive()) {\n                columnsToUnGroup.push(column);\n            }\n            if (column.isValueActive()) {\n                columnsToUnValue.push(column);\n            }\n        });\n        if (columnsToUnPivot.length > 0) {\n            this.columnController.removePivotColumns(columnsToUnPivot, \"toolPanelUi\");\n        }\n        if (columnsToUnGroup.length > 0) {\n            this.columnController.removeRowGroupColumns(columnsToUnGroup, \"toolPanelUi\");\n        }\n        if (columnsToUnValue.length > 0) {\n            this.columnController.removeValueColumns(columnsToUnValue, \"toolPanelUi\");\n        }\n    };\n    ToolPanelGroupComp.prototype.actionCheckedReduce = function (columns) {\n        var columnsToAggregate = [];\n        var columnsToGroup = [];\n        var columnsToPivot = [];\n        columns.forEach(function (column) {\n            // don't change any column that's already got a function active\n            if (column.isAnyFunctionActive()) {\n                return;\n            }\n            if (column.isAllowValue()) {\n                columnsToAggregate.push(column);\n            }\n            else if (column.isAllowRowGroup()) {\n                columnsToGroup.push(column);\n            }\n            else if (column.isAllowRowGroup()) {\n                columnsToPivot.push(column);\n            }\n        });\n        if (columnsToAggregate.length > 0) {\n            this.columnController.addValueColumns(columnsToAggregate, \"toolPanelUi\");\n        }\n        if (columnsToGroup.length > 0) {\n            this.columnController.addRowGroupColumns(columnsToGroup, \"toolPanelUi\");\n        }\n        if (columnsToPivot.length > 0) {\n            this.columnController.addPivotColumns(columnsToPivot, \"toolPanelUi\");\n        }\n    };\n    ToolPanelGroupComp.prototype.onColumnStateChanged = function () {\n        var selectedValue = this.workOutSelectedValue();\n        var readOnlyValue = this.workOutReadOnlyValue();\n        this.processingColumnStateChange = true;\n        this.cbSelect.setSelected(selectedValue);\n        if (this.selectionCallback) {\n            this.selectionCallback(this.isSelected());\n        }\n        this.cbSelect.setReadOnly(readOnlyValue);\n        this.processingColumnStateChange = false;\n    };\n    ToolPanelGroupComp.prototype.workOutReadOnlyValue = function () {\n        var pivotMode = this.columnController.isPivotMode();\n        var colsThatCanAction = 0;\n        this.columnGroup.getLeafColumns().forEach(function (col) {\n            if (pivotMode) {\n                if (col.isAnyFunctionAllowed()) {\n                    colsThatCanAction++;\n                }\n            }\n            else {\n                if (!col.isLockVisible()) {\n                    colsThatCanAction++;\n                }\n            }\n        });\n        return colsThatCanAction === 0;\n    };\n    ToolPanelGroupComp.prototype.workOutSelectedValue = function () {\n        var _this = this;\n        var pivotMode = this.columnController.isPivotMode();\n        var visibleChildCount = 0;\n        var hiddenChildCount = 0;\n        this.columnGroup.getLeafColumns().forEach(function (column) {\n            if (_this.isColumnVisible(column, pivotMode)) {\n                visibleChildCount++;\n            }\n            else {\n                hiddenChildCount++;\n            }\n        });\n        var selectedValue;\n        if (visibleChildCount > 0 && hiddenChildCount > 0) {\n            selectedValue = null;\n        }\n        else if (visibleChildCount > 0) {\n            selectedValue = true;\n        }\n        else {\n            selectedValue = false;\n        }\n        return selectedValue;\n    };\n    ToolPanelGroupComp.prototype.isColumnVisible = function (column, pivotMode) {\n        if (pivotMode) {\n            var pivoted = column.isPivotActive();\n            var grouped = column.isRowGroupActive();\n            var aggregated = column.isValueActive();\n            return pivoted || grouped || aggregated;\n        }\n        else {\n            return column.isVisible();\n        }\n    };\n    ToolPanelGroupComp.prototype.onExpandOrContractClicked = function () {\n        this.expanded = !this.expanded;\n        this.setOpenClosedIcons();\n        this.expandedCallback();\n    };\n    ToolPanelGroupComp.prototype.setOpenClosedIcons = function () {\n        var folderOpen = this.expanded;\n        main_1.Utils.setVisible(this.eGroupClosedIcon, !folderOpen);\n        main_1.Utils.setVisible(this.eGroupOpenedIcon, folderOpen);\n    };\n    ToolPanelGroupComp.prototype.isExpanded = function () {\n        return this.expanded;\n    };\n    ToolPanelGroupComp.prototype.getDisplayName = function () {\n        return this.displayName;\n    };\n    ToolPanelGroupComp.prototype.onSelectAllChanged = function (value) {\n        if ((value && !this.cbSelect.isSelected()) ||\n            (!value && this.cbSelect.isSelected())) {\n            if (!this.cbSelect.isReadOnly()) {\n                this.cbSelect.toggle();\n            }\n        }\n    };\n    ToolPanelGroupComp.prototype.isSelected = function () {\n        return this.cbSelect.isSelected();\n    };\n    ToolPanelGroupComp.prototype.isSelectable = function () {\n        return !this.cbSelect.isReadOnly();\n    };\n    ToolPanelGroupComp.prototype.isExpandable = function () {\n        return true;\n    };\n    ToolPanelGroupComp.prototype.setExpanded = function (value) {\n        if (this.expanded !== value) {\n            this.onExpandOrContractClicked();\n        }\n    };\n    ToolPanelGroupComp.TEMPLATE = \"<div class=\\\"ag-column-select-column-group\\\">\\n            <span id=\\\"eColumnGroupIcons\\\" class=\\\"ag-column-group-icons\\\">\\n                <span id=\\\"eGroupOpenedIcon\\\" class=\\\"ag-column-group-closed-icon\\\"></span>\\n                <span id=\\\"eGroupClosedIcon\\\" class=\\\"ag-column-group-opened-icon\\\"></span>\\n            </span>\\n            <ag-checkbox ref=\\\"cbSelect\\\" (change)=\\\"onCheckboxChanged\\\" class=\\\"ag-column-select-checkbox\\\"></ag-checkbox>\\n            <span class=\\\"ag-column-drag\\\" ref=\\\"eDragHandle\\\"></span>\\n            <span id=\\\"eText\\\" class=\\\"ag-column-select-column-group-label\\\" (click)=\\\"onLabelClicked\\\"></span>\\n        </div>\";\n    __decorate([\n        main_1.Autowired('gridOptionsWrapper'),\n        __metadata(\"design:type\", main_1.GridOptionsWrapper)\n    ], ToolPanelGroupComp.prototype, \"gridOptionsWrapper\", void 0);\n    __decorate([\n        main_1.Autowired('columnController'),\n        __metadata(\"design:type\", main_1.ColumnController)\n    ], ToolPanelGroupComp.prototype, \"columnController\", void 0);\n    __decorate([\n        main_1.Autowired('gridPanel'),\n        __metadata(\"design:type\", main_1.GridPanel)\n    ], ToolPanelGroupComp.prototype, \"gridPanel\", void 0);\n    __decorate([\n        main_1.Autowired('context'),\n        __metadata(\"design:type\", main_1.Context)\n    ], ToolPanelGroupComp.prototype, \"context\", void 0);\n    __decorate([\n        main_1.Autowired('dragAndDropService'),\n        __metadata(\"design:type\", main_1.DragAndDropService)\n    ], ToolPanelGroupComp.prototype, \"dragAndDropService\", void 0);\n    __decorate([\n        main_1.Autowired('eventService'),\n        __metadata(\"design:type\", main_1.EventService)\n    ], ToolPanelGroupComp.prototype, \"eventService\", void 0);\n    __decorate([\n        main_1.RefSelector('cbSelect'),\n        __metadata(\"design:type\", main_1.AgCheckbox)\n    ], ToolPanelGroupComp.prototype, \"cbSelect\", void 0);\n    __decorate([\n        main_1.RefSelector('eDragHandle'),\n        __metadata(\"design:type\", HTMLElement)\n    ], ToolPanelGroupComp.prototype, \"eDragHandle\", void 0);\n    __decorate([\n        main_1.PostConstruct,\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", []),\n        __metadata(\"design:returntype\", void 0)\n    ], ToolPanelGroupComp.prototype, \"init\", null);\n    return ToolPanelGroupComp;\n}(main_1.Component));\nexports.ToolPanelGroupComp = ToolPanelGroupComp;\n",null]}