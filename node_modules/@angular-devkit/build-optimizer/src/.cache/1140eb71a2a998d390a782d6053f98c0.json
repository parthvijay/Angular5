{"remainingRequest":"/Users/pavijayv/Documents/cisco-ready-qualification/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/Users/pavijayv/Documents/cisco-ready-qualification/node_modules/ag-grid-enterprise/dist/lib/menu/menuItemMapper.js","dependencies":[{"path":"/Users/pavijayv/Documents/cisco-ready-qualification/node_modules/ag-grid-enterprise/dist/lib/menu/menuItemMapper.js","mtime":1523957359000},{"path":"/Users/pavijayv/Documents/cisco-ready-qualification/node_modules/cache-loader/dist/cjs.js","mtime":1525383502481},{"path":"/Users/pavijayv/Documents/cisco-ready-qualification/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["// ag-grid-enterprise v17.1.1\n\"use strict\";\nvar __decorate = /*@__PURE__*/ require(\"tslib\").__decorate;\nvar __metadata = /*@__PURE__*/ require(\"tslib\").__metadata;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar ag_grid_1 = require(\"ag-grid\");\nvar clipboardService_1 = require(\"../clipboardService\");\nvar aggFuncService_1 = require(\"../aggregation/aggFuncService\");\nvar MenuItemMapper = /*@__PURE__*/ (function () {\n    function MenuItemMapper() {\n    }\n    MenuItemMapper.prototype.mapWithStockItems = function (originalList, column) {\n        var _this = this;\n        if (!originalList) {\n            return [];\n        }\n        var resultList = [];\n        originalList.forEach(function (menuItemOrString) {\n            var result;\n            if (typeof menuItemOrString === 'string') {\n                result = _this.getStockMenuItem(menuItemOrString, column);\n            }\n            else {\n                result = menuItemOrString;\n            }\n            if (result.subMenu) {\n                var resultDef = result;\n                resultDef.subMenu = _this.mapWithStockItems(resultDef.subMenu, column);\n            }\n            resultList.push(result);\n        });\n        return resultList;\n    };\n    MenuItemMapper.prototype.getStockMenuItem = function (key, column) {\n        var _this = this;\n        var localeTextFunc = this.gridOptionsWrapper.getLocaleTextFunc();\n        switch (key) {\n            case 'pinSubMenu': return {\n                name: localeTextFunc('pinColumn', 'Pin Column'),\n                icon: ag_grid_1.Utils.createIconNoSpan('menuPin', this.gridOptionsWrapper, null),\n                subMenu: ['pinLeft', 'pinRight', 'clearPinned']\n            };\n            case 'pinLeft': return {\n                name: localeTextFunc('pinLeft', 'Pin Left'),\n                action: function () { return _this.columnController.setColumnPinned(column, ag_grid_1.Column.PINNED_LEFT, \"contextMenu\"); },\n                checked: column.isPinnedLeft()\n            };\n            case 'pinRight': return {\n                name: localeTextFunc('pinRight', 'Pin Right'),\n                action: function () { return _this.columnController.setColumnPinned(column, ag_grid_1.Column.PINNED_RIGHT, \"contextMenu\"); },\n                checked: column.isPinnedRight()\n            };\n            case 'clearPinned': return {\n                name: localeTextFunc('noPin', 'No Pin'),\n                action: function () { return _this.columnController.setColumnPinned(column, null, \"contextMenu\"); },\n                checked: !column.isPinned()\n            };\n            case 'valueAggSubMenu': return {\n                name: localeTextFunc('valueAggregation', 'Value Aggregation'),\n                icon: ag_grid_1.Utils.createIconNoSpan('menuValue', this.gridOptionsWrapper, null),\n                subMenu: this.createAggregationSubMenu(column)\n            };\n            case 'autoSizeThis': return {\n                name: localeTextFunc('autosizeThiscolumn', 'Autosize This Column'),\n                action: function () { return _this.columnController.autoSizeColumn(column, \"contextMenu\"); }\n            };\n            case 'autoSizeAll': return {\n                name: localeTextFunc('autosizeAllColumns', 'Autosize All Columns'),\n                action: function () { return _this.columnController.autoSizeAllColumns(\"contextMenu\"); }\n            };\n            case 'rowGroup': return {\n                name: localeTextFunc('groupBy', 'Group by') + ' ' + this.columnController.getDisplayNameForColumn(column, 'header'),\n                action: function () { return _this.columnController.addRowGroupColumn(column, \"contextMenu\"); },\n                icon: ag_grid_1.Utils.createIconNoSpan('menuAddRowGroup', this.gridOptionsWrapper, null)\n            };\n            case 'rowUnGroup': return {\n                name: localeTextFunc('ungroupBy', 'Un-Group by') + ' ' + this.columnController.getDisplayNameForColumn(column, 'header'),\n                action: function () { return _this.columnController.removeRowGroupColumn(column, \"contextMenu\"); },\n                icon: ag_grid_1.Utils.createIconNoSpan('menuRemoveRowGroup', this.gridOptionsWrapper, null)\n            };\n            case 'resetColumns': return {\n                name: localeTextFunc('resetColumns', 'Reset Columns'),\n                action: function () { return _this.columnController.resetColumnState(\"contextMenu\"); }\n            };\n            case 'expandAll': return {\n                name: localeTextFunc('expandAll', 'Expand All'),\n                action: function () { return _this.gridApi.expandAll(); }\n            };\n            case 'contractAll': return {\n                name: localeTextFunc('collapseAll', 'Collapse All'),\n                action: function () { return _this.gridApi.collapseAll(); }\n            };\n            case 'copy': return {\n                name: localeTextFunc('copy', 'Copy'),\n                shortcut: localeTextFunc('ctrlC', 'Ctrl+C'),\n                icon: ag_grid_1.Utils.createIconNoSpan('clipboardCopy', this.gridOptionsWrapper, null),\n                action: function () { return _this.clipboardService.copyToClipboard(false); }\n            };\n            case 'copyWithHeaders': return {\n                name: localeTextFunc('copyWithHeaders', 'Copy with Headers'),\n                // shortcut: localeTextFunc('ctrlC','Ctrl+C'),\n                icon: ag_grid_1.Utils.createIconNoSpan('clipboardCopy', this.gridOptionsWrapper, null),\n                action: function () { return _this.clipboardService.copyToClipboard(true); }\n            };\n            case 'paste': return {\n                name: localeTextFunc('paste', 'Paste'),\n                shortcut: localeTextFunc('ctrlV', 'Ctrl+V'),\n                disabled: true,\n                icon: ag_grid_1.Utils.createIconNoSpan('clipboardPaste', this.gridOptionsWrapper, null),\n                action: function () { return _this.clipboardService.pasteFromClipboard(); }\n            };\n            case 'toolPanel': return {\n                name: localeTextFunc('toolPanel', 'Tool Panel'),\n                checked: this.gridApi.isToolPanelShowing(),\n                action: function () { return _this.gridApi.showToolPanel(!_this.gridApi.isToolPanelShowing()); }\n            };\n            case 'export':\n                var exportSubMenuItems = [];\n                if (!this.gridOptionsWrapper.isSuppressCsvExport()) {\n                    exportSubMenuItems.push('csvExport');\n                }\n                if (!this.gridOptionsWrapper.isSuppressExcelExport()) {\n                    exportSubMenuItems.push('excelExport');\n                }\n                return {\n                    name: localeTextFunc('export', 'Export'),\n                    subMenu: exportSubMenuItems\n                };\n            case 'csvExport': return {\n                name: localeTextFunc('csvExport', 'CSV Export'),\n                action: function () { return _this.gridApi.exportDataAsCsv({}); }\n            };\n            case 'excelExport': return {\n                name: localeTextFunc('excelExport', 'Excel Export'),\n                action: function () { return _this.gridApi.exportDataAsExcel({}); }\n            };\n            case 'separator': return 'separator';\n            default:\n                console.log(\"ag-Grid: unknown menu item type \" + key);\n                return null;\n        }\n    };\n    MenuItemMapper.prototype.createAggregationSubMenu = function (column) {\n        var _this = this;\n        var localeTextFunc = this.gridOptionsWrapper.getLocaleTextFunc();\n        var columnIsAlreadyAggValue = column.isValueActive();\n        var funcNames = this.aggFuncService.getFuncNames(column);\n        var columnToUse;\n        if (column.isPrimary()) {\n            columnToUse = column;\n        }\n        else {\n            columnToUse = column.getColDef().pivotValueColumn;\n        }\n        var result = [];\n        funcNames.forEach(function (funcName) {\n            result.push({\n                name: localeTextFunc(funcName, funcName),\n                action: function () {\n                    _this.columnController.setColumnAggFunc(columnToUse, funcName, \"contextMenu\");\n                    _this.columnController.addValueColumn(columnToUse, \"contextMenu\");\n                },\n                checked: columnIsAlreadyAggValue && columnToUse.getAggFunc() === funcName\n            });\n        });\n        return result;\n    };\n    __decorate([\n        ag_grid_1.Autowired('gridOptionsWrapper'),\n        __metadata(\"design:type\", ag_grid_1.GridOptionsWrapper)\n    ], MenuItemMapper.prototype, \"gridOptionsWrapper\", void 0);\n    __decorate([\n        ag_grid_1.Autowired('columnController'),\n        __metadata(\"design:type\", ag_grid_1.ColumnController)\n    ], MenuItemMapper.prototype, \"columnController\", void 0);\n    __decorate([\n        ag_grid_1.Autowired('gridApi'),\n        __metadata(\"design:type\", ag_grid_1.GridApi)\n    ], MenuItemMapper.prototype, \"gridApi\", void 0);\n    __decorate([\n        ag_grid_1.Autowired('clipboardService'),\n        __metadata(\"design:type\", clipboardService_1.ClipboardService)\n    ], MenuItemMapper.prototype, \"clipboardService\", void 0);\n    __decorate([\n        ag_grid_1.Autowired('aggFuncService'),\n        __metadata(\"design:type\", aggFuncService_1.AggFuncService)\n    ], MenuItemMapper.prototype, \"aggFuncService\", void 0);\n    MenuItemMapper = __decorate([\n        ag_grid_1.Bean('menuItemMapper')\n    ], MenuItemMapper);\n    return MenuItemMapper;\n}());\nexports.MenuItemMapper = MenuItemMapper;\n",null]}