{"remainingRequest":"/Users/pavijayv/Documents/cisco-ready-qualification/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/Users/pavijayv/Documents/cisco-ready-qualification/node_modules/ag-grid-enterprise/dist/lib/menu/enterpriseMenu.js","dependencies":[{"path":"/Users/pavijayv/Documents/cisco-ready-qualification/node_modules/ag-grid-enterprise/dist/lib/menu/enterpriseMenu.js","mtime":1523957359000},{"path":"/Users/pavijayv/Documents/cisco-ready-qualification/node_modules/cache-loader/dist/cjs.js","mtime":1525383502481},{"path":"/Users/pavijayv/Documents/cisco-ready-qualification/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["// ag-grid-enterprise v17.1.1\n\"use strict\";\nvar __extends = /*@__PURE__*/ require(\"tslib\").__extends;\nvar __decorate = /*@__PURE__*/ require(\"tslib\").__decorate;\nvar __metadata = /*@__PURE__*/ require(\"tslib\").__metadata;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar ag_grid_1 = require(\"ag-grid\");\nvar columnSelectComp_1 = require(\"../toolPanel/columnsSelect/columnSelectComp\");\nvar menuList_1 = require(\"./menuList\");\nvar menuItemComponent_1 = require(\"./menuItemComponent\");\nvar menuItemMapper_1 = require(\"./menuItemMapper\");\nvar EnterpriseMenuFactory = /*@__PURE__*/ (function () {\n    function EnterpriseMenuFactory() {\n    }\n    EnterpriseMenuFactory.prototype.hideActiveMenu = function () {\n        if (this.activeMenu) {\n            this.activeMenu.destroy();\n        }\n    };\n    EnterpriseMenuFactory.prototype.showMenuAfterMouseEvent = function (column, mouseEvent, defaultTab) {\n        var _this = this;\n        this.showMenu(column, function (menu) {\n            _this.popupService.positionPopupUnderMouseEvent({\n                column: column,\n                type: 'columnMenu',\n                mouseEvent: mouseEvent,\n                ePopup: menu.getGui()\n            });\n            if (defaultTab) {\n                menu.showTab(defaultTab);\n            }\n        }, defaultTab);\n    };\n    EnterpriseMenuFactory.prototype.showMenuAfterButtonClick = function (column, eventSource, defaultTab, restrictToTabs) {\n        var _this = this;\n        this.showMenu(column, function (menu) {\n            _this.popupService.positionPopupUnderComponent({\n                column: column,\n                type: 'columnMenu',\n                eventSource: eventSource,\n                ePopup: menu.getGui(),\n                nudgeX: -9,\n                nudgeY: -26,\n                minWidth: menu.getMinWidth(),\n                keepWithinBounds: true\n            });\n            if (defaultTab) {\n                menu.showTab(defaultTab);\n            }\n        }, defaultTab, restrictToTabs);\n    };\n    EnterpriseMenuFactory.prototype.showMenu = function (column, positionCallback, defaultTab, restrictToTabs) {\n        var _this = this;\n        var menu = new EnterpriseMenu(column, this.lastSelectedTab, restrictToTabs);\n        this.context.wireBean(menu);\n        var eMenuGui = menu.getGui();\n        // need to show filter before positioning, as only after filter\n        // is visible can we find out what the width of it is\n        var hidePopup = this.popupService.addAsModalPopup(eMenuGui, true, function () {\n            menu.destroy();\n            column.setMenuVisible(false, \"contextMenu\");\n        });\n        positionCallback(menu);\n        menu.afterGuiAttached({\n            hidePopup: hidePopup\n        });\n        if (!defaultTab) {\n            menu.showTabBasedOnPreviousSelection();\n        }\n        menu.addEventListener(EnterpriseMenu.EVENT_TAB_SELECTED, function (event) {\n            _this.lastSelectedTab = event.key;\n        });\n        column.setMenuVisible(true, \"contextMenu\");\n        this.activeMenu = menu;\n        menu.addEventListener(ag_grid_1.BeanStub.EVENT_DESTROYED, function () {\n            if (_this.activeMenu === menu) {\n                _this.activeMenu = null;\n            }\n        });\n    };\n    EnterpriseMenuFactory.prototype.isMenuEnabled = function (column) {\n        return column.getMenuTabs(EnterpriseMenu.TABS_DEFAULT).length > 0;\n    };\n    __decorate([\n        ag_grid_1.Autowired('context'),\n        __metadata(\"design:type\", ag_grid_1.Context)\n    ], EnterpriseMenuFactory.prototype, \"context\", void 0);\n    __decorate([\n        ag_grid_1.Autowired('popupService'),\n        __metadata(\"design:type\", ag_grid_1.PopupService)\n    ], EnterpriseMenuFactory.prototype, \"popupService\", void 0);\n    __decorate([\n        ag_grid_1.Autowired('gridOptionsWrapper'),\n        __metadata(\"design:type\", ag_grid_1.GridOptionsWrapper)\n    ], EnterpriseMenuFactory.prototype, \"gridOptionsWrapper\", void 0);\n    EnterpriseMenuFactory = __decorate([\n        ag_grid_1.Bean('menuFactory')\n    ], EnterpriseMenuFactory);\n    return EnterpriseMenuFactory;\n}());\nexports.EnterpriseMenuFactory = EnterpriseMenuFactory;\nvar EnterpriseMenu = /*@__PURE__*/ (function (_super) {\n    __extends(EnterpriseMenu, _super);\n    function EnterpriseMenu(column, initialSelection, restrictTo) {\n        var _this = _super.call(this) || this;\n        _this.tabFactories = {};\n        _this.includeChecks = {};\n        _this.column = column;\n        _this.initialSelection = initialSelection;\n        _this.tabFactories[EnterpriseMenu.TAB_GENERAL] = _this.createMainPanel.bind(_this);\n        _this.tabFactories[EnterpriseMenu.TAB_FILTER] = _this.createFilterPanel.bind(_this);\n        _this.tabFactories[EnterpriseMenu.TAB_COLUMNS] = _this.createColumnsPanel.bind(_this);\n        _this.includeChecks[EnterpriseMenu.TAB_GENERAL] = function () { return true; };\n        _this.includeChecks[EnterpriseMenu.TAB_FILTER] = function () {\n            var isFilterEnabled = _this.gridOptionsWrapper.isEnableFilter();\n            var isFloatingFiltersEnabled = _this.gridOptionsWrapper.isFloatingFilter();\n            var isAnyFilteringEnabled = isFilterEnabled || isFloatingFiltersEnabled;\n            var suppressFilterForThisColumn = _this.column.getColDef().suppressFilter;\n            return isAnyFilteringEnabled && !suppressFilterForThisColumn;\n        };\n        _this.includeChecks[EnterpriseMenu.TAB_COLUMNS] = function () { return true; };\n        _this.restrictTo = restrictTo;\n        return _this;\n    }\n    EnterpriseMenu.prototype.getMinWidth = function () {\n        return this.tabbedLayout.getMinWidth();\n    };\n    EnterpriseMenu.prototype.init = function () {\n        var _this = this;\n        var items = this.column.getMenuTabs(this.restrictTo ? this.restrictTo : EnterpriseMenu.TABS_DEFAULT)\n            .filter(function (menuTabName) {\n            return _this.isValidMenuTabItem(menuTabName);\n        })\n            .filter(function (menuTabName) {\n            return _this.isNotSuppressed(menuTabName);\n        })\n            .map(function (menuTabName) {\n            return _this.createTab(menuTabName);\n        });\n        this.tabbedLayout = new ag_grid_1.TabbedLayout({\n            items: items,\n            cssClass: 'ag-menu',\n            onActiveItemClicked: this.onHidePopup.bind(this),\n            onItemClicked: this.onTabItemClicked.bind(this)\n        });\n    };\n    EnterpriseMenu.prototype.isValidMenuTabItem = function (menuTabName) {\n        var isValid = true;\n        var itemsToConsider = EnterpriseMenu.TABS_DEFAULT;\n        if (this.restrictTo != null) {\n            isValid = this.restrictTo.indexOf(menuTabName) > -1;\n            itemsToConsider = this.restrictTo;\n        }\n        isValid = isValid && EnterpriseMenu.TABS_DEFAULT.indexOf(menuTabName) > -1;\n        if (!isValid)\n            console.warn(\"Trying to render an invalid menu item '\" + menuTabName + \"'. Check that your 'menuTabs' contains one of [\" + itemsToConsider + \"]\");\n        return isValid;\n    };\n    EnterpriseMenu.prototype.isNotSuppressed = function (menuTabName) {\n        return this.includeChecks[menuTabName]();\n    };\n    EnterpriseMenu.prototype.createTab = function (name) {\n        return this.tabFactories[name]();\n    };\n    EnterpriseMenu.prototype.showTabBasedOnPreviousSelection = function () {\n        // show the tab the user was on last time they had a menu open\n        this.showTab(this.initialSelection);\n    };\n    EnterpriseMenu.prototype.showTab = function (toShow) {\n        if (this.tabItemColumns && toShow === EnterpriseMenu.TAB_COLUMNS) {\n            this.tabbedLayout.showItem(this.tabItemColumns);\n        }\n        else if (this.tabItemFilter && toShow === EnterpriseMenu.TAB_FILTER) {\n            this.tabbedLayout.showItem(this.tabItemFilter);\n        }\n        else if (this.tabItemGeneral && toShow === EnterpriseMenu.TAB_GENERAL) {\n            this.tabbedLayout.showItem(this.tabItemGeneral);\n        }\n        else {\n            this.tabbedLayout.showFirstItem();\n        }\n    };\n    EnterpriseMenu.prototype.onTabItemClicked = function (event) {\n        var key;\n        switch (event.item) {\n            case this.tabItemColumns:\n                key = EnterpriseMenu.TAB_COLUMNS;\n                break;\n            case this.tabItemFilter:\n                key = EnterpriseMenu.TAB_FILTER;\n                break;\n            case this.tabItemGeneral:\n                key = EnterpriseMenu.TAB_GENERAL;\n                break;\n        }\n        if (key) {\n            var event_1 = {\n                type: EnterpriseMenu.EVENT_TAB_SELECTED,\n                key: key\n            };\n            this.dispatchEvent(event_1);\n        }\n    };\n    EnterpriseMenu.prototype.destroy = function () {\n        if (this.columnSelectPanel) {\n            this.columnSelectPanel.destroy();\n        }\n        if (this.mainMenuList) {\n            this.mainMenuList.destroy();\n        }\n        _super.prototype.destroy.call(this);\n    };\n    EnterpriseMenu.prototype.getMenuItems = function () {\n        var defaultMenuOptions = this.getDefaultMenuOptions();\n        var result;\n        var userFunc = this.gridOptionsWrapper.getMainMenuItemsFunc();\n        if (userFunc) {\n            var userOptions = userFunc({\n                column: this.column,\n                api: this.gridOptionsWrapper.getApi(),\n                columnApi: this.gridOptionsWrapper.getColumnApi(),\n                context: this.gridOptionsWrapper.getContext(),\n                defaultItems: defaultMenuOptions\n            });\n            result = userOptions;\n        }\n        else {\n            result = defaultMenuOptions;\n        }\n        // GUI looks weird when two separators are side by side. this can happen accidentally\n        // if we remove items from the menu then two separators can edit up adjacent.\n        ag_grid_1.Utils.removeRepeatsFromArray(result, EnterpriseMenu.MENU_ITEM_SEPARATOR);\n        return result;\n    };\n    EnterpriseMenu.prototype.getDefaultMenuOptions = function () {\n        var result = [];\n        var allowPinning = !this.column.isLockPinned();\n        var rowGroupCount = this.columnController.getRowGroupColumns().length;\n        var doingGrouping = rowGroupCount > 0;\n        var groupedByThisColumn = this.columnController.getRowGroupColumns().indexOf(this.column) >= 0;\n        var allowValue = this.column.isAllowValue();\n        var allowRowGroup = this.column.isAllowRowGroup();\n        var isPrimary = this.column.isPrimary();\n        var pivotModeOn = this.columnController.isPivotMode();\n        var isInMemoryRowModel = this.rowModel.getType() === ag_grid_1.Constants.ROW_MODEL_TYPE_IN_MEMORY;\n        var usingTreeData = this.gridOptionsWrapper.isTreeData();\n        var allowValueAgg = \n        // if primary, then only allow aggValue if grouping and it's a value columns\n        (isPrimary && doingGrouping && allowValue)\n            || !isPrimary;\n        if (allowPinning) {\n            result.push('pinSubMenu');\n        }\n        if (allowValueAgg) {\n            result.push('valueAggSubMenu');\n        }\n        if (allowPinning || allowValueAgg) {\n            result.push(EnterpriseMenu.MENU_ITEM_SEPARATOR);\n        }\n        result.push('autoSizeThis');\n        result.push('autoSizeAll');\n        result.push(EnterpriseMenu.MENU_ITEM_SEPARATOR);\n        if (allowRowGroup && this.column.isPrimary()) {\n            if (groupedByThisColumn) {\n                result.push('rowUnGroup');\n            }\n            else {\n                result.push('rowGroup');\n            }\n        }\n        result.push(EnterpriseMenu.MENU_ITEM_SEPARATOR);\n        result.push('resetColumns');\n        result.push('toolPanel');\n        // only add grouping expand/collapse if grouping in the InMemoryRowModel\n        // if pivoting, we only have expandable groups if grouping by 2 or more columns\n        // as the lowest level group is not expandable while pivoting.\n        // if not pivoting, then any active row group can be expanded.\n        var allowExpandAndContract = false;\n        if (isInMemoryRowModel) {\n            if (usingTreeData) {\n                allowExpandAndContract = true;\n            }\n            else {\n                allowExpandAndContract = pivotModeOn ? rowGroupCount > 1 : rowGroupCount > 0;\n            }\n        }\n        if (allowExpandAndContract) {\n            result.push('expandAll');\n            result.push('contractAll');\n        }\n        return result;\n    };\n    EnterpriseMenu.prototype.createMainPanel = function () {\n        this.mainMenuList = new menuList_1.MenuList();\n        this.context.wireBean(this.mainMenuList);\n        var menuItems = this.getMenuItems();\n        var menuItemsMapped = this.menuItemMapper.mapWithStockItems(menuItems, this.column);\n        this.mainMenuList.addMenuItems(menuItemsMapped);\n        this.mainMenuList.addEventListener(menuItemComponent_1.MenuItemComponent.EVENT_ITEM_SELECTED, this.onHidePopup.bind(this));\n        this.tabItemGeneral = {\n            title: ag_grid_1.Utils.createIconNoSpan('menu', this.gridOptionsWrapper, this.column),\n            bodyPromise: ag_grid_1.Promise.resolve(this.mainMenuList.getGui()),\n            name: EnterpriseMenu.TAB_GENERAL\n        };\n        return this.tabItemGeneral;\n    };\n    EnterpriseMenu.prototype.onHidePopup = function () {\n        this.hidePopupFunc();\n    };\n    EnterpriseMenu.prototype.createFilterPanel = function () {\n        var filterWrapper = this.filterManager.getOrCreateFilterWrapper(this.column);\n        var afterFilterAttachedCallback;\n        filterWrapper.filterPromise.then(function (filter) {\n            if (filter.afterGuiAttached) {\n                afterFilterAttachedCallback = filter.afterGuiAttached.bind(filter);\n            }\n        });\n        this.tabItemFilter = {\n            title: ag_grid_1.Utils.createIconNoSpan('filter', this.gridOptionsWrapper, this.column),\n            bodyPromise: filterWrapper.guiPromise.promise,\n            afterAttachedCallback: afterFilterAttachedCallback,\n            name: EnterpriseMenu.TAB_FILTER\n        };\n        return this.tabItemFilter;\n    };\n    EnterpriseMenu.prototype.createColumnsPanel = function () {\n        var eWrapperDiv = document.createElement('div');\n        ag_grid_1.Utils.addCssClass(eWrapperDiv, 'ag-menu-column-select-wrapper');\n        this.columnSelectPanel = new columnSelectComp_1.ColumnSelectComp(false);\n        this.context.wireBean(this.columnSelectPanel);\n        eWrapperDiv.appendChild(this.columnSelectPanel.getGui());\n        this.tabItemColumns = {\n            title: ag_grid_1.Utils.createIconNoSpan('columns', this.gridOptionsWrapper, this.column),\n            bodyPromise: ag_grid_1.Promise.resolve(eWrapperDiv),\n            name: EnterpriseMenu.TAB_COLUMNS\n        };\n        return this.tabItemColumns;\n    };\n    EnterpriseMenu.prototype.afterGuiAttached = function (params) {\n        this.tabbedLayout.setAfterAttachedParams({ hidePopup: params.hidePopup });\n        this.hidePopupFunc = params.hidePopup;\n        // if the body scrolls, we want to hide the menu, as the menu will not appear in the right location anymore\n        var onBodyScroll = function (event) {\n            // if h scroll, popup is no longer over the column\n            if (event.direction === 'horizontal') {\n                params.hidePopup();\n            }\n        };\n        this.addDestroyFunc(params.hidePopup);\n        this.addDestroyableEventListener(this.eventService, 'bodyScroll', onBodyScroll);\n    };\n    EnterpriseMenu.prototype.getGui = function () {\n        return this.tabbedLayout.getGui();\n    };\n    EnterpriseMenu.EVENT_TAB_SELECTED = 'tabSelected';\n    EnterpriseMenu.TAB_FILTER = 'filterMenuTab';\n    EnterpriseMenu.TAB_GENERAL = 'generalMenuTab';\n    EnterpriseMenu.TAB_COLUMNS = 'columnsMenuTab';\n    EnterpriseMenu.TABS_DEFAULT = [EnterpriseMenu.TAB_GENERAL, EnterpriseMenu.TAB_FILTER, EnterpriseMenu.TAB_COLUMNS];\n    EnterpriseMenu.MENU_ITEM_SEPARATOR = 'separator';\n    __decorate([\n        ag_grid_1.Autowired('columnController'),\n        __metadata(\"design:type\", ag_grid_1.ColumnController)\n    ], EnterpriseMenu.prototype, \"columnController\", void 0);\n    __decorate([\n        ag_grid_1.Autowired('filterManager'),\n        __metadata(\"design:type\", ag_grid_1.FilterManager)\n    ], EnterpriseMenu.prototype, \"filterManager\", void 0);\n    __decorate([\n        ag_grid_1.Autowired('context'),\n        __metadata(\"design:type\", ag_grid_1.Context)\n    ], EnterpriseMenu.prototype, \"context\", void 0);\n    __decorate([\n        ag_grid_1.Autowired('gridApi'),\n        __metadata(\"design:type\", ag_grid_1.GridApi)\n    ], EnterpriseMenu.prototype, \"gridApi\", void 0);\n    __decorate([\n        ag_grid_1.Autowired('gridOptionsWrapper'),\n        __metadata(\"design:type\", ag_grid_1.GridOptionsWrapper)\n    ], EnterpriseMenu.prototype, \"gridOptionsWrapper\", void 0);\n    __decorate([\n        ag_grid_1.Autowired('eventService'),\n        __metadata(\"design:type\", ag_grid_1.EventService)\n    ], EnterpriseMenu.prototype, \"eventService\", void 0);\n    __decorate([\n        ag_grid_1.Autowired('menuItemMapper'),\n        __metadata(\"design:type\", menuItemMapper_1.MenuItemMapper)\n    ], EnterpriseMenu.prototype, \"menuItemMapper\", void 0);\n    __decorate([\n        ag_grid_1.Autowired('rowModel'),\n        __metadata(\"design:type\", Object)\n    ], EnterpriseMenu.prototype, \"rowModel\", void 0);\n    __decorate([\n        ag_grid_1.PostConstruct,\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", []),\n        __metadata(\"design:returntype\", void 0)\n    ], EnterpriseMenu.prototype, \"init\", null);\n    return EnterpriseMenu;\n}(ag_grid_1.BeanStub));\nexports.EnterpriseMenu = EnterpriseMenu;\n",null]}