{"remainingRequest":"/Users/pavijayv/Documents/cisco-ready-qualification/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/Users/pavijayv/Documents/cisco-ready-qualification/node_modules/aws-sdk/lib/services/sqs.js","dependencies":[{"path":"/Users/pavijayv/Documents/cisco-ready-qualification/node_modules/aws-sdk/lib/services/sqs.js","mtime":1525995316000},{"path":"/Users/pavijayv/Documents/cisco-ready-qualification/node_modules/cache-loader/dist/cjs.js","mtime":1525383502481},{"path":"/Users/pavijayv/Documents/cisco-ready-qualification/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["var AWS = require('../core');\n\nAWS.util.update(AWS.SQS.prototype, {\n  /**\n   * @api private\n   */\n  setupRequestListeners: function setupRequestListeners(request) {\n    request.addListener('build', this.buildEndpoint);\n\n    if (request.service.config.computeChecksums) {\n      if (request.operation === 'sendMessage') {\n        request.addListener('extractData', this.verifySendMessageChecksum);\n      } else if (request.operation === 'sendMessageBatch') {\n        request.addListener('extractData', this.verifySendMessageBatchChecksum);\n      } else if (request.operation === 'receiveMessage') {\n        request.addListener('extractData', this.verifyReceiveMessageChecksum);\n      }\n    }\n  },\n\n  /**\n   * @api private\n   */\n  verifySendMessageChecksum: function verifySendMessageChecksum(response) {\n    if (!response.data) return;\n\n    var md5 = response.data.MD5OfMessageBody;\n    var body = this.params.MessageBody;\n    var calculatedMd5 = this.service.calculateChecksum(body);\n    if (calculatedMd5 !== md5) {\n      var msg = 'Got \"' + response.data.MD5OfMessageBody +\n        '\", expecting \"' + calculatedMd5 + '\".';\n      this.service.throwInvalidChecksumError(response,\n        [response.data.MessageId], msg);\n    }\n  },\n\n  /**\n   * @api private\n   */\n  verifySendMessageBatchChecksum: function verifySendMessageBatchChecksum(response) {\n    if (!response.data) return;\n\n    var service = this.service;\n    var entries = {};\n    var errors = [];\n    var messageIds = [];\n    AWS.util.arrayEach(response.data.Successful, function (entry) {\n      entries[entry.Id] = entry;\n    });\n    AWS.util.arrayEach(this.params.Entries, function (entry) {\n      if (entries[entry.Id]) {\n        var md5 = entries[entry.Id].MD5OfMessageBody;\n        var body = entry.MessageBody;\n        if (!service.isChecksumValid(md5, body)) {\n          errors.push(entry.Id);\n          messageIds.push(entries[entry.Id].MessageId);\n        }\n      }\n    });\n\n    if (errors.length > 0) {\n      service.throwInvalidChecksumError(response, messageIds,\n        'Invalid messages: ' + errors.join(', '));\n    }\n  },\n\n  /**\n   * @api private\n   */\n  verifyReceiveMessageChecksum: function verifyReceiveMessageChecksum(response) {\n    if (!response.data) return;\n\n    var service = this.service;\n    var messageIds = [];\n    AWS.util.arrayEach(response.data.Messages, function(message) {\n      var md5 = message.MD5OfBody;\n      var body = message.Body;\n      if (!service.isChecksumValid(md5, body)) {\n        messageIds.push(message.MessageId);\n      }\n    });\n\n    if (messageIds.length > 0) {\n      service.throwInvalidChecksumError(response, messageIds,\n        'Invalid messages: ' + messageIds.join(', '));\n    }\n  },\n\n  /**\n   * @api private\n   */\n  throwInvalidChecksumError: function throwInvalidChecksumError(response, ids, message) {\n    response.error = AWS.util.error(new Error(), {\n      retryable: true,\n      code: 'InvalidChecksum',\n      messageIds: ids,\n      message: response.request.operation +\n               ' returned an invalid MD5 response. ' + message\n    });\n  },\n\n  /**\n   * @api private\n   */\n  isChecksumValid: function isChecksumValid(checksum, data) {\n    return this.calculateChecksum(data) === checksum;\n  },\n\n  /**\n   * @api private\n   */\n  calculateChecksum: function calculateChecksum(data) {\n    return AWS.util.crypto.md5(data, 'hex');\n  },\n\n  /**\n   * @api private\n   */\n  buildEndpoint: function buildEndpoint(request) {\n    var url = request.httpRequest.params.QueueUrl;\n    if (url) {\n      request.httpRequest.endpoint = new AWS.Endpoint(url);\n\n      // signature version 4 requires the region name to be set,\n      // sqs queue urls contain the region name\n      var matches = request.httpRequest.endpoint.host.match(/^sqs\\.(.+?)\\./);\n      if (matches) request.httpRequest.region = matches[1];\n    }\n  }\n});\n",null]}