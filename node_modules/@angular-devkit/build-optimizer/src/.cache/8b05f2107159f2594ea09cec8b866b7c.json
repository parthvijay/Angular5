{"remainingRequest":"/Users/pavijayv/Documents/cisco-ready-qualification/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/Users/pavijayv/Documents/cisco-ready-qualification/node_modules/ag-grid-enterprise/dist/lib/toolPanel/columnsSelect/columnSelectHeaderComp.js","dependencies":[{"path":"/Users/pavijayv/Documents/cisco-ready-qualification/node_modules/ag-grid-enterprise/dist/lib/toolPanel/columnsSelect/columnSelectHeaderComp.js","mtime":1523957359000},{"path":"/Users/pavijayv/Documents/cisco-ready-qualification/node_modules/cache-loader/dist/cjs.js","mtime":1525383502481},{"path":"/Users/pavijayv/Documents/cisco-ready-qualification/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["// ag-grid-enterprise v17.1.1\n\"use strict\";\nvar __extends = /*@__PURE__*/ require(\"tslib\").__extends;\nvar __decorate = /*@__PURE__*/ require(\"tslib\").__decorate;\nvar __metadata = /*@__PURE__*/ require(\"tslib\").__metadata;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar main_1 = require(\"ag-grid/main\");\nvar SELECTED_STATE;\n(function (SELECTED_STATE) {\n    SELECTED_STATE[SELECTED_STATE[\"CHECKED\"] = 0] = \"CHECKED\";\n    SELECTED_STATE[SELECTED_STATE[\"UNCHECKED\"] = 1] = \"UNCHECKED\";\n    SELECTED_STATE[SELECTED_STATE[\"INDETERMINIATE\"] = 2] = \"INDETERMINIATE\";\n})(SELECTED_STATE = exports.SELECTED_STATE || (exports.SELECTED_STATE = {}));\n;\nvar ColumnSelectHeaderComp = /*@__PURE__*/ (function (_super) {\n    __extends(ColumnSelectHeaderComp, _super);\n    function ColumnSelectHeaderComp() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.expandState = SELECTED_STATE.CHECKED;\n        _this.selectState = SELECTED_STATE.CHECKED;\n        return _this;\n    }\n    ColumnSelectHeaderComp.prototype.preConstruct = function () {\n        var translate = this.gridOptionsWrapper.getLocaleTextFunc();\n        this.setTemplate(\"<div class=\\\"ag-column-select-header\\\">\\n            <div class=\\\"ag-column-tool-panel\\\">\\n                <a href=\\\"javascript:void(0)\\\" (click)=\\\"onExpandClicked\\\" ref=\\\"eExpand\\\">\\n                    <span class=\\\"ag-icon ag-icon-tree-open\\\" ref=\\\"eExpandChecked\\\"></span>\\n                    <span class=\\\"ag-icon ag-icon-tree-closed\\\" ref=\\\"eExpandUnchecked\\\"></span>\\n                    <span class=\\\"ag-icon ag-icon ag-icon-tree-indeterminate\\\" ref=\\\"eExpandIndeterminate\\\"></span>\\n                </a>\\n                <a href=\\\"javascript:void(0)\\\" class=\\\"ag-column-tool-panel-item\\\" (click)=\\\"onSelectClicked\\\" ref=\\\"eSelect\\\">\\n                    <span class=\\\"ag-icon ag-icon-checkbox-checked\\\" ref=\\\"eSelectChecked\\\"></span>\\n                    <span class=\\\"ag-icon ag-icon-checkbox-unchecked\\\" ref=\\\"eSelectUnchecked\\\"></span>\\n                    <span class=\\\"ag-icon ag-icon-checkbox-indeterminate\\\" ref=\\\"eSelectIndeterminate\\\"></span>\\n                </a>\\n            </div>\\n            <div class=\\\"ag-filter-body\\\" ref=\\\"eFilter\\\">\\n                <input class=\\\"ag-column-name-filter\\\" ref=\\\"eFilterTextField\\\" type=\\\"text\\\" placeholder=\\\"\" + translate('filterOoo', 'Filter...') + \"\\\" (input)=\\\"onFilterTextChanged\\\">\\n            </div>\\n        </div>\");\n    };\n    ColumnSelectHeaderComp.prototype.init = function () {\n        this.instantiate(this.context);\n        this.addEventListeners();\n        if (this.columnController.isReady()) {\n            this.setColumnsCheckedState();\n            this.showOrHideOptions();\n        }\n        this.setExpandState(SELECTED_STATE.CHECKED);\n    };\n    // we only show expand / collapse if we are showing columns\n    ColumnSelectHeaderComp.prototype.showOrHideOptions = function () {\n        var showFilter = !this.gridOptionsWrapper.isToolPanelSuppressColumnFilter();\n        var showSelect = !this.gridOptionsWrapper.isToolPanelSuppressColumnSelectAll();\n        var showExpand = !this.gridOptionsWrapper.isToolPanelSuppressColumnExpandAll();\n        var groupsPresent = this.columnController.isPrimaryColumnGroupsPresent();\n        main_1._.setVisible(this.eFilter, showFilter);\n        main_1._.setVisible(this.eSelect, showSelect);\n        main_1._.setVisible(this.eExpand, showExpand && groupsPresent);\n    };\n    ColumnSelectHeaderComp.prototype.addEventListeners = function () {\n        var _this = this;\n        var eventsImpactingCheckedState = [\n            main_1.Events.EVENT_COLUMN_EVERYTHING_CHANGED,\n            main_1.Events.EVENT_COLUMN_PIVOT_CHANGED,\n            main_1.Events.EVENT_COLUMN_PIVOT_MODE_CHANGED,\n            main_1.Events.EVENT_COLUMN_ROW_GROUP_CHANGED,\n            main_1.Events.EVENT_COLUMN_VALUE_CHANGED,\n            main_1.Events.EVENT_COLUMN_VISIBLE,\n            main_1.Events.EVENT_NEW_COLUMNS_LOADED\n        ];\n        eventsImpactingCheckedState.forEach(function (event) {\n            _this.addDestroyableEventListener(_this.eventService, event, _this.setColumnsCheckedState.bind(_this));\n        });\n        this.addDestroyableEventListener(this.eventService, main_1.Events.EVENT_NEW_COLUMNS_LOADED, this.showOrHideOptions.bind(this));\n    };\n    ColumnSelectHeaderComp.prototype.onFilterTextChanged = function () {\n        var _this = this;\n        if (!this.onFilterTextChangedDebounced) {\n            this.onFilterTextChangedDebounced = main_1._.debounce(function () {\n                var filterText = _this.eFilterTextField.value;\n                _this.dispatchEvent({ type: 'filterChanged', filterText: filterText });\n            }, 400);\n        }\n        this.onFilterTextChangedDebounced();\n    };\n    ColumnSelectHeaderComp.prototype.onSelectClicked = function () {\n        // here we just fire the event. the following happens is the flow of events:\n        // 1. event here fired.\n        // 2. toolpanel updates the columns.\n        // 3. column controller fires events of column updated\n        // 4. update in this panel is updated based on events fired by column controller\n        if (this.selectState === SELECTED_STATE.CHECKED) {\n            this.dispatchEvent({ type: 'unselectAll' });\n        }\n        else {\n            this.dispatchEvent({ type: 'selectAll' });\n        }\n    };\n    ColumnSelectHeaderComp.prototype.onExpandClicked = function () {\n        if (this.expandState === SELECTED_STATE.CHECKED) {\n            this.dispatchEvent({ type: 'collapseAll' });\n        }\n        else {\n            this.dispatchEvent({ type: 'expandAll' });\n        }\n    };\n    ColumnSelectHeaderComp.prototype.setExpandState = function (state) {\n        this.expandState = state;\n        main_1._.setVisible(this.eExpandChecked, this.expandState === SELECTED_STATE.CHECKED);\n        main_1._.setVisible(this.eExpandUnchecked, this.expandState === SELECTED_STATE.UNCHECKED);\n        main_1._.setVisible(this.eExpandIndeterminate, this.expandState === SELECTED_STATE.INDETERMINIATE);\n    };\n    ColumnSelectHeaderComp.prototype.setColumnsCheckedState = function () {\n        var columns = this.columnController.getAllPrimaryColumns();\n        var pivotMode = this.columnController.isPivotMode();\n        var checkedCount = 0;\n        var uncheckedCount = 0;\n        columns.forEach(function (col) {\n            // not not count columns not in tool panel\n            var colDef = col.getColDef();\n            if (colDef && colDef.suppressToolPanel) {\n                return;\n            }\n            var checked;\n            if (pivotMode) {\n                var noPivotModeOptionsAllowed = !col.isAllowPivot() && !col.isAllowRowGroup() && !col.isAllowValue();\n                if (noPivotModeOptionsAllowed) {\n                    return;\n                }\n                checked = col.isValueActive() || col.isPivotActive() || col.isRowGroupActive();\n            }\n            else {\n                checked = col.isVisible();\n            }\n            if (checked) {\n                checkedCount++;\n            }\n            else {\n                uncheckedCount++;\n            }\n        });\n        if (checkedCount > 0 && uncheckedCount > 0) {\n            this.selectState = SELECTED_STATE.INDETERMINIATE;\n        }\n        else if (uncheckedCount > 0) {\n            this.selectState = SELECTED_STATE.UNCHECKED;\n        }\n        else {\n            this.selectState = SELECTED_STATE.CHECKED;\n        }\n        main_1._.setVisible(this.eSelectChecked, this.selectState === SELECTED_STATE.CHECKED);\n        main_1._.setVisible(this.eSelectUnchecked, this.selectState === SELECTED_STATE.UNCHECKED);\n        main_1._.setVisible(this.eSelectIndeterminate, this.selectState === SELECTED_STATE.INDETERMINIATE);\n    };\n    __decorate([\n        main_1.Autowired('context'),\n        __metadata(\"design:type\", main_1.Context)\n    ], ColumnSelectHeaderComp.prototype, \"context\", void 0);\n    __decorate([\n        main_1.Autowired('gridOptionsWrapper'),\n        __metadata(\"design:type\", main_1.GridOptionsWrapper)\n    ], ColumnSelectHeaderComp.prototype, \"gridOptionsWrapper\", void 0);\n    __decorate([\n        main_1.Autowired('columnController'),\n        __metadata(\"design:type\", main_1.ColumnController)\n    ], ColumnSelectHeaderComp.prototype, \"columnController\", void 0);\n    __decorate([\n        main_1.Autowired('eventService'),\n        __metadata(\"design:type\", main_1.EventService)\n    ], ColumnSelectHeaderComp.prototype, \"eventService\", void 0);\n    __decorate([\n        main_1.RefSelector('eFilterTextField'),\n        __metadata(\"design:type\", HTMLInputElement)\n    ], ColumnSelectHeaderComp.prototype, \"eFilterTextField\", void 0);\n    __decorate([\n        main_1.RefSelector('eSelectChecked'),\n        __metadata(\"design:type\", HTMLElement)\n    ], ColumnSelectHeaderComp.prototype, \"eSelectChecked\", void 0);\n    __decorate([\n        main_1.RefSelector('eSelectUnchecked'),\n        __metadata(\"design:type\", HTMLElement)\n    ], ColumnSelectHeaderComp.prototype, \"eSelectUnchecked\", void 0);\n    __decorate([\n        main_1.RefSelector('eSelectIndeterminate'),\n        __metadata(\"design:type\", HTMLElement)\n    ], ColumnSelectHeaderComp.prototype, \"eSelectIndeterminate\", void 0);\n    __decorate([\n        main_1.RefSelector('eExpandChecked'),\n        __metadata(\"design:type\", HTMLElement)\n    ], ColumnSelectHeaderComp.prototype, \"eExpandChecked\", void 0);\n    __decorate([\n        main_1.RefSelector('eExpandUnchecked'),\n        __metadata(\"design:type\", HTMLElement)\n    ], ColumnSelectHeaderComp.prototype, \"eExpandUnchecked\", void 0);\n    __decorate([\n        main_1.RefSelector('eExpandIndeterminate'),\n        __metadata(\"design:type\", HTMLElement)\n    ], ColumnSelectHeaderComp.prototype, \"eExpandIndeterminate\", void 0);\n    __decorate([\n        main_1.RefSelector('eExpand'),\n        __metadata(\"design:type\", HTMLElement)\n    ], ColumnSelectHeaderComp.prototype, \"eExpand\", void 0);\n    __decorate([\n        main_1.RefSelector('eSelect'),\n        __metadata(\"design:type\", HTMLElement)\n    ], ColumnSelectHeaderComp.prototype, \"eSelect\", void 0);\n    __decorate([\n        main_1.RefSelector('eFilter'),\n        __metadata(\"design:type\", HTMLElement)\n    ], ColumnSelectHeaderComp.prototype, \"eFilter\", void 0);\n    __decorate([\n        main_1.PreConstruct,\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", []),\n        __metadata(\"design:returntype\", void 0)\n    ], ColumnSelectHeaderComp.prototype, \"preConstruct\", null);\n    __decorate([\n        main_1.PostConstruct,\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", []),\n        __metadata(\"design:returntype\", void 0)\n    ], ColumnSelectHeaderComp.prototype, \"init\", null);\n    return ColumnSelectHeaderComp;\n}(main_1.Component));\nexports.ColumnSelectHeaderComp = ColumnSelectHeaderComp;\n",null]}