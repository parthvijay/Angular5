{"remainingRequest":"/Users/pavijayv/Documents/cisco-ready-qualification/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/Users/pavijayv/Documents/cisco-ready-qualification/node_modules/ag-grid-enterprise/dist/lib/rendering/detail/detailCellRenderer.js","dependencies":[{"path":"/Users/pavijayv/Documents/cisco-ready-qualification/node_modules/ag-grid-enterprise/dist/lib/rendering/detail/detailCellRenderer.js","mtime":1523957359000},{"path":"/Users/pavijayv/Documents/cisco-ready-qualification/node_modules/cache-loader/dist/cjs.js","mtime":1525383502481},{"path":"/Users/pavijayv/Documents/cisco-ready-qualification/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["// ag-grid-enterprise v17.1.1\n\"use strict\";\nvar __extends = /*@__PURE__*/ require(\"tslib\").__extends;\nvar __decorate = /*@__PURE__*/ require(\"tslib\").__decorate;\nvar __metadata = /*@__PURE__*/ require(\"tslib\").__metadata;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar main_1 = require(\"ag-grid/main\");\nvar DetailCellRenderer = /*@__PURE__*/ (function (_super) {\n    __extends(DetailCellRenderer, _super);\n    function DetailCellRenderer() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    DetailCellRenderer.prototype.init = function (params) {\n        var _this = this;\n        this.rowId = params.node.id;\n        this.masterGridApi = params.api;\n        this.selectAndSetTemplate(params);\n        if (main_1._.exists(this.eDetailGrid)) {\n            this.addThemeToDetailGrid();\n            this.createDetailsGrid(params);\n            this.registerDetailWithMaster(params.node);\n            this.loadRowData(params);\n            this.setupGrabMouseWheelEvent();\n            setTimeout(function () { return _this.detailGridOptions.api.doLayout(); }, 0);\n        }\n        else {\n            console.warn('ag-Grid: reference to eDetailGrid was missing from the details template. ' +\n                'Please add ref=\"eDetailGrid\" to the template.');\n        }\n    };\n    DetailCellRenderer.prototype.addThemeToDetailGrid = function () {\n        // this is needed by environment service of the child grid, the class needs to be on\n        // the grid div itself - the browser's CSS on the other hand just inherits from the parent grid theme.\n        var theme = this.environment.getTheme();\n        if (main_1._.exists(theme)) {\n            main_1._.addCssClass(this.eDetailGrid, theme);\n        }\n    };\n    DetailCellRenderer.prototype.setupGrabMouseWheelEvent = function () {\n        if (this.gridOptionsWrapper.isNativeScroll()) {\n            return;\n        }\n        var mouseWheelListener = function (event) {\n            event.stopPropagation();\n        };\n        // event is 'mousewheel' for IE9, Chrome, Safari, Opera\n        this.eDetailGrid.addEventListener('mousewheel', mouseWheelListener);\n        // event is 'DOMMouseScroll' Firefox\n        this.eDetailGrid.addEventListener('DOMMouseScroll', mouseWheelListener);\n    };\n    DetailCellRenderer.prototype.registerDetailWithMaster = function (rowNode) {\n        var _this = this;\n        var gridInfo = {\n            id: this.rowId,\n            api: this.detailGridOptions.api,\n            columnApi: this.detailGridOptions.columnApi\n        };\n        // register with api\n        this.masterGridApi.addDetailGridInfo(this.rowId, gridInfo);\n        // register with node\n        rowNode.detailGridInfo = gridInfo;\n        this.addDestroyFunc(function () {\n            _this.masterGridApi.removeDetailGridInfo(_this.rowId); // unregister from api\n            rowNode.detailGridInfo = null; // unregister from node\n        });\n    };\n    DetailCellRenderer.prototype.selectAndSetTemplate = function (params) {\n        var paramsAny = params;\n        if (main_1._.missing(paramsAny.template)) {\n            // use default template\n            this.setTemplate(DetailCellRenderer.TEMPLATE);\n        }\n        else {\n            // use user provided template\n            if (typeof paramsAny.template === 'string') {\n                this.setTemplate(paramsAny.template);\n            }\n            else if (typeof paramsAny.template === 'function') {\n                var templateFunc = paramsAny.template;\n                var template = templateFunc(params);\n                this.setTemplate(template);\n            }\n            else {\n                console.warn('ag-Grid: detailCellRendererParams.template should be function or string');\n                this.setTemplate(DetailCellRenderer.TEMPLATE);\n            }\n        }\n    };\n    DetailCellRenderer.prototype.createDetailsGrid = function (params) {\n        // we clone the detail grid options, as otherwise it would be shared\n        // across many instances, and that would be a problem because we set\n        // api and columnApi into gridOptions\n        var _this = this;\n        var gridOptions = params.detailGridOptions;\n        if (main_1._.missing(gridOptions)) {\n            console.warn('ag-Grid: could not find detail grid options for master detail, ' +\n                'please set gridOptions.detailCellRendererParams.detailGridOptions');\n        }\n        // IMPORTANT - gridOptions must be cloned\n        this.detailGridOptions = main_1._.cloneObject(gridOptions);\n        new main_1.Grid(this.eDetailGrid, this.detailGridOptions, {\n            seedBeanInstances: {\n                // a temporary fix for AG-1574\n                // AG-1715 raised to do a wider ranging refactor to improve this\n                agGridReact: params.agGridReact,\n                // AG-1716 - directly related to AG-1574 and AG-1715\n                frameworkComponentWrapper: params.frameworkComponentWrapper\n            }\n        });\n        this.addDestroyFunc(function () { return _this.detailGridOptions.api.destroy(); });\n    };\n    DetailCellRenderer.prototype.loadRowData = function (params) {\n        var userFunc = params.getDetailRowData;\n        if (!userFunc) {\n            console.warn('ag-Grid: could not find getDetailRowData for master / detail, ' +\n                'please set gridOptions.detailCellRendererParams.getDetailRowData');\n            return;\n        }\n        var funcParams = {\n            node: params.node,\n            data: params.data,\n            successCallback: this.setRowData.bind(this)\n        };\n        userFunc(funcParams);\n    };\n    DetailCellRenderer.prototype.setRowData = function (rowData) {\n        this.detailGridOptions.api.setRowData(rowData);\n    };\n    DetailCellRenderer.TEMPLATE = \"<div class=\\\"ag-details-row\\\">\\n            <div ref=\\\"eDetailGrid\\\" class=\\\"ag-details-grid\\\"/>\\n        </div>\";\n    __decorate([\n        main_1.RefSelector('eDetailGrid'),\n        __metadata(\"design:type\", HTMLElement)\n    ], DetailCellRenderer.prototype, \"eDetailGrid\", void 0);\n    __decorate([\n        main_1.Autowired('gridOptionsWrapper'),\n        __metadata(\"design:type\", main_1.GridOptionsWrapper)\n    ], DetailCellRenderer.prototype, \"gridOptionsWrapper\", void 0);\n    __decorate([\n        main_1.Autowired('environment'),\n        __metadata(\"design:type\", main_1.Environment)\n    ], DetailCellRenderer.prototype, \"environment\", void 0);\n    return DetailCellRenderer;\n}(main_1.Component));\nexports.DetailCellRenderer = DetailCellRenderer;\n",null]}