{"remainingRequest":"/Users/pavijayv/Documents/cisco-ready-qualification/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/Users/pavijayv/Documents/cisco-ready-qualification/node_modules/ng2-file-upload/file-upload/file-uploader.class.js","dependencies":[{"path":"/Users/pavijayv/Documents/cisco-ready-qualification/node_modules/ng2-file-upload/file-upload/file-uploader.class.js","mtime":1511630168000},{"path":"/Users/pavijayv/Documents/cisco-ready-qualification/node_modules/cache-loader/dist/cjs.js","mtime":1525383502481},{"path":"/Users/pavijayv/Documents/cisco-ready-qualification/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["\"use strict\";\nvar core_1 = require(\"@angular/core\");\nvar file_like_object_class_1 = require(\"./file-like-object.class\");\nvar file_item_class_1 = require(\"./file-item.class\");\nvar file_type_class_1 = require(\"./file-type.class\");\nfunction isFile(value) {\n    return (File && value instanceof File);\n}\nvar FileUploader = /*@__PURE__*/ (function () {\n    function FileUploader(options) {\n        this.isUploading = false;\n        this.queue = [];\n        this.progress = 0;\n        this._nextIndex = 0;\n        this.options = {\n            autoUpload: false,\n            isHTML5: true,\n            filters: [],\n            removeAfterUpload: false,\n            disableMultipart: false,\n            formatDataFunction: function (item) { return item._file; },\n            formatDataFunctionIsAsync: false\n        };\n        this.setOptions(options);\n        this.response = new core_1.EventEmitter();\n    }\n    FileUploader.prototype.setOptions = function (options) {\n        this.options = Object.assign(this.options, options);\n        this.authToken = this.options.authToken;\n        this.authTokenHeader = this.options.authTokenHeader || 'Authorization';\n        this.autoUpload = this.options.autoUpload;\n        this.options.filters.unshift({ name: 'queueLimit', fn: this._queueLimitFilter });\n        if (this.options.maxFileSize) {\n            this.options.filters.unshift({ name: 'fileSize', fn: this._fileSizeFilter });\n        }\n        if (this.options.allowedFileType) {\n            this.options.filters.unshift({ name: 'fileType', fn: this._fileTypeFilter });\n        }\n        if (this.options.allowedMimeType) {\n            this.options.filters.unshift({ name: 'mimeType', fn: this._mimeTypeFilter });\n        }\n        for (var i = 0; i < this.queue.length; i++) {\n            this.queue[i].url = this.options.url;\n        }\n    };\n    FileUploader.prototype.addToQueue = function (files, options, filters) {\n        var _this = this;\n        var list = [];\n        for (var _i = 0, files_1 = files; _i < files_1.length; _i++) {\n            var file = files_1[_i];\n            list.push(file);\n        }\n        var arrayOfFilters = this._getFilters(filters);\n        var count = this.queue.length;\n        var addedFileItems = [];\n        list.map(function (some) {\n            if (!options) {\n                options = _this.options;\n            }\n            var temp = new file_like_object_class_1.FileLikeObject(some);\n            if (_this._isValidFile(temp, arrayOfFilters, options)) {\n                var fileItem = new file_item_class_1.FileItem(_this, some, options);\n                addedFileItems.push(fileItem);\n                _this.queue.push(fileItem);\n                _this._onAfterAddingFile(fileItem);\n            }\n            else {\n                var filter = arrayOfFilters[_this._failFilterIndex];\n                _this._onWhenAddingFileFailed(temp, filter, options);\n            }\n        });\n        if (this.queue.length !== count) {\n            this._onAfterAddingAll(addedFileItems);\n            this.progress = this._getTotalProgress();\n        }\n        this._render();\n        if (this.options.autoUpload) {\n            this.uploadAll();\n        }\n    };\n    FileUploader.prototype.removeFromQueue = function (value) {\n        var index = this.getIndexOfItem(value);\n        var item = this.queue[index];\n        if (item.isUploading) {\n            item.cancel();\n        }\n        this.queue.splice(index, 1);\n        this.progress = this._getTotalProgress();\n    };\n    FileUploader.prototype.clearQueue = function () {\n        while (this.queue.length) {\n            this.queue[0].remove();\n        }\n        this.progress = 0;\n    };\n    FileUploader.prototype.uploadItem = function (value) {\n        var index = this.getIndexOfItem(value);\n        var item = this.queue[index];\n        var transport = this.options.isHTML5 ? '_xhrTransport' : '_iframeTransport';\n        item._prepareToUploading();\n        if (this.isUploading) {\n            return;\n        }\n        this.isUploading = true;\n        this[transport](item);\n    };\n    FileUploader.prototype.cancelItem = function (value) {\n        var index = this.getIndexOfItem(value);\n        var item = this.queue[index];\n        var prop = this.options.isHTML5 ? item._xhr : item._form;\n        if (item && item.isUploading) {\n            prop.abort();\n        }\n    };\n    FileUploader.prototype.uploadAll = function () {\n        var items = this.getNotUploadedItems().filter(function (item) { return !item.isUploading; });\n        if (!items.length) {\n            return;\n        }\n        items.map(function (item) { return item._prepareToUploading(); });\n        items[0].upload();\n    };\n    FileUploader.prototype.cancelAll = function () {\n        var items = this.getNotUploadedItems();\n        items.map(function (item) { return item.cancel(); });\n    };\n    FileUploader.prototype.isFile = function (value) {\n        return isFile(value);\n    };\n    FileUploader.prototype.isFileLikeObject = function (value) {\n        return value instanceof file_like_object_class_1.FileLikeObject;\n    };\n    FileUploader.prototype.getIndexOfItem = function (value) {\n        return typeof value === 'number' ? value : this.queue.indexOf(value);\n    };\n    FileUploader.prototype.getNotUploadedItems = function () {\n        return this.queue.filter(function (item) { return !item.isUploaded; });\n    };\n    FileUploader.prototype.getReadyItems = function () {\n        return this.queue\n            .filter(function (item) { return (item.isReady && !item.isUploading); })\n            .sort(function (item1, item2) { return item1.index - item2.index; });\n    };\n    FileUploader.prototype.destroy = function () {\n        return void 0;\n    };\n    FileUploader.prototype.onAfterAddingAll = function (fileItems) {\n        return { fileItems: fileItems };\n    };\n    FileUploader.prototype.onBuildItemForm = function (fileItem, form) {\n        return { fileItem: fileItem, form: form };\n    };\n    FileUploader.prototype.onAfterAddingFile = function (fileItem) {\n        return { fileItem: fileItem };\n    };\n    FileUploader.prototype.onWhenAddingFileFailed = function (item, filter, options) {\n        return { item: item, filter: filter, options: options };\n    };\n    FileUploader.prototype.onBeforeUploadItem = function (fileItem) {\n        return { fileItem: fileItem };\n    };\n    FileUploader.prototype.onProgressItem = function (fileItem, progress) {\n        return { fileItem: fileItem, progress: progress };\n    };\n    FileUploader.prototype.onProgressAll = function (progress) {\n        return { progress: progress };\n    };\n    FileUploader.prototype.onSuccessItem = function (item, response, status, headers) {\n        return { item: item, response: response, status: status, headers: headers };\n    };\n    FileUploader.prototype.onErrorItem = function (item, response, status, headers) {\n        return { item: item, response: response, status: status, headers: headers };\n    };\n    FileUploader.prototype.onCancelItem = function (item, response, status, headers) {\n        return { item: item, response: response, status: status, headers: headers };\n    };\n    FileUploader.prototype.onCompleteItem = function (item, response, status, headers) {\n        return { item: item, response: response, status: status, headers: headers };\n    };\n    FileUploader.prototype.onCompleteAll = function () {\n        return void 0;\n    };\n    FileUploader.prototype._mimeTypeFilter = function (item) {\n        return !(this.options.allowedMimeType && this.options.allowedMimeType.indexOf(item.type) === -1);\n    };\n    FileUploader.prototype._fileSizeFilter = function (item) {\n        return !(this.options.maxFileSize && item.size > this.options.maxFileSize);\n    };\n    FileUploader.prototype._fileTypeFilter = function (item) {\n        return !(this.options.allowedFileType &&\n            this.options.allowedFileType.indexOf(file_type_class_1.FileType.getMimeClass(item)) === -1);\n    };\n    FileUploader.prototype._onErrorItem = function (item, response, status, headers) {\n        item._onError(response, status, headers);\n        this.onErrorItem(item, response, status, headers);\n    };\n    FileUploader.prototype._onCompleteItem = function (item, response, status, headers) {\n        item._onComplete(response, status, headers);\n        this.onCompleteItem(item, response, status, headers);\n        var nextItem = this.getReadyItems()[0];\n        this.isUploading = false;\n        if (nextItem) {\n            nextItem.upload();\n            return;\n        }\n        this.onCompleteAll();\n        this.progress = this._getTotalProgress();\n        this._render();\n    };\n    FileUploader.prototype._headersGetter = function (parsedHeaders) {\n        return function (name) {\n            if (name) {\n                return parsedHeaders[name.toLowerCase()] || void 0;\n            }\n            return parsedHeaders;\n        };\n    };\n    FileUploader.prototype._xhrTransport = function (item) {\n        var _this = this;\n        var that = this;\n        var xhr = item._xhr = new XMLHttpRequest();\n        var sendable;\n        this._onBeforeUploadItem(item);\n        if (typeof item._file.size !== 'number') {\n            throw new TypeError('The file specified is no longer valid');\n        }\n        if (!this.options.disableMultipart) {\n            sendable = new FormData();\n            this._onBuildItemForm(item, sendable);\n            var appendFile = function () { return sendable.append(item.alias, item._file, item.file.name); };\n            if (!this.options.parametersBeforeFiles) {\n                appendFile();\n            }\n            // For AWS, Additional Parameters must come BEFORE Files\n            if (this.options.additionalParameter !== undefined) {\n                Object.keys(this.options.additionalParameter).forEach(function (key) {\n                    var paramVal = _this.options.additionalParameter[key];\n                    // Allow an additional parameter to include the filename\n                    if (typeof paramVal === 'string' && paramVal.indexOf('{{file_name}}') >= 0) {\n                        paramVal = paramVal.replace('{{file_name}}', item.file.name);\n                    }\n                    sendable.append(key, paramVal);\n                });\n            }\n            if (this.options.parametersBeforeFiles) {\n                appendFile();\n            }\n        }\n        else {\n            sendable = this.options.formatDataFunction(item);\n        }\n        xhr.upload.onprogress = function (event) {\n            var progress = Math.round(event.lengthComputable ? event.loaded * 100 / event.total : 0);\n            _this._onProgressItem(item, progress);\n        };\n        xhr.onload = function () {\n            var headers = _this._parseHeaders(xhr.getAllResponseHeaders());\n            var response = _this._transformResponse(xhr.response, headers);\n            var gist = _this._isSuccessCode(xhr.status) ? 'Success' : 'Error';\n            var method = '_on' + gist + 'Item';\n            _this[method](item, response, xhr.status, headers);\n            _this._onCompleteItem(item, response, xhr.status, headers);\n        };\n        xhr.onerror = function () {\n            var headers = _this._parseHeaders(xhr.getAllResponseHeaders());\n            var response = _this._transformResponse(xhr.response, headers);\n            _this._onErrorItem(item, response, xhr.status, headers);\n            _this._onCompleteItem(item, response, xhr.status, headers);\n        };\n        xhr.onabort = function () {\n            var headers = _this._parseHeaders(xhr.getAllResponseHeaders());\n            var response = _this._transformResponse(xhr.response, headers);\n            _this._onCancelItem(item, response, xhr.status, headers);\n            _this._onCompleteItem(item, response, xhr.status, headers);\n        };\n        xhr.open(item.method, item.url, true);\n        xhr.withCredentials = item.withCredentials;\n        if (this.options.headers) {\n            for (var _i = 0, _a = this.options.headers; _i < _a.length; _i++) {\n                var header = _a[_i];\n                xhr.setRequestHeader(header.name, header.value);\n            }\n        }\n        if (item.headers.length) {\n            for (var _b = 0, _c = item.headers; _b < _c.length; _b++) {\n                var header = _c[_b];\n                xhr.setRequestHeader(header.name, header.value);\n            }\n        }\n        if (this.authToken) {\n            xhr.setRequestHeader(this.authTokenHeader, this.authToken);\n        }\n        xhr.onreadystatechange = function () {\n            if (xhr.readyState == XMLHttpRequest.DONE) {\n                that.response.emit(xhr.responseText);\n            }\n        };\n        if (this.options.formatDataFunctionIsAsync) {\n            sendable.then(function (result) { return xhr.send(JSON.stringify(result)); });\n        }\n        else {\n            xhr.send(sendable);\n        }\n        this._render();\n    };\n    FileUploader.prototype._getTotalProgress = function (value) {\n        if (value === void 0) {\n            value = 0;\n        }\n        if (this.options.removeAfterUpload) {\n            return value;\n        }\n        var notUploaded = this.getNotUploadedItems().length;\n        var uploaded = notUploaded ? this.queue.length - notUploaded : this.queue.length;\n        var ratio = 100 / this.queue.length;\n        var current = value * ratio / 100;\n        return Math.round(uploaded * ratio + current);\n    };\n    FileUploader.prototype._getFilters = function (filters) {\n        if (!filters) {\n            return this.options.filters;\n        }\n        if (Array.isArray(filters)) {\n            return filters;\n        }\n        if (typeof filters === 'string') {\n            var names_1 = filters.match(/[^\\s,]+/g);\n            return this.options.filters\n                .filter(function (filter) { return names_1.indexOf(filter.name) !== -1; });\n        }\n        return this.options.filters;\n    };\n    FileUploader.prototype._render = function () {\n        return void 0;\n    };\n    FileUploader.prototype._queueLimitFilter = function () {\n        return this.options.queueLimit === undefined || this.queue.length < this.options.queueLimit;\n    };\n    FileUploader.prototype._isValidFile = function (file, filters, options) {\n        var _this = this;\n        this._failFilterIndex = -1;\n        return !filters.length ? true : filters.every(function (filter) {\n            _this._failFilterIndex++;\n            return filter.fn.call(_this, file, options);\n        });\n    };\n    FileUploader.prototype._isSuccessCode = function (status) {\n        return (status >= 200 && status < 300) || status === 304;\n    };\n    FileUploader.prototype._transformResponse = function (response, headers) {\n        return response;\n    };\n    FileUploader.prototype._parseHeaders = function (headers) {\n        var parsed = {};\n        var key;\n        var val;\n        var i;\n        if (!headers) {\n            return parsed;\n        }\n        headers.split('\\n').map(function (line) {\n            i = line.indexOf(':');\n            key = line.slice(0, i).trim().toLowerCase();\n            val = line.slice(i + 1).trim();\n            if (key) {\n                parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;\n            }\n        });\n        return parsed;\n    };\n    FileUploader.prototype._onWhenAddingFileFailed = function (item, filter, options) {\n        this.onWhenAddingFileFailed(item, filter, options);\n    };\n    FileUploader.prototype._onAfterAddingFile = function (item) {\n        this.onAfterAddingFile(item);\n    };\n    FileUploader.prototype._onAfterAddingAll = function (items) {\n        this.onAfterAddingAll(items);\n    };\n    FileUploader.prototype._onBeforeUploadItem = function (item) {\n        item._onBeforeUpload();\n        this.onBeforeUploadItem(item);\n    };\n    FileUploader.prototype._onBuildItemForm = function (item, form) {\n        item._onBuildForm(form);\n        this.onBuildItemForm(item, form);\n    };\n    FileUploader.prototype._onProgressItem = function (item, progress) {\n        var total = this._getTotalProgress(progress);\n        this.progress = total;\n        item._onProgress(progress);\n        this.onProgressItem(item, progress);\n        this.onProgressAll(total);\n        this._render();\n    };\n    FileUploader.prototype._onSuccessItem = function (item, response, status, headers) {\n        item._onSuccess(response, status, headers);\n        this.onSuccessItem(item, response, status, headers);\n    };\n    FileUploader.prototype._onCancelItem = function (item, response, status, headers) {\n        item._onCancel(response, status, headers);\n        this.onCancelItem(item, response, status, headers);\n    };\n    return FileUploader;\n}());\nexports.FileUploader = FileUploader;\n",null]}